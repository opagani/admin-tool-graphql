{"version":3,"file":"index.e2553a2e9ac2a2801a70.hot-update.js","sources":["webpack:///./app/graphql/Reports/services/getUserActivityDataForReports.ts"],"sourcesContent":["import axios from 'axios';\nimport log from '../../../server/utils/log';\nimport { tracer } from '../../../server/utils/tracer';\nimport type {\n  Activities,\n  ListingActivity,\n  Maybe,\n  UrlParams,\n  UserActivity,\n} from '../../../../shared/generated-types/graphql';\nimport type { QueryParams } from '../../../graphql/utils/utils';\nimport { utils } from '../../../graphql/utils/utils';\nimport nodeMonitor from '../../../server/utils/nodeMonitor';\n\nconst getUserActivityDataForReports = async (\n  methodToInvoke: string,\n  urlParams: Maybe<Array<Maybe<UrlParams>>>,\n  rentGuaranteeUserToken: string,\n  rentGuaranteeSessionToken: string,\n): Promise<Activities | null> => {\n  const url = `${process.env.API}/rent-guarantee/api/v1/admin/${methodToInvoke}`;\n  const queryParams: QueryParams = utils.generateQueryParams(urlParams);\n  const response = await axios\n    .get(`${url}`, {\n      params: queryParams,\n      headers: {\n        Cookie: `rent-guaranteeUserToken=${rentGuaranteeUserToken}; rent-guaranteeSessionToken=${rentGuaranteeSessionToken}`,\n      },\n    })\n    .then((res): Activities | null => {\n      switch (methodToInvoke) {\n        case 'getUserActivityAllEvents':\n        case 'getUserActivityOptIns':\n          if (res) {\n            return {\n              __typename: 'Activities',\n              userActivities: convertToActivity(res?.data?.data?.logs || []),\n            };\n          }\n          return null;\n        default:\n          return null;\n      }\n    })\n    .catch((err) => {\n      log.error(`Network error fetching user activity ${methodToInvoke} report: ${err}`);\n      // Log an error (using the class instance's logger):\n      nodeMonitor.increment({ name: 'userActivityReports failed', amount: 1 });\n      return null;\n    });\n\n  if (response) {\n    // Increment a count:\n    await nodeMonitor.increment({ name: 'userActivityReports viewed', amount: 1 });\n    return response;\n  }\n\n  return null;\n};\n\nconst convertToActivity = (\n  activities: Array<UserActivity | ListingActivity>,\n): Array<UserActivity | ListingActivity> => {\n  return activities.map((activity: UserActivity | ListingActivity): UserActivity | ListingActivity => {\n    return { ...activity, __typename: activity.idType == 'listingAlias' ? 'ListingActivity' : 'UserActivity' };\n  });\n};\n\nexport default tracer.wrap(getUserActivityDataForReports);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AASA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAPA;AAAA;AAUA;AACA;AACA;AADA;AAFA;AAOA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AAAA;AACA;AAXA;AAaA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AApCA;AAQA;AACA;AATA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAuCA;AAAA;AAAA;AACA;AAxCA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AA6CA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}