{"version":3,"file":"index.57bfb6abf18128614939.hot-update.js","sources":["webpack:///./app/graphql/Reports/services/getLandlordsDataForReports.ts"],"sourcesContent":["import axios from 'axios';\nimport log from '../../../server/utils/log';\nimport { tracer } from '../../../server/utils/tracer';\nimport type { Landlords } from '../../../../shared/generated-types/graphql';\nimport nodeMonitor from '../../../server/utils/nodeMonitor';\n\nconst getLandlordsDataForReports = async (\n  methodToInvoke: string,\n  urlParams: string | undefined | null,\n  rentGuaranteeUserToken: string,\n  rentGuaranteeSessionToken: string,\n): Promise<Landlords | null> => {\n  let url = `${process.env.API}/rent-guarantee/api/v1/admin/${methodToInvoke}`;\n  if (urlParams && urlParams?.length > 0) {\n    url = `${url}?${urlParams}`;\n  }\n\n  const response = await axios\n    .get(`${url}`, {\n      headers: {\n        Cookie: `rent-guaranteeUserToken=${rentGuaranteeUserToken}; rent-guaranteeSessionToken=${rentGuaranteeSessionToken}`,\n      },\n    })\n    .then((res) => res.data.data)\n    .catch((err) => {\n      log.error(`Network error fetching Landlords ${methodToInvoke} report: ${err}`);\n      // Log an error (using the class instance's logger):\n      nodeMonitor.increment({ name: 'landlordsReports failed', amount: 1 });\n      return null;\n    });\n\n  if (response) {\n    // Increment a count:\n    await nodeMonitor.increment({ name: 'landlordsReports viewed', amount: 1 });\n    return response;\n  }\n\n  return null;\n};\n\nexport default tracer.wrap(getLandlordsDataForReports);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAAA;AACA;AACA;AACA;AAVA;AAAA;AAaA;AACA;AADA;AADA;AAKA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAxBA;AAWA;AACA;AAZA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AA2BA;AAAA;AAAA;AACA;AA5BA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAiCA;;;;A","sourceRoot":""}