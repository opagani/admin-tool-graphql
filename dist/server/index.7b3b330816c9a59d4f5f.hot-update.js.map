{"version":3,"file":"index.7b3b330816c9a59d4f5f.hot-update.js","sources":["webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/monitor-node/src/nodeMonitor.ts"],"sourcesContent":["import type { RequestHandler } from 'express';\nimport type { MonitorInterface } from '@zg-rentals/monitor-base';\nimport { BaseMonitor, MonitorPlugin, MonitorReporter } from '@zg-rentals/monitor-base';\n\nexport abstract class NodeMonitorPlugin extends MonitorPlugin {\n  abstract onShutdown(): void;\n}\n\nexport abstract class NodeMonitorReporter extends MonitorReporter {\n  abstract onRequest(...args: Parameters<RequestHandler>): void;\n}\n\nexport class NodeMonitor extends BaseMonitor<NodeMonitorPlugin, NodeMonitorReporter> {\n  constructor(args: MonitorInterface<NodeMonitorPlugin, NodeMonitorReporter> = {}) {\n    super(args);\n\n    this._initializeProcessListeners();\n    this._initializeOnEnd();\n  }\n\n  _initializeProcessListeners = (): void => {\n    process.on('uncaughtExceptionMonitor', (err: Error, origin: 'uncaughtException' | 'unhandledRejection') => {\n      this.logger &&\n        this.logger.error(\n          {\n            stack: err.stack,\n            name: err.name,\n          },\n          `[${origin}] node server about to crash: ${err.message}`,\n        );\n\n      this.error({ error: err });\n    });\n  };\n\n  _initializeOnEnd = (): void => {\n    process.on('SIGINT', () => {\n      this.logger && this.logger.warn(`SIGINT detected, running plugins onEnd`);\n\n      this.plugins.map((plugin) => {\n        plugin.onShutdown();\n      });\n\n      this.logger && this.logger.warn(`notify shutdown listener finished`);\n\n      // todo: hack: fix for pino needing to finish writing\n      // before process terminates\n      // should work to implement pino.final and custom pino.destination in ServerLogger\n      // https://github.com/pinojs/pino/blob/master/docs/api.md#pino-final\n      setTimeout(() => process.exit(), 1000);\n    });\n  };\n\n  async onRequest(...args: Parameters<RequestHandler>) {\n    await Promise.all(\n      this.reporters.map((reporter) => {\n        return reporter.onRequest(...args);\n      }),\n    );\n    args[2]();\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AAEA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAIA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAIA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AACA;AADA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAQA;AACA;AAGA;AACA;AAFA;AACA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AArBA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AApCA;AACA;AAAA;AACA;AALA;AAKA;AACA;AAPA;AAAA;AAAA;AAAA;AAyCA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AACA;AACA;AALA;AAMA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA1CA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;;;;A","sourceRoot":""}