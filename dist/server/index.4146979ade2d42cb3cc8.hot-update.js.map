{"version":3,"file":"index.4146979ade2d42cb3cc8.hot-update.js","sources":["webpack:///./app/graphql/resolvers.ts"],"sourcesContent":["import merge from 'deepmerge';\nimport { mergedResolvers } from './index';\nconst { GraphQLScalarType, Kind } = require('graphql');\n\nconst dateScalar = new GraphQLScalarType({\n  name: 'Date',\n  description: 'Date custom scalar type',\n  serialize(value) {\n    return value.getTime(); // Convert outgoing Date to integer for JSON\n  },\n  parseValue(value) {\n    return new Date(value); // Convert incoming integer to Date\n  },\n  parseLiteral(ast) {\n    if (ast.kind === Kind.INT) {\n      return new Date(parseInt(ast.value, 10)); // Convert hard-coded AST string to integer and then to Date\n    }\n    return null; // Invalid hard-coded value (not an integer)\n  },\n});\n\nconst obj3 = { ...mergedResolvers, ...dateScalar };\n\nconst allResolvers = [...Object.values(obj3)];\n\nlet resolversObj = {};\n\nallResolvers.forEach((resolver) => {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  resolversObj = merge.all([resolversObj, resolver as any]);\n});\n\nexport default resolversObj;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAdA;AACA;AAgBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;A","sourceRoot":""}