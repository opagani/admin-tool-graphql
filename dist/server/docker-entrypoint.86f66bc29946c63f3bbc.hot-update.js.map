{"version":3,"file":"docker-entrypoint.86f66bc29946c63f3bbc.hot-update.js","sources":["webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/app/src/index.ts","webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/cli-tools/src/subprocess.ts","webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/cli-tools/src/yargs.ts","webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/logger-node/src/get-log-middleware.ts","webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/logger-node/src/index.ts","webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/workspace-graph/src/get-graph.ts"],"sourcesContent":["export * from './env';\nexport * from './brand';\nexport * from './ip';\nexport * from './web';\n","import { isDryRun } from './dry-run';\nimport os from 'os';\nimport type { ChildProcess, SpawnOptions } from 'child_process';\nimport { spawn } from 'child_process';\nimport type { Logger } from '@zg-rentals/logger-node';\nimport getNodeLogger, { getChildLogger } from '@zg-rentals/logger-node';\n\nexport interface RunSpec {\n  action: string;\n  cmd: string;\n  args?: Array<string>;\n  opts?: SpawnOptions;\n  logger?: Logger;\n  blockInDryRun?: boolean;\n}\n\nlet REPO_ROOT: string = process.cwd();\n\nexport function setDefaultCwd(cwd: string) {\n  REPO_ROOT = cwd;\n}\n\nexport class BatchError extends Error {}\n\nfunction indent(str: string) {\n  return ' > ' + str.trim().replace(/\\n/g, '\\n > ');\n}\n\nexport async function run(options: RunSpec): Promise<{ output: string; subprocess?: ChildProcess }> {\n  return new Promise(async (resolve, reject) => {\n    const logger = options.logger || getChildLogger(options.action);\n\n    const { blockInDryRun } = options;\n    const commandText = `${options.cmd} ${(options.args || []).join(' ')}`;\n\n    if (blockInDryRun && isDryRun()) {\n      logger.info(`DRY-RUN Running command: ${commandText}`);\n      return resolve({ output: '' });\n    }\n\n    logger.debug(`Running command: ${commandText}`);\n\n    const { args = [], cmd, opts = {} } = options;\n\n    const subprocess = spawn(cmd, args, {\n      cwd: REPO_ROOT,\n      ...opts,\n      env: { ...process.env, ...(opts.env || {}) },\n      stdio: opts.stdio || 'pipe',\n    });\n\n    let output = '';\n    let error = '';\n\n    function logOutput() {\n      output && logger.info(`in subprocess:\\n${indent(output)}`);\n      error && logger.error(`in subprocess:\\n${indent(error)}`);\n    }\n\n    subprocess.stdout?.on('data', (data) => {\n      output += data.toString();\n    });\n\n    subprocess.stderr?.on('data', (data) => {\n      error += data.toString();\n    });\n\n    subprocess.on('error', (error) => {\n      logOutput();\n      reject(error);\n    });\n\n    if (opts.detached) {\n      subprocess.unref();\n      resolve({\n        output: '',\n        subprocess,\n      });\n    } else {\n      subprocess.on('close', (code) => {\n        if (code && isFinite(code)) {\n          logOutput();\n          reject(new Error(`Subprocess failed with code ${code}`));\n          return;\n        }\n        output = output.trim();\n        if (output) {\n          logger.debug(`Command output:\\n${indent(output)}`);\n        }\n        resolve({\n          output,\n          subprocess,\n        });\n      });\n    }\n  });\n}\n\ntype BuildPromises = Array<() => Promise<string | void>>;\n\nexport async function batch(processes: Array<RunSpec>, parallel = true): Promise<Array<string | void>> {\n  const results: Array<string | void> = [];\n  const logger = getNodeLogger();\n  let failing = false;\n  const buildPromises: BuildPromises = processes.map((process) => {\n    return () => {\n      return run({ ...process, logger })\n        .then((output) => {\n          logger.info(process.action);\n          return output.output;\n        })\n        .catch((e) => {\n          logger.error(process.action);\n          if (e.message) {\n            logger.error(e.message);\n          }\n          failing = true;\n          throw e;\n        });\n    };\n  });\n\n  const maxParallel = parallel ? Math.min(os.cpus().length - 1, buildPromises.length) : 1;\n\n  return new Promise((resolve, reject) => {\n    function runTask(runner: () => Promise<string | void>): Promise<void> {\n      return runner()\n        .then((result) => {\n          results.push(result);\n          return;\n        })\n        .catch((e) => {\n          results.push(e);\n        })\n        .finally(() => {\n          runNextTask();\n        });\n    }\n\n    function runNextTask() {\n      if (buildPromises.length) {\n        const runnable = buildPromises.shift();\n        if (runnable) {\n          runTask(runnable);\n        }\n      }\n\n      if (!buildPromises.length && results.length === processes.length) {\n        if (failing) {\n          reject(new BatchError('Batch processes failed'));\n        }\n        resolve(results);\n      }\n    }\n\n    buildPromises.splice(0, maxParallel).forEach((promise) => {\n      runTask(promise);\n    });\n  });\n}\n","import type { Arguments, Argv, CommandBuilder, MiddlewareFunction, RequireDirectoryOptions } from 'yargs';\nimport type { DefaultArgv } from '.';\n\nimport getNodeLogger, { verbosityToLogLevel } from '@zg-rentals/logger-node';\nimport parser from 'yargs-parser';\nimport unparser from 'yargs-unparser';\nimport Yargs from 'yargs';\nimport path from 'path';\n\nimport { BatchError } from './subprocess';\nimport { setDefaultCwd } from './subprocess';\nimport { setDryRun } from './dry-run';\n\nexport const parserConfiguration = {\n  'strip-aliased': true,\n  'camel-case-expansion': false,\n  'greedy-arrays': true,\n  'populate--': true,\n};\n\n// eslint-disable-next-line @typescript-eslint/ban-types\ntype YargsType = Argv<{}>;\n\nexport function getYargs(yargs: YargsType, repoRoot: string): Argv<DefaultArgv> {\n  return yargs\n    .usage('$0 <command> [options]')\n    .help('help', 'Show this help screen')\n    .alias('help', 'h')\n    .completion('completion', false)\n    .option('dry-run', {\n      default: false,\n      description: 'Run without actually making modifications or destructive operations',\n      global: true,\n      group: 'Global',\n      type: 'boolean',\n    })\n    .option('repo-root', {\n      default: '',\n      description: 'Path to the root of the repository',\n      global: true,\n      group: 'Global',\n      hidden: true,\n      normalize: true,\n      type: 'string',\n    })\n    .option('verbosity', {\n      alias: 'v',\n      default: process.env.RJS_VERBOSITY ? parseInt(process.env.RJS_VERBOSITY) : 2,\n      description: 'Set the verbosity of the script output. Use -v, -vv, or -vvv for more verbose',\n      global: true,\n      group: 'Global',\n      type: 'count',\n    })\n    .option('ci', {\n      default: false,\n      description: 'Sets defaults for running scripts in a CI environment',\n      global: true,\n      group: 'Global',\n      hidden: true,\n      type: 'boolean',\n    })\n    .middleware(\n      [\n        (argv) => {\n          argv['repo-root'] = String(argv['repo-root'] || repoRoot);\n          setDefaultCwd(String(argv['repo-root']));\n        },\n        (argv) => {\n          setDryRun(argv['dry-run']);\n        },\n        (argv) => {\n          process.env.RJS_VERBOSITY = argv.verbosity.toString();\n          if (argv.ci) {\n            process.env.CI = 'true';\n          }\n        },\n        () => {\n          if (process.env.SUDO_UID) {\n            const logger = getNodeLogger();\n            logger.error(\n              'Do not run commands with `sudo`! If elevated permissions are required, commands will prompt you for your password only if and when necessary.',\n            );\n            process.exit(1);\n          }\n        },\n      ],\n      true,\n    )\n    .wrap(Math.min(120, process.stdout.columns))\n    .showHidden('show-advanced', 'Show advanced options')\n    .group('show-advanced', 'Global')\n    .global('show-advanced')\n    .group('help', 'Global')\n    .global('help')\n    .strict()\n    .parserConfiguration(parserConfiguration);\n}\n\nfunction fallbackHandler(argv: DefaultArgv) {\n  const logger = getNodeLogger({ level: verbosityToLogLevel(argv.verbosity) });\n  logger.info(argv);\n  throw new Error('No handler defined');\n}\n\nexport const commandDirOptions: RequireDirectoryOptions = {\n  extensions: ['ts'],\n  exclude: /(?:__tests__)/,\n  recurse: false,\n  visit: function visitor(module, filepath, filename) {\n    const { handler, command, builder, ...rest } = module;\n    const commandName = command || path.basename(filename || '', '.ts');\n    return {\n      ...rest,\n      builder: builder || (((yargs) => yargs.strict(false)) as CommandBuilder),\n      command: commandName,\n      handler: async (argv: DefaultArgv) => {\n        const logger = getNodeLogger({ level: verbosityToLogLevel(argv.verbosity) });\n        logger.trace(`Resolved CLI arguments:\n${Object.entries(argv).map((entry) => ` ${entry[0]}=${entry[1]}`)}`);\n\n        process.on('unhandledRejection', (reason, promise) => {\n          logger.error(`Unhandled Rejection at: ${promise} reason: ${reason}`);\n        });\n\n        try {\n          if (handler) {\n            await handler(argv);\n          } else {\n            fallbackHandler(argv);\n          }\n        } catch (err) {\n          if (!(err instanceof BatchError)) {\n            logger.error(err.message);\n          }\n          process.exitCode = 1;\n        }\n      },\n    };\n  },\n};\n\nexport async function runBuilder<R = Record<string, unknown>>(\n  builder: CommandBuilder<DefaultArgv, R>,\n  cmd = '',\n): Promise<Arguments<R>> {\n  const [command, extra] = cmd.split(' -- ');\n  const inputArgs = parser(`${command}${extra ? ` -- ${extra}` : ''}`, {\n    configuration: parserConfiguration,\n  });\n  const yargs = Yargs(unparser(inputArgs));\n  const middlewares: Array<MiddlewareFunction> = [];\n  jest.spyOn(yargs, 'middleware').mockImplementation((middleware) => {\n    middlewares.push(...(Array.isArray(middleware) ? middleware : [middleware]));\n    return yargs;\n  });\n\n  if (typeof builder !== 'function') {\n    throw new Error('Builder must be a function');\n  }\n\n  const processSpy = jest.spyOn(process, 'exit').mockImplementation(() => {\n    throw new Error('failed');\n  });\n\n  const out = builder(\n    getYargs(yargs, '/test-repo-root').middleware((argv) => {\n      const level = verbosityToLogLevel(argv.verbosity);\n      getNodeLogger({ level });\n    }),\n  );\n  const resolvedOut = await (out instanceof Promise ? out : Promise.resolve(out));\n  const argv = resolvedOut.argv;\n\n  middlewares.forEach((m) => {\n    m(argv);\n  });\n\n  processSpy.mockRestore();\n  return argv;\n}\n\nexport async function run<R = Record<string, unknown>>(\n  builder: CommandBuilder<DefaultArgv, R>,\n  handler: (args: Arguments<R>) => void | Promise<void>,\n  cmd = '',\n): Promise<void> {\n  const argv = await runBuilder(builder, cmd);\n  await handler(argv);\n}\n\nexport function buildTest<R = Record<string, unknown>>(\n  command: string,\n  builder: CommandBuilder<DefaultArgv, R>,\n  handler: (args: Arguments<R>) => void | Promise<void>,\n) {\n  return {\n    build: async (cmd = '') => runBuilder<R>(builder, cmd),\n    run: async (cmd = '') => run<R>(builder, handler, cmd),\n  };\n}\n","import type { Request, Response } from 'express';\nimport type { Level, LogEvent } from 'pino';\nimport type { Logger } from '@zg-rentals/logger-base';\n\nexport function getLogMiddleware(logger: Logger) {\n  return function logMiddleware(req: Request, res: Response) {\n    const logs = req.body?.logs || req.body;\n\n    if (logs && Array.isArray(logs)) {\n      logs.forEach((logEvent: LogEvent) => {\n        const { level, ts, messages, bindings } = logEvent;\n        const bindingsAsObj = bindings.reduce((acc, binding) => {\n          return {\n            ...acc,\n            ...binding,\n          };\n        }, {});\n\n        bindingsAsObj.browser = true;\n\n        const childLogger = logger.child(bindingsAsObj);\n\n        if (messages[0]) {\n          if (typeof messages[0] !== 'object') {\n            messages.unshift({});\n          }\n\n          messages[0] = {\n            ...messages[0],\n            requestId: req.id,\n            time: ts,\n          };\n\n          childLogger[level.label as Level](messages[0], ...messages.slice(1));\n        }\n      });\n    }\n\n    res.send('ok');\n  };\n}\n","import getNodeLogger from './get-node-logger';\n\nexport type { Logger } from '@zg-rentals/logger-base';\nexport * from './get-node-logger';\nexport * from './get-log-middleware';\nexport * from './get-child-logger';\nexport * from './get-http-logger';\nexport * from './verbosity-to-level';\nexport * from './log-sync';\n\nexport default getNodeLogger;\n","import glob from 'glob';\nimport path from 'path';\nimport { getChildLogger } from '@zg-rentals/logger-node';\nimport { file } from '@zg-rentals/cli-tools';\nimport type { PackageJson, PackageJsonWithLocation } from './Workspace';\nimport Workspaces from './Workspaces';\n\nexport function resetWorkspaceCache() {\n  cache = new Map<string, Workspaces>();\n}\n\nlet cache: Map<string, Workspaces> = new Map<string, Workspaces>();\n\nexport function getWorkspaceGraph(repoRoot: string, logger = getChildLogger('Getting workspaces')): Workspaces {\n  if (cache.has(repoRoot)) {\n    logger.debug('Got workspaces from cache');\n    return cache.get(repoRoot) as Workspaces;\n  }\n\n  const rootPackageJson = file.loadJsonSync<PackageJson>({ filepath: path.join(repoRoot, 'package.json'), logger });\n  const { workspaces: workspaceGlobs = [] } = rootPackageJson;\n  const workspaces: Array<PackageJsonWithLocation> = [];\n\n  logger.trace(`Workspace globs:\n${workspaceGlobs.map((g: string) => `  - ${g}`).join('\\n')}`);\n\n  workspaceGlobs.forEach((globString: string) => {\n    glob.sync(globString, { cwd: repoRoot }).map((workspacePath) => {\n      try {\n        const packageJson = file.loadJsonSync<PackageJson>({\n          filepath: path.join(repoRoot, workspacePath, 'package.json'),\n          logger,\n        });\n        workspaces.push({ ...packageJson, location: path.join(repoRoot, workspacePath) });\n      } catch (e) {\n        if (!(e.path.endsWith('package.json') && e.code === 'ENOENT')) {\n          throw e;\n        }\n      }\n    });\n  });\n\n  const graph = new Workspaces({ ...rootPackageJson, location: repoRoot }, workspaces);\n\n  cache.set(repoRoot, graph);\n  return graph;\n}\n"],"mappings":"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;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnMA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAIA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACxCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}