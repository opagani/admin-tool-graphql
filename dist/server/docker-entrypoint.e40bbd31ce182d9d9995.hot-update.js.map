{"version":3,"file":"docker-entrypoint.e40bbd31ce182d9d9995.hot-update.js","sources":["webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/app/src/createServer.ts"],"sourcesContent":["import express from 'express';\nimport { createRouterMiddleware } from './createRouterMiddleware';\nimport { getHttpLogger, getLogMiddleware } from '@zg-rentals/logger-node';\nimport { createPontoonProxy } from '@zg-rentals/pontoon-proxy';\nimport os from 'os';\nimport cookieParser from 'cookie-parser';\nimport { Healthcheck } from '@zg-rentals/particles-js-healthcheck';\nimport {\n  NodeMonitor,\n  NodeMonitorPontoonReporter,\n  NodeVitalsPlugin,\n  PontoonHeartbeatPlugin,\n} from '@zg-rentals/monitor-node';\nimport { NodeProxy } from '@zg-rentals/particles-js-proxy';\nimport { DatadogTracerPlugin, NodeTracer } from '@zg-rentals/trace-node';\nimport getNodeLogger from '@zg-rentals/logger-node';\n\nexport interface SsrServerOptions {\n  appName: string;\n  isProduction: boolean;\n  pontoonApiKey?: string;\n  basePath: string;\n  buildNumber: number;\n  zgApi: string;\n  healthcheckAccessToken: string;\n  host: string;\n  gitCommit: string;\n  gitBranch: string;\n  buildDate: number;\n}\n\nexport const createSsrServer = (options: SsrServerOptions) => {\n  const app = express();\n  const tracer = new NodeTracer({\n    plugin: new DatadogTracerPlugin({\n      service: options.appName,\n      version: options.buildNumber.toString(),\n    }),\n  });\n  tracer.traceApp(app);\n\n  const logger = getNodeLogger({\n    logPath: process.env.NODE_OUT_FILE,\n    level: process.env.LOG_LEVEL,\n    mixin: () => tracer.logMixin(),\n  }).child({\n    webApp: options.appName,\n  });\n\n  const nodeMonitor = new NodeMonitor({\n    logger,\n    reporters: [\n      options.pontoonApiKey &&\n        new NodeMonitorPontoonReporter({\n          logger,\n          webappName: options.appName,\n          api: 'https://pontoon.hotpads.com',\n          apiKey: options.pontoonApiKey,\n        }),\n    ].filter(Boolean) as Array<NodeMonitorPontoonReporter>,\n    plugins: [\n      new NodeVitalsPlugin({\n        logger,\n        webappName: options.appName,\n        buildNumber: options.buildNumber,\n        gitCommit: options.gitCommit,\n      }),\n      options.pontoonApiKey &&\n        new PontoonHeartbeatPlugin({\n          logger,\n          webappName: options.appName,\n          api: 'https://pontoon.hotpads.com',\n          apiKey: options.pontoonApiKey,\n          startupDate: Date.now(),\n          buildDate: options.buildDate,\n          buildId: options.buildNumber,\n          commitId: options.gitCommit,\n          gitBranch: options.gitBranch,\n        }),\n    ].filter(Boolean) as Array<NodeVitalsPlugin | PontoonHeartbeatPlugin>,\n  });\n\n  // Setup stock middleware\n  app.use((req, res, next) => {\n    res.locals.startTime = Date.now();\n    next();\n  });\n  app.disable('x-powered-by');\n  app.use(express.json({ limit: '5mb' }));\n  // @ts-ignore\n  app.use(cookieParser({}, { decode: (c) => c }));\n\n  // swallows favicon requests\n  if (!options.isProduction) {\n    app.use('*/favicon.ico', (req, res) => res.status(200).send());\n  }\n\n  if (options.pontoonApiKey) {\n    createPontoonProxy({\n      app,\n      proxyPath: options.basePath + '/pontoon-proxy',\n      logger: logger,\n      apiKey: options.pontoonApiKey,\n      api: 'https://pontoon.hotpads.com',\n      serverName: os.hostname(),\n      serviceName: options.appName,\n    });\n  }\n\n  app.use(options.basePath + '/log', getLogMiddleware(logger));\n  const httpLogger = getHttpLogger({ logger: logger });\n  app.use(httpLogger);\n\n  const healthcheck = new Healthcheck({\n    accessToken: options.healthcheckAccessToken,\n    logger: logger,\n    buildNumber: options.buildNumber,\n    onPing: ({ response, hasAccess }) => {\n      nodeMonitor.increment({ name: 'healthcheck.ping', amount: 1 });\n\n      return {\n        ...response,\n        ...(hasAccess ? { zgApi: options.zgApi } : {}),\n      };\n    },\n  });\n\n  app.use(`*/check`, healthcheck.check);\n  app.use(`*/shutdown`, healthcheck.shutdown);\n\n  // adds history object for use in router\n  app.use(createRouterMiddleware());\n\n  // Add defualt proxy that goes from basePath/proxy* -> zgApi\n  // Consuming apps can add additional proxies if necessary\n  const apiProxy = new NodeProxy({\n    secure: options.isProduction,\n    proxyPath: options.basePath + '/proxy/',\n    host: options.host,\n    logger: logger,\n    stringifyBody: true,\n    brandOverride: 'zillow',\n  }).middleware();\n\n  app.use(options.basePath + '/proxy/*', (req, res, next) => {\n    return apiProxy(req, res, next);\n  });\n\n  return { app, tracer, logger, nodeMonitor };\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAgBA;AACA;AACA;AACA;AACA;AACA;AAFA;AADA;AAMA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AAKA;AADA;AAIA;AACA;AACA;AAGA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AACA;AACA;AACA;AAJA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAnBA;AACA;AAiCA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAEA;AAXA;AAcA;AACA;AACA;AAEA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;A","sourceRoot":""}