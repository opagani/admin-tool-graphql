{"version":3,"file":"index.330e8249d14a9137fd06.hot-update.js","sources":["webpack:///./app/server/middleware/healthcheck.ts","webpack:///./app/server/utils/nodeMonitor.ts"],"sourcesContent":["import { Healthcheck } from '@zg-rentals/particles-js-healthcheck';\nimport type { Logger } from '@zg-rentals/particles-js-base-logger';\n\nfunction createHealthcheck(logger: Logger) {\n  const healthcheck = new Healthcheck({\n    accessToken: 'changeit',\n    logger: logger,\n    buildNumber: parseInt(process.env.BUILD_TIME || '0', 10),\n    onPing: ({ response, hasAccess }) => {\n      return {\n        ...response,\n        ...(hasAccess ? { zgApi: process.env.ZG_API } : {}),\n      };\n    },\n  });\n\n  return healthcheck;\n}\n\nexport default createHealthcheck;\n","import env from 'env-var';\n\nimport log from '../../server/utils/log';\nimport type { Logger } from '@zg-rentals/particles-js-base-logger';\n\nimport {\n  NodeMonitor,\n  NodeMonitorPontoonReporter,\n  NodeVitalsPlugin,\n  PontoonHeartbeatPlugin,\n} from '@zg-rentals/monitor-node';\n\nconst webappName = env.get('APP_NAME').asString();\nconst gitCommit = env.get('GIT_COMMIT').asString();\nconst pontoonApi = env.get('PONTOON_API').asString();\nconst pontoonApiKey = env.get('PONTOON_API_KEY').asString();\nconst gitBranch = env.get('GIT_BRANCH').asString();\nconst startupDate = env.get('APP_START_TIME').asInt() || Date.now();\n\n// I'm using presence or lack of pontoon env vars to indicate env support -- could also be done through new env var PONTOON_ENABLED\nconst pontoonEnabled = pontoonApi && pontoonApiKey;\n\nconst plugins = [];\nconst reporters = [];\n\nconst monitorLogger = log.child('monitor-node') as Logger;\n\nif (pontoonEnabled) {\n  const pontoonReporter = new NodeMonitorPontoonReporter({\n    logger: monitorLogger,\n    webappName: webappName as string,\n    api: pontoonApi,\n    apiKey: pontoonApiKey,\n  });\n  reporters.push(pontoonReporter);\n\n  const pontoonHeartbeatPlugin = new PontoonHeartbeatPlugin({\n    logger: monitorLogger,\n    webappName: webappName as string,\n    api: pontoonApi,\n    apiKey: pontoonApiKey,\n    startupDate,\n    buildDate: typeof __BUILD_TIME__ === 'undefined' ? startupDate : parseInt(__BUILD_TIME__),\n    buildId: parseInt(__BUILD_NUMBER__),\n    commitId: gitCommit,\n    gitBranch,\n  });\n\n  plugins.push(pontoonHeartbeatPlugin);\n}\n\nconst nodeVitalsPlugin = new NodeVitalsPlugin({\n  logger: monitorLogger,\n  webappName: webappName as string,\n  buildNumber: parseInt(__BUILD_NUMBER__),\n  gitCommit,\n});\n\nplugins.push(nodeVitalsPlugin);\n\nconst nodeMonitor = new NodeMonitor({\n  logger: monitorLogger,\n  reporters,\n  plugins,\n});\n\nexport default nodeMonitor;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAEA;AATA;AAYA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;ACnBA;AAEA;AAGA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AACA;AACA;AACA;AAHA;AAMA;;;;A","sourceRoot":""}