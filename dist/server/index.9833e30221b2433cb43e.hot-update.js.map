{"version":3,"file":"index.9833e30221b2433cb43e.hot-update.js","sources":["webpack:///./app/server/server.ts"],"sourcesContent":["import type { Logger } from '@zg-rentals/particles-js-base-logger';\nimport type { PinoLogger } from '@zg-rentals/particles-js-node-logger';\nimport express from 'express';\nimport cookieParser from 'cookie-parser';\nimport { getHttpLogger } from '@zg-rentals/particles-js-node-logger';\nimport cors from 'cors';\n\nimport monitorMiddleware from './middleware/nodeMonitor';\nimport log from './utils/log';\nimport createHealthcheck from './middleware/healthcheck';\nimport { tracer } from './utils/tracer';\n\n// GraphQL\nimport { ApolloServer } from 'apollo-server-express';\nimport schema from '../graphql/federatedSchema';\n\nconst step = log.child('server') as Logger;\n\nstep.warn('running server');\n\nconst server = new ApolloServer({\n  schema,\n  context: ({ req }) => {\n    const token = req.cookies;\n\n    return {\n      token,\n    };\n  },\n  introspection: __DEV__,\n  playground: __DEV__,\n});\n\n// Express\nconst app = express();\nconst healthcheck = createHealthcheck(log.child('healthcheck') as Logger);\n\nconst httpLogger = getHttpLogger({\n  logger: (log as PinoLogger).logger,\n});\n\n// must bind 'this' because of JS\nmonitorMiddleware(app);\n\ntracer.traceApp(app);\n\nif (__DEV__) {\n  const corsOptions = {\n    // @ts-ignore expect-any\n    origin: (origin, callback) => {\n      callback(null, origin);\n    },\n    credentials: true,\n  };\n  app.use(cors(corsOptions));\n}\n\napp.use(cookieParser());\napp.use(httpLogger);\napp.use(`*/check`, tracer.wrap(healthcheck.check as (...args: Array<unknown>) => unknown, 'healthcheck'));\napp.use(`*/shutdown`, healthcheck.shutdown);\napp.get(`/`, (req, res) => {\n  step.warn(req.cookies, 'Cookies');\n  res.writeHead(200, { 'Content-Type': 'text/html' });\n  res.write(`Rent Guarantee Express Server Response!`);\n  res.end();\n});\n\ntracer.errorMiddleware();\n\n// Express error handler - catches any express error uncaught by a middleware function\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\napp.use((err: any, req: unknown, res: { status: (arg0: number) => void }, next: () => void) => {\n  log.error(err);\n  res.status(500);\n  next();\n});\n\nserver.applyMiddleware({ app, path: '/rent-guarantee-graphql/graphql', cors: false });\n\nexport default app;\n"],"mappings":";;;;;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AACA;AADA;AAGA;AACA;AACA;AAVA;AACA;AAaA;AACA;AAEA;AACA;AADA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;A","sourceRoot":""}