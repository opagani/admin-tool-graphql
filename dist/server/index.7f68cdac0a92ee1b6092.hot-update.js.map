{"version":3,"file":"index.7f68cdac0a92ee1b6092.hot-update.js","sources":["webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/pontoon-proxy/src/index.ts","webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/pontoon-proxy/src/proxy.ts","webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/pontoon-proxy/src/validate.ts","webpack:///./app/server/middleware/pontoonProxy.ts","webpack:///./app/server/server.ts","webpack:///./app/server/utils/tracer.ts"],"sourcesContent":["export * from './proxy';\n","import type { Application, NextFunction, Request, Response } from 'express';\nimport { Pontoon } from '@zg-rentals/pontoon';\nimport express from 'express';\nimport type { Logger } from '@zg-rentals/particles-js-base-logger';\nimport { validateCounts, validateGauges, validateHeaders } from './validate';\n\ninterface PontoonProxyOptions {\n  api: string;\n  apiKey: string;\n  app: Application;\n  hostname?: string;\n  logger?: Logger;\n  proxyPath?: string;\n  serverName: string;\n  serviceName: string;\n}\n\nconst PONTOON_PATH_PREFIX = 'pontoon/api/';\nconst REQUIRED_OPTIONS = ['api', 'apiKey', 'app', 'serverName', 'serviceName'];\n\nexport function createPontoonProxy(options: PontoonProxyOptions) {\n  const missingOptions = REQUIRED_OPTIONS.filter((opt) => !options[opt as keyof PontoonProxyOptions]);\n  if (missingOptions.length) {\n    throw new Error(`Cannot proxy pontoon requests without required options: ${missingOptions.join(', ')}`);\n  }\n\n  const { api, apiKey, app, hostname, logger, serverName, serviceName } = options;\n\n  let { proxyPath = '/proxy/' } = options;\n\n  if (proxyPath[0] !== '/') {\n    proxyPath = `/${proxyPath}`;\n  }\n  if (proxyPath[proxyPath.length - 1] !== '/') {\n    proxyPath = `${proxyPath}/`;\n  }\n\n  const fullProxyPath = proxyPath + PONTOON_PATH_PREFIX;\n\n  const pontoon = new Pontoon({ api, apiKey });\n\n  app.use(`${fullProxyPath}*`, express.json(), async (req: Request, res: Response, next: NextFunction) => {\n    if (req.method !== 'POST' || !validateHeaders(req, hostname)) {\n      return next();\n    }\n    const pontoonPath = req.originalUrl.replace(fullProxyPath, '');\n    let pontoonRequest;\n\n    if (pontoonPath === 'countPublisher/v2/add') {\n      const validatedCounts = validateCounts(req.body);\n      if (validatedCounts) {\n        pontoonRequest = pontoon.sendCounts({\n          serverName,\n          serviceName,\n          counts: validatedCounts,\n        });\n      } else {\n        logger?.error('invalid request to proxy pontoon counts');\n        return res.status(400).end();\n      }\n    } else if (pontoonPath === 'gaugePublisher/v2/add') {\n      const validatedGauges = validateGauges(req.body);\n      if (validatedGauges) {\n        pontoonRequest = pontoon.sendGauges({\n          serverName,\n          serviceName,\n          gauges: validatedGauges,\n        });\n      } else {\n        logger?.error('invalid request to proxy pontoon gauges');\n        return res.status(400).end();\n      }\n    } else {\n      return next();\n    }\n    logger?.info(`proxying ${pontoonPath}`);\n    await pontoonRequest\n      .then(() => res.end())\n      .catch((err) => {\n        logger && logger.error(err);\n        res.end(500);\n      });\n  });\n}\n","import type { MetricCounts, MetricGauges } from '@zg-rentals/pontoon';\nimport type { Request } from 'express';\n\nconst TIME_THESHOLD_MS = 1000 * 60 * 10;\nconst BATCH_SIZE_THRESHOLD = 1000;\nconst REQUIRED_HEADERS = ['host', 'referer', 'accept'];\n\nfunction urlsMatch(hostname: string, headerUrl?: string): boolean {\n  if (headerUrl !== undefined) {\n    headerUrl = headerUrl.toLowerCase();\n    hostname = hostname.toLowerCase();\n    return headerUrl.includes(hostname) || hostname.includes(headerUrl);\n  }\n  return false;\n}\n\nexport function validateHeaders(req: Request, hostname?: string): boolean {\n  const headers = req.headers;\n  const isCorsRequest = hostname && (!urlsMatch(hostname, headers.host) || !urlsMatch(hostname, headers.referer));\n  if (isCorsRequest || REQUIRED_HEADERS.find((header) => headers[header] === undefined)) {\n    return false;\n  }\n  return true;\n}\n\nexport function validateCounts({ counts, browserTime }: { counts: MetricCounts['counts']; browserTime: number }) {\n  let minDate = Infinity,\n    maxDate = -Infinity;\n  const now = Date.now();\n  const browserClockOffset = now - browserTime;\n  const correctedCounts: MetricCounts['counts'] = {};\n  const timestamps = Object.keys(counts);\n  if (timestamps.length > BATCH_SIZE_THRESHOLD) {\n    return false;\n  }\n  const foundInvalidData = timestamps.find((timestamp) => {\n    if (Object.keys(counts[timestamp]).length > BATCH_SIZE_THRESHOLD) {\n      return true;\n    }\n    const epochMs = Number(timestamp);\n    if (isNaN(epochMs)) {\n      return true;\n    }\n    const correctedTime = epochMs + browserClockOffset;\n    if (Math.abs(now - correctedTime) > TIME_THESHOLD_MS) {\n      return true;\n    }\n    minDate = Math.min(minDate, epochMs);\n    maxDate = Math.max(maxDate, epochMs);\n    correctedCounts[correctedTime] = counts[timestamp];\n  });\n  if (foundInvalidData || maxDate - minDate > TIME_THESHOLD_MS) {\n    return false;\n  }\n  return correctedCounts;\n}\n\nexport function validateGauges({ gauges, browserTime }: { gauges: MetricGauges['gauges']; browserTime: number }) {\n  let minDate = Infinity,\n    maxDate = -Infinity;\n  const now = Date.now();\n  const browserClockOffset = now - browserTime;\n  const gaugeKeys = Object.keys(gauges);\n  if (gaugeKeys.length > BATCH_SIZE_THRESHOLD) {\n    return false;\n  }\n  const foundInvalidData = gaugeKeys.find((gaugeKey) => {\n    return gauges[gaugeKey].find((dataPoint) => {\n      const epochMs = Number(dataPoint[0]);\n      dataPoint[1] = Number(dataPoint[1]);\n      if (isNaN(epochMs) || isNaN(dataPoint[1])) {\n        return true;\n      }\n      const correctedTime = epochMs + browserClockOffset;\n      if (Math.abs(now - correctedTime) > TIME_THESHOLD_MS) {\n        return true;\n      }\n      minDate = Math.min(minDate, epochMs);\n      maxDate = Math.max(maxDate, epochMs);\n      dataPoint[0] = correctedTime;\n    });\n  });\n  if (foundInvalidData || maxDate - minDate > TIME_THESHOLD_MS) {\n    return false;\n  }\n  return gauges;\n}\n","import { createPontoonProxy as zgRentalsCreatePontoonProxy } from '@zg-rentals/pontoon-proxy';\nimport log from '../../server/utils/log';\nimport type { Logger } from '@zg-rentals/particles-js-base-logger';\nimport type { Express } from 'express-serve-static-core';\n\nconst pontoonApi = process.env.PONTOON_API as string;\nconst pontoonApiKey = process.env.PONTOON_API_KEY as string;\nconst serviceName = process.env.APP_NAME as string;\nconst zgEnv = process.env.ZG_ENV;\nconst serverName = 'client';\nconst shermanName = 'sherman';\n\nconst pontoonLogger = log.child('pontoon proxy') as Logger;\n\nexport default function createPontoonProxy(app: Express) {\n  try {\n    zgRentalsCreatePontoonProxy({\n      app,\n      api: pontoonApi,\n      apiKey: pontoonApiKey,\n      serverName,\n      serviceName,\n      logger: pontoonLogger,\n    });\n  } catch (e) {\n    if (__DEV__ || zgEnv === shermanName) {\n      log.warn(e.message);\n    } else {\n      throw e;\n    }\n  }\n}\n","import type { Logger } from '@zg-rentals/particles-js-base-logger';\nimport type { PinoLogger } from '@zg-rentals/particles-js-node-logger';\nimport express from 'express';\nimport cookieParser from 'cookie-parser';\nimport { getHttpLogger } from '@zg-rentals/particles-js-node-logger';\nimport cors from 'cors';\n\nimport monitorMiddleware from './middleware/nodeMonitor';\nimport createPontoonProxy from './middleware/pontoonProxy';\nimport log from './utils/log';\nimport createHealthcheck from './middleware/healthcheck';\nimport { tracer } from './utils/tracer';\n\n// GraphQL\nimport { ApolloServer } from 'apollo-server-express';\nimport schema from '../graphql/federatedSchema';\n\nconst step = log.child('server') as Logger;\n\nstep.warn('running server');\n\nconst server = new ApolloServer({\n  schema,\n  context: ({ req }) => {\n    const token = req.cookies;\n\n    return {\n      token,\n    };\n  },\n  introspection: __DEV__,\n  playground: __DEV__,\n});\n\n// Express\nconst app = express();\nconst healthcheck = createHealthcheck(log.child('healthcheck') as Logger);\nconst httpLogger = getHttpLogger({\n  logger: (log as PinoLogger).logger,\n});\n\n// must bind 'this' because of JS\nmonitorMiddleware(app);\n\ncreatePontoonProxy(app);\n\ntracer.traceApp(app);\n\nif (__DEV__) {\n  const corsOptions = {\n    // @ts-ignore expect-any\n    origin: (origin, callback) => {\n      callback(null, origin);\n    },\n    credentials: true,\n  };\n  app.use(cors(corsOptions));\n}\n\napp.use(cookieParser());\napp.use(httpLogger);\napp.use(`*/check`, tracer.wrap(healthcheck.check as (...args: Array<unknown>) => unknown, 'healthcheck'));\napp.use(`*/shutdown`, healthcheck.shutdown);\napp.get(`/`, (req, res) => {\n  step.warn(req.cookies, 'Cookies');\n  res.writeHead(200, { 'Content-Type': 'text/html' });\n  res.write(`Rent Guarantee Express Server Response!`);\n  res.end();\n});\n\ntracer.errorMiddleware();\n\nserver.applyMiddleware({ app, path: '/rent-guarantee-graphql/graphql', cors: false });\n\nexport default app;\n","import { DatadogTracerPlugin, Tracer } from '@zg-rentals/trace-node';\n\nexport const tracer = new Tracer({\n  plugin: new DatadogTracerPlugin({\n    env: __ZG_ENV__,\n    service: __APP_NAME__,\n    version: __BUILD_NUMBER__,\n    enabled: process.env.NODE_ENV === 'production',\n  }),\n});\n"],"mappings":";;;;;;;;;;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACCA;AACA;AAEA;AAaA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAIA;AACA;AALA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AATA;AAAA;AAAA;AAAA;AACA;AASA;AACA;AACA;AACA;AAHA;AAVA;AAAA;AACA;AADA;AAgBA;AAhBA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AAmBA;AACA;AArBA;AAAA;AAAA;AAAA;AACA;AAqBA;AACA;AACA;AACA;AAHA;AAtBA;AAAA;AACA;AADA;AA4BA;AA5BA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAkCA;AAlCA;AAAA;AAoCA;AAAA;AAEA;AACA;AACA;AACA;AAzCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AA0CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChtFA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA,aAEA;AACA;AACA;;;;;;;;;;;;;AC7BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AACA;AADA;AAGA;AACA;AACA;AAVA;AACA;AAaA;AACA;AACA;AACA;AADA;AACA;AAIA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;;;;AC1EA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;;;;A","sourceRoot":""}