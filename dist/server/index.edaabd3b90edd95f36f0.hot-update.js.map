{"version":3,"file":"index.edaabd3b90edd95f36f0.hot-update.js","sources":["webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/particles-js-healthcheck/src/index.ts","webpack:///./app/server/server.ts","webpack:///./app/server/utils/tracer.ts"],"sourcesContent":["import type { Logger } from '@zg-rentals/particles-js-base-logger';\nimport { Utils } from '@zg-rentals/particles-js-utils';\nimport type express from 'express';\nimport os from 'os';\nimport readPkg from 'read-pkg';\nimport v8 from 'v8';\n\nexport const BAD_SHUTDOWN_TOKEN_MSG = 'invalid shutdown token provided.';\nexport const GOOD_STATUS_CODE = 200;\nexport const SHUTDOWN_STATUS_CODE = 555;\n\nexport interface onPingInterface {\n  hasAccess: boolean;\n  isProtected: boolean;\n  response: { [key: string]: unknown };\n}\n\nexport interface HealthcheckInterface {\n  shutdownToken?: string;\n  accessToken?: string;\n  protectedQueryParams?: Array<string>;\n  onPing?: ({ hasAccess, isProtected, response }: onPingInterface) => unknown;\n  logger?: Logger;\n  buildNumber: string | number;\n  maxMemoryThresholdMb?: number;\n}\n\nexport interface EnvironmentData {\n  node_version: string;\n  NODE_ENV: string;\n  gitCommit: string;\n  gitUsername: string;\n  gitBranch: string;\n  buildDate: string;\n}\n\nexport interface ServerData {\n  host: string;\n  uptime: number;\n  memory_used: NodeJS.MemoryUsage;\n  memory_total: number;\n  memory_free: number;\n  average_load: Array<number>;\n  heap: v8.HeapInfo;\n}\n\nexport interface DependencyMap {\n  [key: string]: string;\n}\n\nexport interface PackageJson {\n  name: string;\n  alias?: string;\n  version?: string;\n  main?: string;\n  module?: string;\n  bin?: string | Record<string, string>;\n  scripts?: Record<string, string>;\n  sideEffects?: boolean;\n  publishConfig?: Record<string, string>;\n  private?: boolean;\n  dependencies?: DependencyMap;\n  devDependencies?: DependencyMap;\n  peerDependencies?: DependencyMap;\n  workspaces?: Array<string>;\n}\n\nexport type ConfidentialData = EnvironmentData & ServerData & Pick<PackageJson, 'dependencies' | 'devDependencies'>;\n\nexport class Healthcheck {\n  shutdownToken?: string;\n  protectedQueryParams: Array<string>;\n  accessToken?: string;\n  isShuttingDown: boolean;\n  logger?: Logger;\n  packageJson: readPkg.NormalizedPackageJson;\n  buildNumber: number;\n  onPing?: ({ hasAccess, isProtected, response }: onPingInterface) => unknown;\n  maxMemoryThresholdMb: number;\n\n  constructor({\n    logger,\n    shutdownToken,\n    accessToken,\n    buildNumber = 0,\n    onPing,\n    protectedQueryParams = ['runscope', 'sonar', 'liveliness', 'site_liveliness'],\n    maxMemoryThresholdMb = 5_120,\n  }: HealthcheckInterface) {\n    this.logger = logger;\n    this.accessToken = accessToken;\n    this.shutdownToken = shutdownToken;\n    this.protectedQueryParams = protectedQueryParams;\n    this.isShuttingDown = false;\n    this.buildNumber = Number(buildNumber);\n    this.setupPm2GracefulExit();\n    this.packageJson = readPkg.sync();\n    this.onPing = onPing;\n    this.maxMemoryThresholdMb = maxMemoryThresholdMb;\n\n    this.logger?.info('instantiating healthcheck');\n  }\n\n  setupPm2GracefulExit = (): void => {\n    if (Utils.isProd() && process && process.send) {\n      this.logger?.debug('setting up pm2 graceful exit');\n\n      process.on('message', (message: { topic?: string; [key: string]: unknown }) => {\n        this.logger?.warn(message, 'healthcheck received a process message');\n\n        const { topic } = message;\n\n        if (topic === 'TRIGGER_SHUTDOWN') {\n          this.isShuttingDown = true;\n        }\n      });\n    }\n  };\n\n  bytesToMb(bytes: number): number {\n    if (bytes === 0) return 0;\n\n    return bytes / 1024 / 1024;\n  }\n\n  getPackageJsonData(): Pick<PackageJson, 'dependencies' | 'devDependencies'> {\n    const data: { dependencies: DependencyMap; devDependencies: DependencyMap } = {\n      dependencies: {},\n      devDependencies: {},\n    };\n\n    const { dependencies = {}, devDependencies = {} } = this.packageJson;\n\n    for (const dependency in dependencies) {\n      if (dependency.startsWith('@zg-rentals/')) {\n        data.dependencies[dependency] = dependencies[dependency];\n      }\n    }\n    for (const dependency in devDependencies) {\n      if (dependency.startsWith('@zg-rentals/')) {\n        data.devDependencies[dependency] = devDependencies[dependency];\n      }\n    }\n\n    return data;\n  }\n\n  getEnvironmentData(): EnvironmentData {\n    return {\n      NODE_ENV: process.env.NODE_ENV || 'development',\n      node_version: process.versions.node,\n      gitCommit: process.env.GIT_COMMIT || '',\n      gitUsername: process.env.GIT_COMMIT_AUTHOR || '',\n      gitBranch: process.env.BRANCH_NAME || '',\n      buildDate: process.env.BUILD_TIME || '',\n    };\n  }\n\n  getServerData(): ServerData {\n    return {\n      host: os.hostname(),\n      uptime: process.uptime(),\n      memory_used: process.memoryUsage(),\n      memory_total: os.totalmem(),\n      memory_free: os.freemem(),\n      average_load: os.loadavg(),\n      heap: v8.getHeapStatistics(),\n    };\n  }\n\n  hasAccess = (req: express.Request): boolean => {\n    if (!this.accessToken) return false;\n\n    if (req.query.accessToken === this.accessToken) return true;\n\n    return false;\n  };\n\n  isMemoryOverloaded(memoryUsage: NodeJS.MemoryUsage): boolean {\n    if (!memoryUsage || !memoryUsage.rss) {\n      return false;\n    }\n\n    const mb = this.bytesToMb(memoryUsage.rss);\n\n    if (mb >= Number(this.maxMemoryThresholdMb)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  aggregateConfidentialData = (req: express.Request): ConfidentialData | undefined => {\n    const data = {\n      ...this.getPackageJsonData(),\n      ...this.getEnvironmentData(),\n      ...this.getServerData(),\n    };\n\n    if (this.isMemoryOverloaded(data.memory_used)) {\n      this.isShuttingDown = true;\n    }\n\n    if (!this.hasAccess(req)) {\n      return;\n    }\n\n    return data;\n  };\n\n  generateBaseResponse(): { name: string; buildNumber: number } {\n    return {\n      name: this.packageJson.name,\n      buildNumber: this.buildNumber,\n    };\n  }\n\n  shouldIgnoreShutdown(req: express.Request): boolean {\n    if (typeof req.query.mode === 'string' && this.protectedQueryParams.includes(req.query.mode)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  getStatusCode = (req: express.Request): number => {\n    if (this.isShuttingDown) {\n      if (this.shouldIgnoreShutdown(req)) {\n        this.logger?.warn(`app is ignoring shutdown mode, returning status code=${GOOD_STATUS_CODE}`);\n        return GOOD_STATUS_CODE;\n      }\n      this.logger?.warn(`app is in shutdown mode, returning status code=${SHUTDOWN_STATUS_CODE}`);\n\n      return SHUTDOWN_STATUS_CODE;\n    } else {\n      return GOOD_STATUS_CODE;\n    }\n  };\n\n  check = (req: express.Request, res: express.Response): void => {\n    try {\n      const confidentialData = this.aggregateConfidentialData(req);\n      const baseResponse = this.generateBaseResponse();\n      const status = this.getStatusCode(req);\n\n      const response = {\n        ...confidentialData,\n        ...baseResponse,\n      };\n\n      if (this.onPing) {\n        res.status(status).json(\n          this.onPing({\n            hasAccess: this.hasAccess(req),\n            isProtected: this.shouldIgnoreShutdown(req),\n            response,\n          }),\n        );\n      } else {\n        res.status(status).json(response);\n      }\n    } catch (err: any) {\n      res.status(500).json({\n        error: err.message,\n        success: false,\n      });\n    }\n  };\n\n  shutdown = (req: express.Request, res: express.Response): void => {\n    const reqShutdownToken = req.query.secretToken;\n    const isNotEmpty = reqShutdownToken !== '';\n    const isDefined = typeof reqShutdownToken !== 'undefined' && typeof this.shutdownToken !== 'undefined';\n\n    if (isDefined && isNotEmpty && reqShutdownToken === this.shutdownToken) {\n      this.isShuttingDown = true;\n      this.logger?.warn('successful shutdownToken received, putting app in shutdown mode');\n\n      res.status(200).json({\n        success: true,\n        statusCode: SHUTDOWN_STATUS_CODE,\n      });\n    } else {\n      this.logger?.warn('incorrect or missing shutdown token');\n\n      res.status(500).json({\n        success: false,\n        error: BAD_SHUTDOWN_TOKEN_MSG,\n      });\n    }\n  };\n}\n","import type { Logger } from '@zg-rentals/particles-js-base-logger';\nimport type { PinoLogger } from '@zg-rentals/particles-js-node-logger';\nimport express from 'express';\nimport cookieParser from 'cookie-parser';\nimport { getHttpLogger } from '@zg-rentals/particles-js-node-logger';\nimport cors from 'cors';\n\nimport monitorMiddleware from './middleware/nodeMonitor';\nimport log from './utils/log';\nimport createHealthcheck from './middleware/healthcheck';\nimport { tracer } from './utils/tracer';\n\n// GraphQL\nimport { ApolloServer } from 'apollo-server-express';\nimport schema from '../graphql/federatedSchema';\n\nconst step = log.child('server') as Logger;\n\nstep.warn('running server');\n\nconst server = new ApolloServer({\n  schema,\n  context: ({ req }) => {\n    const token = req.cookies;\n\n    return {\n      token,\n    };\n  },\n  introspection: __DEV__,\n  playground: __DEV__,\n});\n\n// Express\nconst app = express();\nconst healthcheck = createHealthcheck(log.child('healthcheck') as Logger);\nconst httpLogger = getHttpLogger({\n  logger: (log as PinoLogger).logger,\n});\n\n// must bind 'this' because of JS\nmonitorMiddleware(app);\n\ntracer.traceApp(app);\n\nif (__DEV__) {\n  const corsOptions = {\n    // @ts-ignore expect-any\n    origin: (origin, callback) => {\n      callback(null, origin);\n    },\n    credentials: true,\n  };\n  app.use(cors(corsOptions));\n}\n\napp.use(cookieParser());\napp.use(httpLogger);\napp.use(`*/check`, tracer.wrap(healthcheck.check as (...args: Array<unknown>) => unknown, 'healthcheck'));\napp.use(`*/shutdown`, healthcheck.shutdown);\napp.get(`/`, (req, res) => {\n  step.warn(req.cookies, 'Cookies');\n  res.writeHead(200, { 'Content-Type': 'text/html' });\n  res.write(`Rent Guarantee Express Server Response!`);\n  res.end();\n});\n\ntracer.errorMiddleware();\n\nserver.applyMiddleware({ app, path: '/rent-guarantee-graphql/graphql', cors: false });\n\nexport default app;\n","import { DatadogTracerPlugin, Tracer } from '@zg-rentals/trace-node';\n\nconst service = process.env.DD_SERVICE || __APP_NAME__;\nconst hostname = process.env.DD_TRACE_AGENT_HOSTNAME || process.env.DD_AGENT_HOST || 'datadog-agent';\n\nconst plugin = new DatadogTracerPlugin({\n  service: __APP_NAME__,\n  version: String(__BUILD_NUMBER__),\n  sampleRate: 0.5,\n  hostname,\n});\n\nplugin.tracer.use('express', { service });\nplugin.tracer.use('graphql', { service });\n\nexport const tracer = new Tracer({ plugin });\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AA4DA;AAWA;AAQA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AAgBA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9BA;AAmFA;AAEA;AAEA;AACA;AACA;AAzFA;AAyGA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzHA;AA0IA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAtJA;AAwJA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AApLA;AAsLA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AA1MA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAjCA;AAAA;AAAA;AAmDA;AAEA;AACA;AAtDA;AAAA;AAAA;AAyDA;AACA;AACA;AAFA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5EA;AAAA;AAAA;AA+EA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAvFA;AAAA;AAAA;AA0FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AAnGA;AAAA;AAAA;AA8GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzHA;AAAA;AAAA;AA8IA;AACA;AACA;AAFA;AAIA;AAlJA;AAAA;AAAA;AAqJA;AACA;AACA;AACA;AACA;AACA;AA1JA;AACA;AADA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;ACnEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AACA;AADA;AAGA;AACA;AACA;AAVA;AACA;AAaA;AACA;AACA;AACA;AADA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;;;;ACvEA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;;;;A","sourceRoot":""}