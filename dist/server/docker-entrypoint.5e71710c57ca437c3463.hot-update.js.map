{"version":3,"file":"docker-entrypoint.5e71710c57ca437c3463.hot-update.js","sources":["webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/workspace-graph/src/Workspaces.ts"],"sourcesContent":["import { git } from '@zg-rentals/cli-tools';\nimport path from 'path';\n\nimport Graph from './Graph';\nimport type { PackageJsonWithLocation } from './Workspace';\n\nimport Workspace from './Workspace';\n\nexport class Workspaces {\n  dependents: Graph = new Graph();\n  devDependents: Graph = new Graph();\n\n  _workspaces: Map<string, Workspace> = new Map();\n  _aliases: Map<string, string> = new Map();\n  _root: Workspace;\n\n  constructor(root: PackageJsonWithLocation, packageJsons: Array<PackageJsonWithLocation>) {\n    this._root = this.addWorkspace(root);\n    for (const packageJson of packageJsons) {\n      this.addWorkspace(packageJson);\n    }\n    this.addEdges(this.dependents, 'sourceDependencies');\n    this.addEdges(this.dependents, 'sourcePeerDependencies');\n    this.addEdges(this.devDependents, 'sourceDevDependencies');\n  }\n\n  get all() {\n    return this._workspaces.values();\n  }\n\n  get publishable() {\n    const publishable: Map<string, Workspace> = new Map();\n\n    for (const workspace of this._workspaces.values()) {\n      if (!workspace.private && !workspace.isRoot) {\n        publishable.set(workspace.name, workspace);\n      }\n    }\n\n    return publishable;\n  }\n\n  get root() {\n    return this._root;\n  }\n\n  get dependencies() {\n    return this.dependents.inverted;\n  }\n\n  get devDependencies() {\n    return this.devDependents.inverted;\n  }\n\n  addEdges(graph: Graph, key: 'sourceDependencies' | 'sourceDevDependencies' | 'sourcePeerDependencies') {\n    for (const workspace of this._workspaces.values()) {\n      graph.addNode(workspace);\n      workspace[key].forEach((dep: string) => {\n        const dependency = this.getWorkspace(dep);\n        graph.addEdge(dependency, workspace);\n      });\n    }\n  }\n\n  _addAlias(alias: string, fullName: string): void {\n    if (this._aliases.has(alias) && this._aliases.get(alias) !== fullName) {\n      throw new Error(\n        `Cannot override workspace alias ${alias} to ${fullName} because it already points to ${this._aliases.get(\n          alias,\n        )}`,\n      );\n    }\n\n    this._aliases.set(alias, fullName);\n  }\n\n  addWorkspace(packageJson: PackageJsonWithLocation) {\n    const workspace = new Workspace(packageJson, this.root);\n    this._workspaces.set(packageJson.name, workspace);\n    const alias = packageJson.name.replace('@zg-rentals/', '');\n    this._addAlias(alias, packageJson.name);\n    if (packageJson.name.includes('/')) {\n      this._addAlias(packageJson.name.split('/')[1], packageJson.name);\n    }\n\n    if (packageJson.alias) {\n      this._addAlias(packageJson.alias, packageJson.name);\n    }\n    return workspace;\n  }\n\n  getWorkspace(name: string): Workspace {\n    const aliasName = this._aliases.get(name);\n    const workspace = this._workspaces.get(aliasName || name);\n    if (!workspace) {\n      throw new Error(`Workspace for ${name} was not found`);\n    }\n    return workspace;\n  }\n\n  async changedWorkspaces(id?: string): Promise<Set<Workspace>> {\n    const changedFiles = await git.getChangedFiles({ id });\n    const stagedFiles = await git.getStagedFiles();\n    const workspaces = new Set<Workspace>();\n    [...changedFiles, ...stagedFiles].forEach((filepath) => {\n      if (!filepath.startsWith('.changeset/') && filepath !== 'yarn.lock') {\n        const workspace = this.getWorkspaceByFilepath(filepath);\n        workspaces.add(workspace);\n      }\n    });\n    return workspaces;\n  }\n\n  async affectedWorkspaces(id?: string): Promise<Set<Workspace>> {\n    const changedWorkspaces = await this.changedWorkspaces(id);\n    const changedArray = Array.from(changedWorkspaces);\n\n    if (changedArray.includes(this.root)) {\n      return new Set<Workspace>(this.all);\n    }\n\n    const workspaces = new Set<Workspace>();\n    for (const wsName of this.dependents.topologicalClosure(...changedArray)) {\n      workspaces.add(this.getWorkspace(wsName));\n    }\n    for (const wsName of this.devDependents.topologicalClosure(...changedArray)) {\n      workspaces.add(this.getWorkspace(wsName));\n    }\n\n    return workspaces;\n  }\n\n  async publishableChangedWorkspaces(): Promise<Set<Workspace>> {\n    const changed = await this.changedWorkspaces();\n    const publishable = new Set<Workspace>();\n\n    for (const workspace of changed) {\n      if (!workspace.private && !workspace.isRoot) {\n        publishable.add(workspace);\n      }\n    }\n\n    return publishable;\n  }\n\n  fromInput(inputs: Array<string> | [false]): Set<Workspace> {\n    const workspaces = new Set<Workspace>();\n    if (inputs.length === 1 && inputs[0] === false) {\n      return workspaces;\n    }\n\n    if (inputs.length === 0) {\n      return new Set(this.all);\n    }\n\n    (inputs as Array<string>).forEach((input) => {\n      workspaces.add(this.getWorkspace(input));\n    });\n\n    return workspaces;\n  }\n\n  getWorkspaceByFilepath(filepath: string): Workspace {\n    const rootPath = this.root.location;\n    for (const workspace of this.all) {\n      if (workspace === this.root) {\n        continue;\n      }\n      if (filepath.startsWith(`${path.relative(rootPath, workspace.location)}/`)) {\n        return workspace;\n      }\n    }\n    return this.root;\n  }\n}\n\nexport default Workspaces;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AAGA;AAEA;AAQA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAAA;AACA;AADA;AAEA;AAAA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AAjBA;AAAA;AAAA;AAmBA;AACA;AApBA;AAAA;AAAA;AAuBA;AACA;AAFA;AAAA;AACA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AACA;AAQA;AACA;AAhCA;AAAA;AAAA;AAmCA;AACA;AApCA;AAAA;AAAA;AAuCA;AACA;AAxCA;AAAA;AAAA;AA2CA;AACA;AA5CA;AAAA;AAAA;AA8CA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AANA;AACA;AAAA;AAAA;AAMA;AAPA;AAAA;AAAA;AAAA;AAAA;AAQA;AAtDA;AAAA;AAAA;AAyDA;AACA;AAKA;AACA;AACA;AACA;AAlEA;AAAA;AAAA;AAqEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAjFA;AAAA;AAAA;AAoFA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AA1FA;AAAA;AAAA;AAAA;AA4FA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAFA;AACA;AADA;AAAA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AATA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA7FA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyGA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAQA;AARA;AACA;AADA;AASA;AAAA;AACA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAYA;AAAA;AACA;AACA;AAdA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA1GA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4HA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AACA;AAFA;AACA;AADA;AAIA;AAAA;AACA;AAAA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA7HA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAyIA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAxJA;AAAA;AAAA;AA2JA;AACA;AAFA;AAAA;AACA;AADA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AACA;AASA;AACA;AArKA;AACA;AADA;AAAA;AAwKA;;;;A","sourceRoot":""}