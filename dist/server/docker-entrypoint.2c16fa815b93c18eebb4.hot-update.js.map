{"version":3,"file":"docker-entrypoint.2c16fa815b93c18eebb4.hot-update.js","sources":["webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/app/src/createRouterMiddleware.ts","webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/app/src/createServer.ts","webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/app/src/index.ts","webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/cli-tools/src/subprocess.ts","webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/cli-tools/src/yargs.ts","webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/logger-node/src/get-log-middleware.ts","webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/logger-node/src/index.ts","webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/particles-js-proxy/src/httpMiddleware/index.ts","webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/particles-js-proxy/src/index.ts","webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/pontoon-proxy/src/index.ts","webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/pontoon-proxy/src/proxy.ts","webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/pontoon-proxy/src/validate.ts","webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/workspace-graph/src/get-graph.ts","webpack:///external \"history/createMemoryHistory\"","webpack:///external \"http-proxy-middleware\"","webpack:///external \"querystring\"","webpack:///external \"url\""],"sourcesContent":["import url from 'url';\nimport createMemoryHistory from 'history/createMemoryHistory';\nimport type { NextFunction, Request, Response } from 'express';\n\nconst stringify = (obj: Record<string, unknown>): string => {\n  const str = [];\n  let p;\n\n  for (p in obj) {\n    if (obj.hasOwnProperty(p) && (obj[p] || obj[p] === false)) {\n      // @ts-ignore\n      str.push(`${encodeURIComponent(p)}=${encodeURIComponent(obj[p])}`);\n    }\n  }\n\n  if (str.length > 0) {\n    return `?${str.join('&')}`;\n  }\n  return '';\n};\n\nexport const createRouterMiddleware = () => (req: Request, res: Response, next: NextFunction) => {\n  const { pathname } = url.parse(req.originalUrl);\n  const locationInitState = {\n    search: stringify(req.query),\n    pathname,\n    name: pathname,\n  };\n  const history = createMemoryHistory({\n    // @ts-ignore\n    initialEntries: [locationInitState],\n    initialIndex: 0,\n  });\n  res.locals.history = history;\n  next();\n};\n","import type { Logger } from '@zg-rentals/logger-node';\nimport express from 'express';\nimport { createRouterMiddleware } from './createRouterMiddleware';\nimport { getHttpLogger, getLogMiddleware } from '@zg-rentals/logger-node';\nimport { createPontoonProxy } from '@zg-rentals/pontoon-proxy';\nimport os from 'os';\nimport type { NodeTracer } from '@zg-rentals/trace-node';\nimport cookieParser from 'cookie-parser';\nimport { Healthcheck } from '@zg-rentals/particles-js-healthcheck';\nimport type { NodeMonitor } from '@zg-rentals/monitor-node';\nimport { NodeProxy } from '@zg-rentals/particles-js-proxy';\n\nexport interface SsrServerOptions {\n  appName: string;\n  isProduction: boolean;\n  logger: Logger;\n  pontoonApiKey?: string;\n  basePath: string;\n  tracer: NodeTracer;\n  buildNumber: number;\n  zgApi: string;\n  nodeMonitor: NodeMonitor;\n  healthcheckAccessToken: string;\n  host: string;\n}\n\nexport const createSsrServer = (options: SsrServerOptions) => {\n  const app = express();\n  options.tracer.traceApp(app);\n\n  // Setup stock middleware\n  app.use((req, res, next) => {\n    res.locals.startTime = Date.now();\n    next();\n  });\n  app.disable('x-powered-by');\n  app.use(express.json({ limit: '5mb' }));\n  // @ts-ignore\n  app.use(cookieParser({}, { decode: (c) => c }));\n\n  // swallows favicon requests\n  if (!options.isProduction) {\n    app.use('*/favicon.ico', (req, res) => res.status(200).send());\n  }\n\n  if (options.pontoonApiKey) {\n    createPontoonProxy({\n      app,\n      proxyPath: options.basePath + '/pontoon-proxy',\n      logger: options.logger,\n      apiKey: options.pontoonApiKey,\n      api: 'https://pontoon.hotpads.com',\n      serverName: os.hostname(),\n      serviceName: options.appName,\n    });\n  }\n\n  app.use(options.basePath + '/log', getLogMiddleware(options.logger));\n  const httpLogger = getHttpLogger({ logger: options.logger });\n  app.use(httpLogger);\n\n  const healthcheck = new Healthcheck({\n    accessToken: options.healthcheckAccessToken,\n    logger: options.logger,\n    buildNumber: options.buildNumber,\n    onPing: ({ response, hasAccess }) => {\n      options.nodeMonitor.increment({ name: 'healthcheck.ping', amount: 1 });\n\n      return {\n        ...response,\n        ...(hasAccess ? { zgApi: options.zgApi } : {}),\n      };\n    },\n  });\n\n  app.use(`*/check`, healthcheck.check);\n  app.use(`*/shutdown`, healthcheck.shutdown);\n\n  // adds history object for use in router\n  app.use(createRouterMiddleware());\n\n  // Add defualt proxy that goes from basePath/proxy* -> zgApi\n  // Consuming apps can add additional proxies if necessary\n  const apiProxy = new NodeProxy({\n    secure: options.isProduction,\n    proxyPath: options.basePath + '/proxy/',\n    host: options.host,\n    logger: options.logger,\n    stringifyBody: true,\n    brandOverride: 'zillow',\n  }).middleware();\n\n  app.use(options.basePath + '/proxy/*', (req, res, next) => {\n    return apiProxy(req, res, next);\n  });\n\n  return app;\n};\n","export * from './env';\nexport * from './brand';\nexport * from './ip';\nexport * from './web';\nexport * from './createServer';\n","import { isDryRun } from './dry-run';\nimport os from 'os';\nimport type { ChildProcess, SpawnOptions } from 'child_process';\nimport { spawn } from 'child_process';\nimport type { Logger } from '@zg-rentals/logger-node';\nimport getNodeLogger, { getChildLogger } from '@zg-rentals/logger-node';\n\nexport interface RunSpec {\n  action: string;\n  cmd: string;\n  args?: Array<string>;\n  opts?: SpawnOptions;\n  logger?: Logger;\n  blockInDryRun?: boolean;\n}\n\nlet REPO_ROOT: string = process.cwd();\n\nexport function setDefaultCwd(cwd: string) {\n  REPO_ROOT = cwd;\n}\n\nexport class BatchError extends Error {}\n\nfunction indent(str: string) {\n  return ' > ' + str.trim().replace(/\\n/g, '\\n > ');\n}\n\nexport async function run(options: RunSpec): Promise<{ output: string; subprocess?: ChildProcess }> {\n  return new Promise(async (resolve, reject) => {\n    const logger = options.logger || getChildLogger(options.action);\n\n    const { blockInDryRun } = options;\n    const commandText = `${options.cmd} ${(options.args || []).join(' ')}`;\n\n    if (blockInDryRun && isDryRun()) {\n      logger.info(`DRY-RUN Running command: ${commandText}`);\n      return resolve({ output: '' });\n    }\n\n    logger.debug(`Running command: ${commandText}`);\n\n    const { args = [], cmd, opts = {} } = options;\n\n    const subprocess = spawn(cmd, args, {\n      cwd: REPO_ROOT,\n      ...opts,\n      env: { ...process.env, ...(opts.env || {}) },\n      stdio: opts.stdio || 'pipe',\n    });\n\n    let output = '';\n    let error = '';\n\n    function logOutput() {\n      output && logger.info(`in subprocess:\\n${indent(output)}`);\n      error && logger.error(`in subprocess:\\n${indent(error)}`);\n    }\n\n    subprocess.stdout?.on('data', (data) => {\n      output += data.toString();\n    });\n\n    subprocess.stderr?.on('data', (data) => {\n      error += data.toString();\n    });\n\n    subprocess.on('error', (error) => {\n      logOutput();\n      reject(error);\n    });\n\n    if (opts.detached) {\n      subprocess.unref();\n      resolve({\n        output: '',\n        subprocess,\n      });\n    } else {\n      subprocess.on('close', (code) => {\n        if (code && isFinite(code)) {\n          logOutput();\n          reject(new Error(`Subprocess failed with code ${code}`));\n          return;\n        }\n        output = output.trim();\n        if (output) {\n          logger.debug(`Command output:\\n${indent(output)}`);\n        }\n        resolve({\n          output,\n          subprocess,\n        });\n      });\n    }\n  });\n}\n\ntype BuildPromises = Array<() => Promise<string | void>>;\n\nexport async function batch(processes: Array<RunSpec>, parallel = true): Promise<Array<string | void>> {\n  const results: Array<string | void> = [];\n  const logger = getNodeLogger();\n  let failing = false;\n  const buildPromises: BuildPromises = processes.map((process) => {\n    return () => {\n      return run({ ...process, logger })\n        .then((output) => {\n          logger.info(process.action);\n          return output.output;\n        })\n        .catch((e) => {\n          logger.error(process.action);\n          if (e.message) {\n            logger.error(e.message);\n          }\n          failing = true;\n          throw e;\n        });\n    };\n  });\n\n  const maxParallel = parallel ? Math.min(os.cpus().length - 1, buildPromises.length) : 1;\n\n  return new Promise((resolve, reject) => {\n    function runTask(runner: () => Promise<string | void>): Promise<void> {\n      return runner()\n        .then((result) => {\n          results.push(result);\n          return;\n        })\n        .catch((e) => {\n          results.push(e);\n        })\n        .finally(() => {\n          runNextTask();\n        });\n    }\n\n    function runNextTask() {\n      if (buildPromises.length) {\n        const runnable = buildPromises.shift();\n        if (runnable) {\n          runTask(runnable);\n        }\n      }\n\n      if (!buildPromises.length && results.length === processes.length) {\n        if (failing) {\n          reject(new BatchError('Batch processes failed'));\n        }\n        resolve(results);\n      }\n    }\n\n    buildPromises.splice(0, maxParallel).forEach((promise) => {\n      runTask(promise);\n    });\n  });\n}\n","import type { Arguments, Argv, CommandBuilder, MiddlewareFunction, RequireDirectoryOptions } from 'yargs';\nimport type { DefaultArgv } from '.';\n\nimport getNodeLogger, { verbosityToLogLevel } from '@zg-rentals/logger-node';\nimport parser from 'yargs-parser';\nimport unparser from 'yargs-unparser';\nimport Yargs from 'yargs';\nimport path from 'path';\n\nimport { BatchError } from './subprocess';\nimport { setDefaultCwd } from './subprocess';\nimport { setDryRun } from './dry-run';\n\nexport const parserConfiguration = {\n  'strip-aliased': true,\n  'camel-case-expansion': false,\n  'greedy-arrays': true,\n  'populate--': true,\n};\n\n// eslint-disable-next-line @typescript-eslint/ban-types\ntype YargsType = Argv<{}>;\n\nexport function getYargs(yargs: YargsType, repoRoot: string): Argv<DefaultArgv> {\n  return yargs\n    .usage('$0 <command> [options]')\n    .help('help', 'Show this help screen')\n    .alias('help', 'h')\n    .completion('completion', false)\n    .option('dry-run', {\n      default: false,\n      description: 'Run without actually making modifications or destructive operations',\n      global: true,\n      group: 'Global',\n      type: 'boolean',\n    })\n    .option('repo-root', {\n      default: '',\n      description: 'Path to the root of the repository',\n      global: true,\n      group: 'Global',\n      hidden: true,\n      normalize: true,\n      type: 'string',\n    })\n    .option('verbosity', {\n      alias: 'v',\n      default: process.env.RJS_VERBOSITY ? parseInt(process.env.RJS_VERBOSITY) : 2,\n      description: 'Set the verbosity of the script output. Use -v, -vv, or -vvv for more verbose',\n      global: true,\n      group: 'Global',\n      type: 'count',\n    })\n    .option('ci', {\n      default: false,\n      description: 'Sets defaults for running scripts in a CI environment',\n      global: true,\n      group: 'Global',\n      hidden: true,\n      type: 'boolean',\n    })\n    .middleware(\n      [\n        (argv) => {\n          argv['repo-root'] = String(argv['repo-root'] || repoRoot);\n          setDefaultCwd(String(argv['repo-root']));\n        },\n        (argv) => {\n          setDryRun(argv['dry-run']);\n        },\n        (argv) => {\n          process.env.RJS_VERBOSITY = argv.verbosity.toString();\n          if (argv.ci) {\n            process.env.CI = 'true';\n          }\n        },\n        () => {\n          if (process.env.SUDO_UID) {\n            const logger = getNodeLogger();\n            logger.error(\n              'Do not run commands with `sudo`! If elevated permissions are required, commands will prompt you for your password only if and when necessary.',\n            );\n            process.exit(1);\n          }\n        },\n      ],\n      true,\n    )\n    .wrap(Math.min(120, process.stdout.columns))\n    .showHidden('show-advanced', 'Show advanced options')\n    .group('show-advanced', 'Global')\n    .global('show-advanced')\n    .group('help', 'Global')\n    .global('help')\n    .strict()\n    .parserConfiguration(parserConfiguration);\n}\n\nfunction fallbackHandler(argv: DefaultArgv) {\n  const logger = getNodeLogger({ level: verbosityToLogLevel(argv.verbosity) });\n  logger.info(argv);\n  throw new Error('No handler defined');\n}\n\nexport const commandDirOptions: RequireDirectoryOptions = {\n  extensions: ['ts'],\n  exclude: /(?:__tests__)/,\n  recurse: false,\n  visit: function visitor(module, filepath, filename) {\n    const { handler, command, builder, ...rest } = module;\n    const commandName = command || path.basename(filename || '', '.ts');\n    return {\n      ...rest,\n      builder: builder || (((yargs) => yargs.strict(false)) as CommandBuilder),\n      command: commandName,\n      handler: async (argv: DefaultArgv) => {\n        const logger = getNodeLogger({ level: verbosityToLogLevel(argv.verbosity) });\n        logger.trace(`Resolved CLI arguments:\n${Object.entries(argv).map((entry) => ` ${entry[0]}=${entry[1]}`)}`);\n\n        process.on('unhandledRejection', (reason, promise) => {\n          logger.error(`Unhandled Rejection at: ${promise} reason: ${reason}`);\n        });\n\n        try {\n          if (handler) {\n            await handler(argv);\n          } else {\n            fallbackHandler(argv);\n          }\n        } catch (err) {\n          if (!(err instanceof BatchError)) {\n            logger.error(err.message);\n          }\n          process.exitCode = 1;\n        }\n      },\n    };\n  },\n};\n\nexport async function runBuilder<R = Record<string, unknown>>(\n  builder: CommandBuilder<DefaultArgv, R>,\n  cmd = '',\n): Promise<Arguments<R>> {\n  const [command, extra] = cmd.split(' -- ');\n  const inputArgs = parser(`${command}${extra ? ` -- ${extra}` : ''}`, {\n    configuration: parserConfiguration,\n  });\n  const yargs = Yargs(unparser(inputArgs));\n  const middlewares: Array<MiddlewareFunction> = [];\n  jest.spyOn(yargs, 'middleware').mockImplementation((middleware) => {\n    middlewares.push(...(Array.isArray(middleware) ? middleware : [middleware]));\n    return yargs;\n  });\n\n  if (typeof builder !== 'function') {\n    throw new Error('Builder must be a function');\n  }\n\n  const processSpy = jest.spyOn(process, 'exit').mockImplementation(() => {\n    throw new Error('failed');\n  });\n\n  const out = builder(\n    getYargs(yargs, '/test-repo-root').middleware((argv) => {\n      const level = verbosityToLogLevel(argv.verbosity);\n      getNodeLogger({ level });\n    }),\n  );\n  const resolvedOut = await (out instanceof Promise ? out : Promise.resolve(out));\n  const argv = resolvedOut.argv;\n\n  middlewares.forEach((m) => {\n    m(argv);\n  });\n\n  processSpy.mockRestore();\n  return argv;\n}\n\nexport async function run<R = Record<string, unknown>>(\n  builder: CommandBuilder<DefaultArgv, R>,\n  handler: (args: Arguments<R>) => void | Promise<void>,\n  cmd = '',\n): Promise<void> {\n  const argv = await runBuilder(builder, cmd);\n  await handler(argv);\n}\n\nexport function buildTest<R = Record<string, unknown>>(\n  command: string,\n  builder: CommandBuilder<DefaultArgv, R>,\n  handler: (args: Arguments<R>) => void | Promise<void>,\n) {\n  return {\n    build: async (cmd = '') => runBuilder<R>(builder, cmd),\n    run: async (cmd = '') => run<R>(builder, handler, cmd),\n  };\n}\n","import type { Request, Response } from 'express';\nimport type { Level, LogEvent } from 'pino';\nimport type { Logger } from '@zg-rentals/logger-base';\n\nexport function getLogMiddleware(logger: Logger) {\n  return function logMiddleware(req: Request, res: Response) {\n    const logs = req.body?.logs || req.body;\n\n    if (logs && Array.isArray(logs)) {\n      logs.forEach((logEvent: LogEvent) => {\n        const { level, ts, messages, bindings } = logEvent;\n        const bindingsAsObj = bindings.reduce((acc, binding) => {\n          return {\n            ...acc,\n            ...binding,\n          };\n        }, {});\n\n        bindingsAsObj.browser = true;\n\n        const childLogger = logger.child(bindingsAsObj);\n\n        if (messages[0]) {\n          if (typeof messages[0] !== 'object') {\n            messages.unshift({});\n          }\n\n          messages[0] = {\n            ...messages[0],\n            requestId: req.id,\n            time: ts,\n          };\n\n          childLogger[level.label as Level](messages[0], ...messages.slice(1));\n        }\n      });\n    }\n\n    res.send('ok');\n  };\n}\n","import getNodeLogger from './get-node-logger';\n\nexport type { Logger } from '@zg-rentals/logger-base';\nexport * from './get-node-logger';\nexport * from './get-log-middleware';\nexport * from './get-child-logger';\nexport * from './get-http-logger';\nexport * from './verbosity-to-level';\nexport * from './log-sync';\n\nexport default getNodeLogger;\n","import type { Options, RequestHandler } from 'http-proxy-middleware';\nimport { createProxyMiddleware } from 'http-proxy-middleware';\n\nexport const createHttpMiddlewareProxy = (proxyPath: string, opts: Options): RequestHandler => {\n  const baseOptions: Options = {\n    pathRewrite: (path) => {\n      return path.replace(proxyPath, '');\n    },\n  };\n  return createProxyMiddleware({\n    ...baseOptions,\n    ...opts,\n  });\n};\n","import type { Logger } from '@zg-rentals/logger-node';\nimport type { Options, RequestHandler } from 'http-proxy-middleware';\nimport type http from 'http';\n\nimport { createProxyMiddleware } from 'http-proxy-middleware';\nimport { Utils } from '@zg-rentals/particles-js-utils';\nimport querystring from 'querystring';\nexport interface ProxyOptions {\n  host?: (() => string) | string;\n  router?: Options['router'];\n  timeout?: number;\n  proxyPath: string;\n  ws?: boolean;\n  stringifyBody?: boolean;\n  logger?: Logger;\n  defaultBrand?: string;\n  secure?: boolean;\n  isDev?: boolean;\n  brandOverride?: 'zillow' | 'trulia' | 'hotpads';\n}\nexport { createHttpMiddlewareProxy } from './httpMiddleware';\n\nexport class NodeProxy {\n  public host: (() => string) | string = 'http://localhost';\n  public timeout: number;\n  public proxyPath: string | RegExp;\n  public logger?: Logger;\n  public router: Options['router'];\n  public ws: boolean;\n  public stringifyBody: boolean;\n  public secure?: boolean;\n  isDev?: boolean;\n  defaultBrand?: string;\n  brandOverride?: string;\n\n  constructor(options: ProxyOptions) {\n    const {\n      host,\n      proxyPath,\n      timeout = 60000,\n      logger,\n      router,\n      ws = false,\n      stringifyBody = false,\n      defaultBrand,\n      secure,\n      isDev,\n      brandOverride,\n    } = options;\n    this.host = host || this.host;\n    this.timeout = timeout;\n    this.proxyPath = proxyPath;\n    this.router = router;\n    this.ws = ws;\n    this.stringifyBody = stringifyBody;\n    this.logger = logger;\n    this.defaultBrand = defaultBrand;\n    this.secure = secure;\n    this.isDev = isDev;\n    this.brandOverride = brandOverride;\n  }\n\n  middleware = (): RequestHandler => {\n    const proxyOptions: Partial<Options> = {\n      xfwd: true,\n      logProvider: () => ({\n        log: this.logger ? this.logger.info.bind(this.logger) : () => {},\n        debug: this.logger ? this.logger.debug.bind(this.logger) : () => {},\n        info: this.logger ? this.logger.info.bind(this.logger) : () => {},\n        warn: this.logger ? this.logger.warn.bind(this.logger) : () => {},\n        error: this.logger ? this.logger.error.bind(this.logger) : () => {},\n      }),\n      onProxyReq: this._createRequestHandler(this.isDev),\n      pathRewrite: (path, req) => {\n        const rewrote = req.originalUrl.replace(this.proxyPath, '');\n\n        this.logger && this.logger.debug('resolved proxy path=%s to %s', path, rewrote);\n\n        return rewrote;\n      },\n      ws: this.ws,\n      changeOrigin: true,\n      timeout: this.timeout,\n      target: typeof this.host === 'string' ? this.host : 'http://localhost',\n      router: typeof this.host === 'function' ? this.host : this.router,\n      secure: this.secure,\n    };\n\n    this.logger && this.logger.info(proxyOptions, 'http proxy middleware options');\n\n    return createProxyMiddleware(proxyOptions);\n  };\n\n  private _createRequestHandler = (isDev?: boolean) => {\n    return (proxyReq: http.ClientRequest, srcReq: http.IncomingMessage) => {\n      const { defaultBrand, stringifyBody, brandOverride } = this;\n\n      const brand = Utils.getBrand(srcReq, isDev);\n      const ip = Utils.getIp(srcReq);\n\n      if (brandOverride) {\n        proxyReq.setHeader('X-Brand', brandOverride);\n      } else if (brand) {\n        proxyReq.setHeader('X-Brand', brand);\n      } else if (defaultBrand) {\n        proxyReq.setHeader('X-Brand', defaultBrand);\n      } else {\n        this.logger &&\n          this.logger.warn(\n            {\n              headers: srcReq.headers,\n            },\n            'could not set X-Brand and no default',\n          );\n      }\n\n      if (ip) {\n        proxyReq.setHeader('X-Client-Ip', ip);\n      } else {\n        this.logger &&\n          this.logger.warn(\n            {\n              headers: srcReq.headers,\n              connection: srcReq.connection,\n            },\n            'could not set X-Client-Ip',\n          );\n      }\n\n      this.logger &&\n        this.logger.info(\n          {\n            proxy: {\n              headers: {\n                'x-brand': proxyReq.getHeader('X-Brand'),\n                'x-client-ip': proxyReq.getHeader('X-Client-Ip'),\n              },\n            },\n            source: {\n              headers: srcReq.headers,\n              url: srcReq.url,\n              method: srcReq.method,\n            },\n          },\n          'handling proxy request',\n        );\n\n      // if body-parser middleware runs before request gets to this proxy\n      // ... we probably want to re-stringify the body for the outgoing request\n      // @ts-ignore these are valid if the srcReq is from express\n      if (stringifyBody && srcReq.body && Object.keys(srcReq.body).length) {\n        const contentType = proxyReq.getHeader('Content-Type');\n\n        const writeBody = (body: string) => {\n          proxyReq.setHeader('Content-Length', Buffer.byteLength(body));\n          proxyReq.write(body);\n        };\n\n        if (typeof contentType === 'string') {\n          if (contentType.includes('application/json')) {\n            // @ts-ignore\n            writeBody(JSON.stringify(srcReq.body));\n          } else if (contentType.includes('application/x-www-form-urlencoded')) {\n            // @ts-ignore\n            writeBody(querystring.stringify(srcReq.body));\n          }\n        }\n      }\n    };\n  };\n}\n","export * from './proxy';\n","import type { Application, NextFunction, Request, Response } from 'express';\nimport { Pontoon } from '@zg-rentals/pontoon';\nimport express from 'express';\nimport type { Logger } from '@zg-rentals/logger-base';\nimport { validateCounts, validateGauges, validateHeaders } from './validate';\n\ninterface PontoonProxyOptions {\n  api: string;\n  apiKey: string;\n  app: Application;\n  hostname?: string;\n  logger?: Logger;\n  proxyPath: string;\n  serverName: string;\n  serviceName: string;\n}\n\nconst PONTOON_PATH_PREFIX = 'pontoon/api/';\nconst REQUIRED_OPTIONS = ['api', 'apiKey', 'app', 'serverName', 'serviceName', 'proxyPath'];\n\nexport function createPontoonProxy(options: PontoonProxyOptions) {\n  const missingOptions = REQUIRED_OPTIONS.filter((opt) => !options[opt as keyof PontoonProxyOptions]);\n  if (missingOptions.length) {\n    throw new Error(`Cannot proxy pontoon requests without required options: ${missingOptions.join(', ')}`);\n  }\n\n  const { api, apiKey, app, hostname, logger, serverName, serviceName } = options;\n\n  let { proxyPath } = options;\n\n  if (proxyPath[0] !== '/') {\n    proxyPath = `/${proxyPath}`;\n  }\n  if (proxyPath[proxyPath.length - 1] !== '/') {\n    proxyPath = `${proxyPath}/`;\n  }\n\n  const fullProxyPath = proxyPath + PONTOON_PATH_PREFIX;\n\n  const pontoon = new Pontoon({ api, apiKey });\n\n  app.use(`${fullProxyPath}*`, express.json(), async (req: Request, res: Response, next: NextFunction) => {\n    if (req.method !== 'POST' || !validateHeaders(req, hostname)) {\n      return next();\n    }\n    const pontoonPath = req.originalUrl.replace(fullProxyPath, '');\n    let pontoonRequest;\n\n    if (pontoonPath === 'countPublisher/v2/add') {\n      const validatedCounts = validateCounts(req.body);\n      if (validatedCounts) {\n        pontoonRequest = pontoon.sendCounts({\n          serverName,\n          serviceName,\n          counts: validatedCounts,\n        });\n      } else {\n        logger?.error('invalid request to proxy pontoon counts');\n        return res.status(400).end();\n      }\n    } else if (pontoonPath === 'gaugePublisher/v2/add') {\n      const validatedGauges = validateGauges(req.body);\n      if (validatedGauges) {\n        pontoonRequest = pontoon.sendGauges({\n          serverName,\n          serviceName,\n          gauges: validatedGauges,\n        });\n      } else {\n        logger?.error('invalid request to proxy pontoon gauges');\n        return res.status(400).end();\n      }\n    } else {\n      return next();\n    }\n    logger?.info(`proxying ${pontoonPath}`);\n    await pontoonRequest\n      .then(() => res.end())\n      .catch((err) => {\n        logger && logger.error(err);\n        res.end(500);\n      });\n  });\n}\n","import type { MetricCounts, MetricGauges } from '@zg-rentals/pontoon';\nimport type { Request } from 'express';\n\nconst TIME_THESHOLD_MS = 1000 * 60 * 10;\nconst BATCH_SIZE_THRESHOLD = 1000;\nconst REQUIRED_HEADERS = ['host', 'referer', 'accept'];\n\nfunction urlsMatch(hostname: string, headerUrl?: string): boolean {\n  if (headerUrl !== undefined) {\n    headerUrl = headerUrl.toLowerCase();\n    hostname = hostname.toLowerCase();\n    return headerUrl.includes(hostname) || hostname.includes(headerUrl);\n  }\n  return false;\n}\n\nexport function validateHeaders(req: Request, hostname?: string): boolean {\n  const headers = req.headers;\n  const isCorsRequest = hostname && (!urlsMatch(hostname, headers.host) || !urlsMatch(hostname, headers.referer));\n  if (isCorsRequest || REQUIRED_HEADERS.find((header) => headers[header] === undefined)) {\n    return false;\n  }\n  return true;\n}\n\nexport function validateCounts({ counts, browserTime }: { counts: MetricCounts['counts']; browserTime: number }) {\n  let minDate = Infinity,\n    maxDate = -Infinity;\n  const now = Date.now();\n  const browserClockOffset = now - browserTime;\n  const correctedCounts: MetricCounts['counts'] = {};\n  const timestamps = Object.keys(counts);\n  if (timestamps.length > BATCH_SIZE_THRESHOLD) {\n    return false;\n  }\n  const foundInvalidData = timestamps.find((timestamp) => {\n    if (Object.keys(counts[timestamp]).length > BATCH_SIZE_THRESHOLD) {\n      return true;\n    }\n    const epochMs = Number(timestamp);\n    if (isNaN(epochMs)) {\n      return true;\n    }\n    const correctedTime = epochMs + browserClockOffset;\n    if (Math.abs(now - correctedTime) > TIME_THESHOLD_MS) {\n      return true;\n    }\n    minDate = Math.min(minDate, epochMs);\n    maxDate = Math.max(maxDate, epochMs);\n    correctedCounts[correctedTime] = counts[timestamp];\n  });\n  if (foundInvalidData || maxDate - minDate > TIME_THESHOLD_MS) {\n    return false;\n  }\n  return correctedCounts;\n}\n\nexport function validateGauges({ gauges, browserTime }: { gauges: MetricGauges['gauges']; browserTime: number }) {\n  let minDate = Infinity,\n    maxDate = -Infinity;\n  const now = Date.now();\n  const browserClockOffset = now - browserTime;\n  const gaugeKeys = Object.keys(gauges);\n  if (gaugeKeys.length > BATCH_SIZE_THRESHOLD) {\n    return false;\n  }\n  const foundInvalidData = gaugeKeys.find((gaugeKey) => {\n    return gauges[gaugeKey].find((dataPoint) => {\n      const epochMs = Number(dataPoint[0]);\n      dataPoint[1] = Number(dataPoint[1]);\n      if (isNaN(epochMs) || isNaN(dataPoint[1])) {\n        return true;\n      }\n      const correctedTime = epochMs + browserClockOffset;\n      if (Math.abs(now - correctedTime) > TIME_THESHOLD_MS) {\n        return true;\n      }\n      minDate = Math.min(minDate, epochMs);\n      maxDate = Math.max(maxDate, epochMs);\n      dataPoint[0] = correctedTime;\n    });\n  });\n  if (foundInvalidData || maxDate - minDate > TIME_THESHOLD_MS) {\n    return false;\n  }\n  return gauges;\n}\n","import glob from 'glob';\nimport path from 'path';\nimport { getChildLogger } from '@zg-rentals/logger-node';\nimport { file } from '@zg-rentals/cli-tools';\nimport type { PackageJson, PackageJsonWithLocation } from './Workspace';\nimport Workspaces from './Workspaces';\n\nexport function resetWorkspaceCache() {\n  cache = new Map<string, Workspaces>();\n}\n\nlet cache: Map<string, Workspaces> = new Map<string, Workspaces>();\n\nexport function getWorkspaceGraph(repoRoot: string, logger = getChildLogger('Getting workspaces')): Workspaces {\n  if (cache.has(repoRoot)) {\n    logger.debug('Got workspaces from cache');\n    return cache.get(repoRoot) as Workspaces;\n  }\n\n  const rootPackageJson = file.loadJsonSync<PackageJson>({ filepath: path.join(repoRoot, 'package.json'), logger });\n  const { workspaces: workspaceGlobs = [] } = rootPackageJson;\n  const workspaces: Array<PackageJsonWithLocation> = [];\n\n  logger.trace(`Workspace globs:\n${workspaceGlobs.map((g: string) => `  - ${g}`).join('\\n')}`);\n\n  workspaceGlobs.forEach((globString: string) => {\n    glob.sync(globString, { cwd: repoRoot }).map((workspacePath) => {\n      try {\n        const packageJson = file.loadJsonSync<PackageJson>({\n          filepath: path.join(repoRoot, workspacePath, 'package.json'),\n          logger,\n        });\n        workspaces.push({ ...packageJson, location: path.join(repoRoot, workspacePath) });\n      } catch (e) {\n        if (!(e.path.endsWith('package.json') && e.code === 'ENOENT')) {\n          throw e;\n        }\n      }\n    });\n  });\n\n  const graph = new Workspaces({ ...rootPackageJson, location: repoRoot }, workspaces);\n\n  cache.set(repoRoot, graph);\n  return graph;\n}\n","module.exports = require(\"history/createMemoryHistory\");","module.exports = require(\"http-proxy-middleware\");","module.exports = require(\"querystring\");","module.exports = require(\"url\");"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAdA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAgBA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAEA;AAXA;AAcA;AACA;AACA;AAEA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;ACjGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AACA;AAEA;AAEA;AAWA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAyBA;AACA;AACA;AACA;AACA;AA5BA;AAEA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AACA;AAMA;AAPA;AAQA;AAAA;AACA;AATA;AAWA;AAXA;AAeA;AACA;AADA;AAGA;AACA;AAJA;AAOA;AACA;AAOA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAlEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAwEA;AAAA;AAAA;AACA;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAtBA;AAyBA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AACA;AASA;AACA;AAMA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAWA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAYA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAPA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAaA;AACA;AAdA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAeA;AACA;AACA;AACA;AAAA;AACA;AApBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAJA;AA2BA;AAlCA;AAqCA;AAAA;AAAA;AACA;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAEA;AAFA;AAKA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAmBA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AA3BA;AAAA;AACA;AADA;AA6BA;AACA;AAEA;AACA;AACA;AAEA;AApCA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAwCA;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAHA;AAAA;AACA;AADA;AAKA;AALA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AASA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAFA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnMA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAIA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACxCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTA;AACA;AACA;AAcA;AAEA;AAaA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AA4BA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAOA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBA;AAyBA;AAEA;AACA;AACA;AAzDA;AA2DA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AADA;AAKA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAFA;AAMA;AACA;AACA;AAGA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AACA;AACA;AAHA;AAPA;AAiBA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC5DA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACCA;AACA;AAEA;AAaA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAIA;AACA;AALA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AATA;AAAA;AAAA;AAAA;AACA;AASA;AACA;AACA;AACA;AAHA;AAVA;AAAA;AACA;AADA;AAgBA;AAhBA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AAmBA;AACA;AArBA;AAAA;AAAA;AAAA;AACA;AAqBA;AACA;AACA;AACA;AAHA;AAtBA;AAAA;AACA;AADA;AA4BA;AA5BA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAkCA;AAlCA;AAAA;AAoCA;AAAA;AAEA;AACA;AACA;AACA;AAzCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AA0CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtFA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;;;;;;;;;;;;AC9CA;;;;;;;;;;;;ACAA;;;;;;;;;;;;ACAA;;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}