{"version":3,"file":"index.470815ed475b835db766.hot-update.js","sources":["webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/monitor-base/src/baseMonitor.ts","webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/monitor-base/src/index.ts","webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/monitor-base/src/plugin.ts","webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/monitor-base/src/plugins/index.ts","webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/monitor-base/src/plugins/plain-plugin/index.ts","webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/monitor-base/src/reporter.ts","webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/monitor-base/src/reporters/index.ts","webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/monitor-base/src/reporters/log-reporter/index.ts","webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/monitor-base/src/statController.ts","webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/monitor-node/src/index.ts","webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/monitor-node/src/nodeMonitor.ts","webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/monitor-node/src/plugins/index.ts","webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/monitor-node/src/plugins/node-vitals-plugin/index.ts","webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/monitor-node/src/plugins/node-vitals-plugin/nodeVitals.ts","webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/monitor-node/src/plugins/pontoon-heartbeat-plugin/index.ts","webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/monitor-node/src/reporters/index.ts","webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/monitor-node/src/reporters/log-reporter/index.ts","webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/monitor-node/src/reporters/pontoon-reporter/index.ts","webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/particles-js-healthcheck/src/index.ts","webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/particles-js-utils/src/index.ts","webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/particles-js-utils/src/node/index.ts","webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/pontoon/src/batched-metrics.ts","webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/pontoon/src/index.ts","webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/pontoon/src/pontoon.ts","webpack:///./app/server/utils/nodeMonitor.ts","webpack:///external \"core-js/modules/es.number.is-finite.js\"","webpack:///external \"env-var\"","webpack:///external \"event-loop-stats\"","webpack:///external \"on-headers\"","webpack:///external \"perf_hooks\""],"sourcesContent":["import type { Logger } from '@zg-rentals/particles-js-base-logger';\n\nimport type { MonitorPlugin } from './plugin';\nimport type { MonitorReporter } from './reporter';\nimport type { StatController } from './statController';\n\nexport interface MonitorInterface<PluginType, ReporterType> {\n  logger?: Logger;\n  plugins?: Array<PluginType>;\n  reporters?: Array<ReporterType>;\n}\n\nexport interface MetricAlert {\n  periodMs: number;\n  minThreshold?: number;\n  maxThreshold?: number;\n  alertFrequencyMinutes: number;\n  customEmails?: Array<string>;\n  metricName?: string;\n  metricType?: 'GAUGE' | 'COUNT';\n}\n\nexport interface MetricOptions {\n  tags?: Record<string, unknown>;\n  alert?: MetricAlert;\n  [key: string]: unknown;\n}\n\nexport interface IncrementOptions {\n  name: string;\n  amount?: number;\n  options?: MetricOptions;\n}\n\nexport interface GaugeOptions {\n  name: string;\n  amount?: number;\n  options?: MetricOptions;\n}\nexport interface Monitor {\n  increment: (opts: IncrementOptions) => Promise<void>;\n  gauge: (opts: GaugeOptions) => Promise<void>;\n  error: ({ error }: { error: Error }) => Promise<void>;\n}\n\nexport class BaseMonitor<PluginType extends MonitorPlugin, ReporterType extends MonitorReporter> implements Monitor {\n  public plugins: Array<PluginType>;\n  public reporters: Array<ReporterType>;\n  public stats: Record<string, StatController>;\n\n  protected logger?: Logger;\n\n  constructor({ logger, plugins = [], reporters = [] }: MonitorInterface<PluginType, ReporterType> = {}) {\n    this.logger = logger;\n    this.plugins = plugins;\n    this.reporters = reporters;\n    this.stats = {};\n\n    this._initializeReporters();\n    this._trackMonitorStart();\n    this._initializePlugins();\n  }\n\n  private _initializeReporters() {\n    this.reporters.forEach((reporter) => {\n      reporter.onInitialize(this.logger);\n      if (reporter.stats) {\n        this.stats[reporter.reporterName] = reporter.stats;\n      }\n    });\n  }\n\n  private _initializePlugins() {\n    this.plugins.forEach((plugin) => {\n      plugin.onInitialize(this.increment.bind(this), this.gauge.bind(this), this.logger);\n      if (plugin.stats) {\n        this.stats[plugin.pluginName] = plugin.stats;\n      }\n    });\n  }\n\n  private async _trackMonitorStart() {\n    await this.increment({ name: 'Monitor started' });\n  }\n\n  async increment(...counts: Array<IncrementOptions>) {\n    const countPromises: Array<Promise<void>> = [];\n    counts.forEach(({ name, amount = 1, options }) => {\n      this.reporters.forEach((reporter) => {\n        countPromises.push(\n          reporter.onIncrement({\n            name,\n            amount,\n            options,\n          }),\n        );\n      });\n    });\n    await Promise.all(countPromises);\n  }\n\n  async gauge(...gauges: Array<GaugeOptions>) {\n    const gaugePromises: Array<Promise<void>> = [];\n    gauges.forEach(({ name, amount = 1, options }) => {\n      this.reporters.forEach((reporter) => {\n        gaugePromises.push(\n          reporter.onGauge({\n            name,\n            amount,\n            options,\n          }),\n        );\n      });\n    });\n    await Promise.all(gaugePromises);\n  }\n\n  async error({ error }: { error: Error }) {\n    await Promise.all(\n      this.reporters.map((reporter) => {\n        return reporter.onError({ error });\n      }),\n    );\n  }\n}\n","export * from './baseMonitor';\nexport * from './statController';\nexport * from './plugin';\nexport * from './reporter';\nexport * from './plugins';\nexport * from './reporters';\n","import type { Logger } from '@zg-rentals/particles-js-base-logger';\nimport type { GaugeOptions, IncrementOptions } from './baseMonitor';\nimport type { StatController } from './statController';\n\nexport interface Plugin {\n  pluginName: string;\n  logger?: Logger;\n  stats?: StatController;\n  increment?: (options: IncrementOptions) => void;\n  gauge?: (options: GaugeOptions) => void;\n  onInitialize(increment: (i: IncrementOptions) => void, gauge: (g: GaugeOptions) => void, logger?: Logger): void;\n}\n\nexport interface MonitorPluginInterface {\n  pluginName: string;\n  logger?: Logger;\n}\n\nexport abstract class MonitorPlugin {\n  readonly pluginName: string;\n  logger?: Logger;\n  stats?: StatController;\n  increment?: (options: IncrementOptions) => void;\n  gauge?: (options: GaugeOptions) => void;\n\n  abstract onInitialize(\n    increment: (i: IncrementOptions) => void,\n    gauge: (g: GaugeOptions) => void,\n    logger?: Logger,\n  ): void;\n\n  constructor({ pluginName, logger }: MonitorPluginInterface) {\n    this.pluginName = pluginName;\n    this.logger = logger;\n  }\n}\n","export * from './plain-plugin';\n","import type { MonitorPluginInterface } from '../../plugin';\nimport { MonitorPlugin } from '../../plugin';\nimport { StatController } from '../../statController';\n\nexport class PlainPlugin extends MonitorPlugin {\n  constructor(args: Omit<MonitorPluginInterface, 'pluginName'> = {}) {\n    super({\n      ...args,\n      pluginName: 'PlainPlugin',\n    });\n\n    this.stats = new StatController({\n      limit: 10,\n    });\n  }\n\n  onError({ error }: { error: Error }) {\n    this.logger && this.logger.error(error);\n\n    return Promise.resolve();\n  }\n\n  onInitialize() {}\n}\n","import type { Logger } from '@zg-rentals/particles-js-base-logger';\nimport type { StatController } from './statController';\n\nexport interface MetricFnInterface {\n  name: string;\n  amount: number;\n  options?: Record<string, unknown>;\n}\n\nexport interface MetricFn {\n  ({ name, amount, options }: MetricFnInterface): Promise<void>;\n}\n\nexport interface Reporter {\n  sampleRate: number;\n  reporterName: string;\n  logger?: Logger;\n  stats?: StatController;\n  onInitialize(logger?: Logger): void;\n  onIncrement: MetricFn;\n  onGauge: MetricFn;\n  onError<T>({ error, args }: { error: Error; args?: T }): Promise<void>;\n}\n\nexport interface MonitorReporterInterface {\n  reporterName: string;\n  logger?: Logger;\n  sampleRate?: number;\n}\n\nexport abstract class MonitorReporter implements Reporter {\n  readonly reporterName: string;\n  logger?: Logger;\n  stats?: StatController;\n  sampleRate: number;\n\n  abstract onInitialize(logger?: Logger): void;\n  abstract onIncrement(args: MetricFnInterface): Promise<void>;\n  abstract onGauge(args: MetricFnInterface): Promise<void>;\n  abstract onError<T>({ error, args }: { error: Error; args?: T }): Promise<void>;\n\n  constructor({ reporterName, logger, sampleRate = 1 }: MonitorReporterInterface) {\n    this.reporterName = reporterName;\n    this.logger = logger;\n    this.sampleRate = sampleRate;\n  }\n}\n","export * from './log-reporter';\n","import type { LogFn, Logger } from '@zg-rentals/particles-js-base-logger';\nimport type { MetricOptions } from '../../baseMonitor';\nimport { MonitorReporter } from '../../reporter';\n\nexport type LogLevel = 'info' | 'warn' | 'error' | 'debug' | 'trace';\nexport type LogReporterFilter = (name: string, amount?: number) => boolean;\n\nexport class LogReporter extends MonitorReporter {\n  level: LogLevel;\n  log?: LogFn;\n  filter?: LogReporterFilter;\n\n  constructor({\n    logger,\n    level = 'warn',\n    filter,\n    sampleRate,\n  }: {\n    logger?: Logger;\n    level?: LogLevel;\n    filter?: LogReporterFilter;\n    sampleRate?: number;\n  } = {}) {\n    super({\n      logger,\n      reporterName: 'LogReporter',\n      sampleRate,\n    });\n\n    this.level = level;\n    this.filter = filter;\n    this.setLogLevel();\n  }\n\n  setLogLevel() {\n    this.log = this.logger && this.logger[this.level];\n  }\n\n  onInitialize(logger?: Logger) {\n    this.logger = this.logger || logger;\n    this.setLogLevel();\n  }\n\n  shouldLog(name: string, amount?: number, options: MetricOptions = {}) {\n    if (this.log && (!this.filter || this.filter(name, amount))) {\n      const random = Math.random();\n      return (\n        (this.sampleRate === 1 || random <= this.sampleRate) &&\n        (typeof options.sampleRate !== 'number' || random <= options.sampleRate)\n      );\n    }\n  }\n\n  serializeTags(tags?: Record<string, unknown>) {\n    const tagStrings: Array<string> = [];\n    if (tags) {\n      Object.keys(tags).forEach((key) => {\n        tagStrings.push(`${key}=${tags[key]}`);\n      });\n    }\n    return tagStrings.length ? `; ${tagStrings.join(', ')}` : '';\n  }\n\n  onIncrement({ name, amount = 1, options }: { name: string; amount: number; options?: MetricOptions }) {\n    if (this.shouldLog(name, amount, options)) {\n      this.log!(`(count) ${name}: +${amount}${this.serializeTags(options?.tags)}`);\n    }\n\n    return Promise.resolve();\n  }\n\n  onGauge({ name, amount, options }: { name: string; amount: number; options?: MetricOptions }): Promise<void> {\n    if (this.shouldLog(name, amount, options)) {\n      this.log!(`(gauge) ${name}: ${amount}${this.serializeTags(options?.tags)}`);\n    }\n\n    return Promise.resolve();\n  }\n\n  onError({ error }: { error: Error }) {\n    this.logger?.error(error);\n\n    return Promise.resolve();\n  }\n}\n","export interface Stat {\n  name: string;\n  count: number;\n  url?: string;\n}\n\nexport class StatController {\n  onRecord: ({ name, count }: Stat) => Stat;\n\n  stats: Record<string, Stat>;\n  limit: number;\n\n  constructor({\n    onRecord,\n    limit = 50,\n  }: {\n    onRecord?: ({ name, count }: Stat) => Stat;\n    limit?: number;\n  } = {}) {\n    this.onRecord = onRecord || (({ name, count }) => ({ name, count }));\n    this.stats = {};\n    this.limit = limit;\n  }\n\n  record = ({ name, count = 1 }: { name: string; count?: number }): Stat => {\n    const existingStat = this.stats[name];\n\n    if (!existingStat) {\n      const keys = Object.keys(this.stats);\n      if (keys.length >= this.limit) {\n        delete this.stats[keys[0]];\n      }\n\n      const stat = this.onRecord({ name, count });\n\n      this.stats[name] = stat;\n\n      return stat;\n    }\n\n    existingStat.count = existingStat.count + count;\n\n    return existingStat;\n  };\n}\n","export * from './nodeMonitor';\nexport * from './plugins';\nexport * from './reporters';\n","import type { RequestHandler } from 'express';\nimport type { MonitorInterface } from '@zg-rentals/monitor-base';\nimport { BaseMonitor, MonitorPlugin, MonitorReporter } from '@zg-rentals/monitor-base';\n\nexport abstract class NodeMonitorPlugin extends MonitorPlugin {\n  abstract onShutdown(): void;\n}\n\nexport abstract class NodeMonitorReporter extends MonitorReporter {\n  abstract onRequest(...args: Parameters<RequestHandler>): void;\n}\n\nexport class NodeMonitor extends BaseMonitor<NodeMonitorPlugin, NodeMonitorReporter> {\n  constructor(args: MonitorInterface<NodeMonitorPlugin, NodeMonitorReporter> = {}) {\n    super(args);\n\n    this._initializeProcessListeners();\n    this._initializeOnEnd();\n  }\n\n  _initializeProcessListeners = (): void => {\n    process.on('uncaughtExceptionMonitor', (err: Error, origin: 'uncaughtException' | 'unhandledRejection') => {\n      this.logger &&\n        this.logger.error(\n          {\n            stack: err.stack,\n            name: err.name,\n          },\n          `[${origin}] node server about to crash: ${err.message}`,\n        );\n\n      this.error({ error: err });\n    });\n  };\n\n  _initializeOnEnd = (): void => {\n    process.on('SIGINT', () => {\n      this.logger && this.logger.warn(`SIGINT detected, running plugins onEnd`);\n\n      this.plugins.map((plugin) => {\n        plugin.onShutdown();\n      });\n\n      this.logger && this.logger.warn(`notify shutdown listener finished`);\n\n      // todo: hack: fix for pino needing to finish writing\n      // before process terminates\n      // should work to implement pino.final and custom pino.destination in ServerLogger\n      // https://github.com/pinojs/pino/blob/master/docs/api.md#pino-final\n      setTimeout(() => process.exit(), 1000);\n    });\n  };\n\n  async onRequest(...args: Parameters<RequestHandler>) {\n    await Promise.all(\n      this.reporters.map((reporter) => {\n        return reporter.onRequest(...args);\n      }),\n    );\n    args[2]();\n  }\n}\n","export * from './pontoon-heartbeat-plugin';\nexport * from './node-vitals-plugin';\n","import { MonitorPlugin } from '@zg-rentals/monitor-base';\nimport type { GaugeOptions, IncrementOptions } from '@zg-rentals/monitor-base';\nimport type { Logger } from '@zg-rentals/particles-js-base-logger';\nimport { NodeUtil } from '@zg-rentals/particles-js-utils';\nimport nodeVitals from './nodeVitals';\n\nexport interface NodeVitalsPluginArgs {\n  logger?: Logger;\n  webappName: string;\n  buildNumber?: number;\n  gitCommit?: string;\n  propertiesFilePath?: string;\n}\n\nexport interface NodeVitalsBuildInfo {\n  serverType: string;\n  buildNumber: string;\n  gitCommit: string;\n}\n\nconst DEFAULT_PROPERTIES_FILE_PATH = '/hotpads/config/server.properties';\nconst INTERVAL_MS = 5_000;\n\nexport class NodeVitalsPlugin extends MonitorPlugin {\n  buildInfo: NodeVitalsBuildInfo;\n  logger?: Logger;\n  interval?: NodeJS.Timeout;\n\n  constructor({\n    webappName,\n    buildNumber = 0,\n    gitCommit = '',\n    logger,\n    propertiesFilePath = DEFAULT_PROPERTIES_FILE_PATH,\n  }: NodeVitalsPluginArgs) {\n    super({\n      logger,\n      pluginName: 'NodePontoonPlugin',\n    });\n\n    const { serverProperties } = new NodeUtil.EnvironmentUtil(propertiesFilePath, { appName: webappName });\n\n    this.buildInfo = {\n      serverType: serverProperties.type,\n      buildNumber: buildNumber.toString(),\n      gitCommit,\n    };\n\n    const requiredArgs = ['buildNumber', 'gitCommit'];\n    const missingArgs = requiredArgs.filter(\n      (arg) => this.buildInfo[arg as keyof NodeVitalsPlugin['buildInfo']] === undefined,\n    );\n    if (missingArgs.length) {\n      const errorMessage = `${this.pluginName} plugin missing required arg(s): ${missingArgs.join(', ')}`;\n      if (this.logger) {\n        this.logger.error(errorMessage);\n      }\n      throw new Error(errorMessage);\n    }\n  }\n\n  initVitals() {\n    nodeVitals.start(this);\n    this.interval = setInterval(() => nodeVitals.record(this), INTERVAL_MS);\n  }\n\n  onInitialize(increment: (i: IncrementOptions) => void, gauge: (g: GaugeOptions) => void, logger?: Logger) {\n    this.increment = increment;\n    this.gauge = gauge;\n    this.logger = this.logger || logger;\n    this.initVitals();\n  }\n\n  async onShutdown() {\n    if (this.interval) {\n      clearInterval(this.interval);\n      delete this.interval;\n    }\n    nodeVitals.stop();\n  }\n}\n","import os from 'os';\nimport fs from 'fs';\nimport v8 from 'v8';\nimport { constants, PerformanceObserver } from 'perf_hooks';\nimport eventLoopStats from 'event-loop-stats';\nimport type { NodeVitalsPlugin } from '.';\nimport type { PerformanceEntry } from 'perf_hooks';\n\nconst gcFlagMap = {\n  [constants.NODE_PERFORMANCE_GC_MAJOR]: 'MarkSweepCompact',\n  [constants.NODE_PERFORMANCE_GC_MINOR]: 'Scavange',\n  [constants.NODE_PERFORMANCE_GC_INCREMENTAL]: 'IncrementalMarking',\n  [constants.NODE_PERFORMANCE_GC_WEAKCB]: 'ProcessWeakCallbacks',\n};\n\nlet observer: PerformanceObserver;\n\nexport const Bytes = {\n  toKb: (bytes: number) => Math.round(bytes / 1024),\n  toMb: (bytes: number) => Math.round(bytes / 1024 / 1024),\n};\n\nexport default {\n  start({ increment }: NodeVitalsPlugin) {\n    if (increment) {\n      increment({ name: 'App startup', amount: 1 });\n\n      observer = new PerformanceObserver((list) => {\n        list.getEntries().forEach((entry: PerformanceEntry) => {\n          // @ts-ignore the type definition is missing this property\n          const kindFlag = entry.kind;\n          const typeName = `${kindFlag}-${gcFlagMap[kindFlag]}`;\n          const pauseMS = Math.round(entry.duration);\n          increment({ name: 'gc type ' + typeName, amount: 1 });\n          increment({ name: 'gc pause ms', amount: pauseMS });\n          increment({ name: 'gc type ' + typeName + ' pause ms', amount: pauseMS });\n        });\n      });\n\n      observer.observe({\n        entryTypes: ['gc'],\n      });\n    }\n  },\n\n  stop() {\n    observer.disconnect();\n  },\n\n  record({ buildInfo, increment, gauge }: NodeVitalsPlugin) {\n    const serverType = buildInfo.serverType;\n    const loopStats = eventLoopStats.sense();\n\n    if (increment) {\n      increment({ name: 'App heartbeat ' + serverType, amount: 1 });\n      increment({ name: 'App heartbeat type-build ' + serverType + ' ' + buildInfo.buildNumber, amount: 1 });\n      increment({ name: 'App heartbeat type-commit ' + serverType + ' ' + buildInfo.gitCommit, amount: 1 });\n      increment({ name: 'App heartbeat build ' + buildInfo.buildNumber, amount: 1 });\n      increment({ name: 'App heartbeat commit ' + buildInfo.gitCommit, amount: 1 });\n      increment({ name: 'event loops', amount: loopStats.num });\n    }\n\n    if (gauge) {\n      const loadavg = os.loadavg();\n      const loadavgScaler = 1_000; //pontoon rounds to integer, scale for additional precision\n      gauge({ name: 'os load avg 1m', amount: loadavg[0] * loadavgScaler });\n      gauge({ name: 'os load avg 5m', amount: loadavg[1] * loadavgScaler });\n      gauge({ name: 'os load avg 15m', amount: loadavg[2] * loadavgScaler });\n\n      const totalmem = os.totalmem();\n      const freemem = os.freemem();\n      const usedmem = totalmem - freemem;\n      gauge({ name: 'memory total MB', amount: Bytes.toMb(totalmem) });\n      gauge({ name: 'memory free MB', amount: Bytes.toMb(freemem) });\n      gauge({ name: 'memory used MB', amount: Bytes.toMb(usedmem) });\n\n      const memoryUsage = process.memoryUsage();\n      gauge({ name: 'node memory mb rss', amount: Bytes.toMb(memoryUsage.rss) });\n      gauge({ name: 'node memory mb heapTotal', amount: Bytes.toMb(memoryUsage.heapTotal) });\n      gauge({ name: 'node memory mb heapUsed', amount: Bytes.toMb(memoryUsage.heapUsed) });\n      gauge({ name: 'node memory mb external', amount: Bytes.toMb(memoryUsage.external) });\n\n      v8.getHeapSpaceStatistics().forEach(\n        ({ space_name, space_size, space_used_size, space_available_size, physical_space_size }) => {\n          const prefix = 'v8 heap kb ' + space_name + ' ';\n          gauge({ name: prefix + 'space_size', amount: Bytes.toKb(space_size) });\n          gauge({ name: prefix + 'space_used_size', amount: Bytes.toKb(space_used_size) });\n          gauge({ name: prefix + 'space_available_size', amount: Bytes.toKb(space_available_size) });\n          gauge({ name: prefix + 'physical_space_size', amount: Bytes.toKb(physical_space_size) });\n        },\n      );\n\n      gauge({ name: 'event loop ms max', amount: loopStats.max });\n      gauge({ name: 'event loop ms min', amount: loopStats.min });\n      gauge({ name: 'event loop ms avg', amount: loopStats.sum / loopStats.num });\n\n      fs.readFile('/proc/sys/fs/file-nr', (err, out) => {\n        if (!err) {\n          const fileNrParts = out.toString().replace(/\\n/g, '').split(' ');\n          const fileHandles = parseInt(fileNrParts[0], 10);\n          gauge({ name: 'file-nr allocated file handles', amount: fileHandles });\n        }\n      });\n    }\n  },\n};\n","import { MonitorPlugin } from '@zg-rentals/monitor-base';\nimport type { GaugeOptions, IncrementOptions } from '@zg-rentals/monitor-base';\nimport type { Logger } from '@zg-rentals/particles-js-base-logger';\nimport { Pontoon } from '@zg-rentals/pontoon';\nimport { NodeUtil } from '@zg-rentals/particles-js-utils';\nimport type { WebappInstance } from '@zg-rentals/pontoon';\n\nexport interface PontoonHeartbeatPluginArgs {\n  api: string;\n  apiKey: string;\n  logger?: Logger;\n  webappName: string;\n  startupDate: number | Date | string;\n  buildDate: number | Date | string;\n  buildId?: number;\n  commitId?: string;\n  gitBranch?: string;\n  propertiesFilePath?: string;\n  processManagerId?: string;\n}\n\nconst HEARTBEAT_INTERVAL_MS = 5_000;\nconst DEFAULT_PROPERTIES_FILE_PATH = '/hotpads/config/server.properties';\nconst REQUIRED_ARGS = ['api', 'apiKey', 'webappName', 'buildId', 'commitId', 'gitBranch', 'startupDate', 'buildDate'];\n\nexport class PontoonHeartbeatPlugin extends MonitorPlugin {\n  pontoon: Pontoon;\n  appData: WebappInstance;\n  logger?: Logger;\n  heartbeat?: NodeJS.Timeout;\n\n  constructor({\n    api,\n    apiKey,\n    webappName,\n    startupDate,\n    buildDate,\n    buildId = 0,\n    commitId = '',\n    gitBranch = '',\n    logger,\n    propertiesFilePath = DEFAULT_PROPERTIES_FILE_PATH,\n    processManagerId = process.env.pm_id,\n  }: PontoonHeartbeatPluginArgs) {\n    super({\n      logger,\n      pluginName: 'NodePontoonPlugin',\n    });\n\n    const { serverProperties, envProperties } = new NodeUtil.EnvironmentUtil(propertiesFilePath, {\n      appName: webappName,\n    });\n    const serverName = serverProperties.name || '';\n    const containerIdMatch = envProperties.hostname.match(/-\\d+$/);\n    const containerId = containerIdMatch ? containerIdMatch[0] : '';\n    const processManagerIdSuffix = processManagerId ? `-${processManagerId}` : '';\n\n    this.appData = {\n      api,\n      apiKey,\n      webappName,\n      serverName: `${serverName}${containerId}${processManagerIdSuffix}`,\n      serverType: serverProperties.type,\n      serverPublicIp: serverProperties.publicIp,\n      serverPrivateIp: serverProperties.privateIp,\n      buildId: buildId.toString(),\n      commitId,\n      gitBranch,\n      startupDate: this.formatDate(startupDate),\n      buildDate: this.formatDate(buildDate),\n    };\n\n    const missingArgs = REQUIRED_ARGS.filter((arg) => this.appData[arg as keyof WebappInstance] === undefined);\n    if (missingArgs.length) {\n      const errorMessage = `${this.pluginName} plugin missing required arg(s): ${missingArgs.join(', ')}`;\n      if (this.logger) {\n        this.logger.error(errorMessage);\n      }\n      throw new Error(errorMessage);\n    }\n\n    this.pontoon = new Pontoon({ api, apiKey });\n  }\n\n  initHeartbeat() {\n    this.heartbeat = setInterval(() => {\n      this.pontoon.addHeartbeat({\n        ...this.appData,\n        refreshedLast: this.formatDate(Date.now()),\n      });\n    }, HEARTBEAT_INTERVAL_MS);\n  }\n\n  onInitialize(increment: (i: IncrementOptions) => void, gauge: (g: GaugeOptions) => void, logger?: Logger) {\n    this.logger = this.logger || logger;\n    this.initHeartbeat();\n  }\n\n  async onShutdown() {\n    if (this.heartbeat) {\n      clearInterval(this.heartbeat);\n      delete this.heartbeat;\n    }\n    await this.pontoon.removeHeartbeat({\n      webappName: this.appData.webappName,\n      serverName: this.appData.serverName,\n    });\n  }\n\n  formatDate(date: string | Date | number = new Date()): string {\n    if (!(date instanceof Date)) {\n      date = new Date(date);\n    }\n    return date.toISOString();\n  }\n}\n","export * from './pontoon-reporter';\nexport * from './log-reporter';\n","import type { Logger } from '@zg-rentals/particles-js-base-logger';\nimport type { LogLevel } from '@zg-rentals/monitor-base';\nimport type { Request } from 'express';\nimport { LogReporter } from '@zg-rentals/monitor-base';\n\nexport class NodeLogReporter extends LogReporter {\n  enableRequestLogs: boolean;\n\n  constructor({\n    logger,\n    level = 'warn',\n    enableRequestLogs = true,\n    sampleRate,\n  }: {\n    logger?: Logger;\n    level?: LogLevel;\n    enableRequestLogs?: boolean;\n    sampleRate?: number;\n  } = {}) {\n    super({\n      logger,\n      level,\n      sampleRate,\n    });\n\n    this.enableRequestLogs = enableRequestLogs;\n  }\n\n  onRequest(req: Request) {\n    if (this.enableRequestLogs && this.log && (this.sampleRate === 1 || Math.random() <= this.sampleRate)) {\n      this.log(`${req.method}: ${req.url}`);\n    }\n\n    return Promise.resolve();\n  }\n}\n","import type { MetricFnInterface, MetricOptions } from '@zg-rentals/monitor-base';\nimport type { Logger } from '@zg-rentals/particles-js-base-logger';\nimport type { MetricAlert } from '@zg-rentals/pontoon';\nimport type { Request, Response } from 'express';\nimport { MonitorReporter, StatController } from '@zg-rentals/monitor-base';\nimport { Pontoon } from '@zg-rentals/pontoon';\nimport { NodeUtil } from '@zg-rentals/particles-js-utils';\nimport onHeaders from 'on-headers';\n\nexport interface NodeMonitorPontoonReporterArgs {\n  api: string;\n  apiKey: string;\n  logger?: Logger;\n  webappName: string;\n  propertiesFilePath?: string;\n  processManagerId?: string;\n  sampleRate?: number;\n}\n\nexport interface PontoonMetricFnInterface extends MetricFnInterface {\n  name: string;\n  amount: number;\n  options?: MetricOptions;\n}\n\nconst DEFAULT_PROPERTIES_FILE_PATH = '/hotpads/config/server.properties';\n\nexport class NodeMonitorPontoonReporter extends MonitorReporter {\n  pontoon: Pontoon;\n  intervals: Record<string, NodeJS.Timeout> = {};\n  logger?: Logger;\n  webappName: string;\n  serverName: string;\n  stats: StatController;\n  registeredAlerts: Record<string, boolean> = {};\n\n  constructor({\n    api,\n    apiKey,\n    webappName,\n    logger,\n    propertiesFilePath = DEFAULT_PROPERTIES_FILE_PATH,\n    processManagerId = process.env.pm_id,\n    sampleRate,\n  }: NodeMonitorPontoonReporterArgs) {\n    super({\n      logger,\n      reporterName: 'NodePontoonReporter',\n      sampleRate,\n    });\n\n    const { serverProperties, envProperties } = new NodeUtil.EnvironmentUtil(propertiesFilePath, {\n      appName: webappName,\n    });\n    const serverName = serverProperties.name || '';\n    const containerIdMatch = envProperties.hostname.match(/-\\d+$/);\n    const containerId = containerIdMatch ? containerIdMatch[0] : '';\n    const processManagerIdSuffix = processManagerId ? `-${processManagerId}` : '';\n\n    this.webappName = webappName;\n    this.serverName = `${serverName}${containerId}${processManagerIdSuffix}`;\n\n    if (api === undefined || apiKey === undefined || webappName === undefined) {\n      const errorMessage = `${this.reporterName} reporter missing required arg(s)`;\n      this.logger?.error(errorMessage);\n      throw new Error(errorMessage);\n    }\n\n    this.pontoon = new Pontoon({ api, apiKey });\n\n    this.stats = new StatController({\n      limit: 100,\n      onRecord: (stat) => this.pontoon.addStatUrl({ stat, serviceName: webappName, api }),\n    });\n  }\n\n  onInitialize(logger?: Logger) {\n    this.logger = this.logger || logger;\n  }\n\n  shouldSave(options: Record<string, unknown> = {}) {\n    const random = Math.random();\n    return random <= this.sampleRate && (typeof options.sampleRate !== 'number' || random <= options.sampleRate);\n  }\n\n  async onIncrement({ name, amount = 1, options }: PontoonMetricFnInterface) {\n    if (options?.alert) {\n      this.registerAlert({\n        metricName: name,\n        metricType: 'COUNT',\n        ...options.alert,\n      } as MetricAlert);\n    }\n    if (this.shouldSave(options)) {\n      this.logger?.info(`incrementing ${name} by ${amount}`);\n      await this.pontoon\n        .sendCounts({\n          serviceName: this.webappName,\n          serverName: this.serverName,\n          counts: {\n            [Date.now()]: {\n              [name]: amount,\n            },\n          },\n        })\n        .then(() => {\n          this.stats.record({ name, count: amount });\n          return;\n        })\n        .catch((e) => this.onError({ error: e }));\n    }\n  }\n\n  async onGauge({ name, amount, options }: PontoonMetricFnInterface): Promise<void> {\n    if (options?.alert) {\n      this.registerAlert({\n        metricName: name,\n        metricType: 'GAUGE',\n        ...options.alert,\n      } as MetricAlert);\n    }\n    if (this.shouldSave(options)) {\n      this.logger?.info(`${name}, ${amount}`);\n      await this.pontoon\n        .sendGauges({\n          serviceName: this.webappName,\n          serverName: this.serverName,\n          gauges: {\n            [name]: [[Date.now(), amount]],\n          },\n        })\n        .then(() => this.stats.record({ name, count: amount }))\n        .catch((e) => this.onError({ error: e }));\n    }\n  }\n\n  async onError({ error }: { error: Error }) {\n    this.logger?.error(error);\n  }\n\n  registerAlert(alertOptions: MetricAlert) {\n    if (this.registeredAlerts[alertOptions.metricName]) {\n      return;\n    }\n    if (!alertOptions.periodMs || !alertOptions.alertFrequencyMinutes) {\n      this.logger?.error('could not register alert, missing frequency information');\n      return;\n    }\n\n    if (alertOptions.minThreshold === undefined && alertOptions.maxThreshold === undefined) {\n      this.logger?.error('could not register alert, no min or max threshold');\n      return;\n    }\n\n    this.logger?.debug(`registering metric alert: ${alertOptions.metricType} ${alertOptions.metricName}`);\n    this.registeredAlerts[alertOptions.metricName] = true;\n    return this.pontoon.registerAlert(alertOptions);\n  }\n\n  onRequest(req: Request, res: Response) {\n    this.onIncrement({ name: 'request', amount: 1 });\n    this.onIncrement({ name: `request method ${req.method}`, amount: 1 });\n    onHeaders(res, () => {\n      const statusCode = Number.isFinite(res.statusCode) ? res.statusCode : 'UNKNOWN';\n      this.onIncrement({ name: `response status code ${statusCode}`, amount: 1 });\n    });\n  }\n}\n","import type { Logger } from '@zg-rentals/particles-js-base-logger';\nimport { Utils } from '@zg-rentals/particles-js-utils';\nimport type express from 'express';\nimport os from 'os';\nimport readPkg from 'read-pkg';\nimport v8 from 'v8';\n\nexport const BAD_SHUTDOWN_TOKEN_MSG = 'invalid shutdown token provided.';\nexport const GOOD_STATUS_CODE = 200;\nexport const SHUTDOWN_STATUS_CODE = 555;\n\nexport interface onPingInterface {\n  hasAccess: boolean;\n  isProtected: boolean;\n  response: { [key: string]: unknown };\n}\n\nexport interface HealthcheckInterface {\n  shutdownToken?: string;\n  accessToken?: string;\n  protectedQueryParams?: Array<string>;\n  onPing?: ({ hasAccess, isProtected, response }: onPingInterface) => unknown;\n  logger?: Logger;\n  buildNumber: string | number;\n  maxMemoryThresholdMb?: number;\n}\n\nexport interface EnvironmentData {\n  node_version: string;\n  NODE_ENV: string;\n  gitCommit: string;\n  gitUsername: string;\n  gitBranch: string;\n  buildDate: string;\n}\n\nexport interface ServerData {\n  host: string;\n  uptime: number;\n  memory_used: NodeJS.MemoryUsage;\n  memory_total: number;\n  memory_free: number;\n  average_load: Array<number>;\n  heap: v8.HeapInfo;\n}\n\nexport interface DependencyMap {\n  [key: string]: string;\n}\n\nexport interface PackageJson {\n  name: string;\n  alias?: string;\n  version?: string;\n  main?: string;\n  module?: string;\n  bin?: string | Record<string, string>;\n  scripts?: Record<string, string>;\n  sideEffects?: boolean;\n  publishConfig?: Record<string, string>;\n  private?: boolean;\n  dependencies?: DependencyMap;\n  devDependencies?: DependencyMap;\n  peerDependencies?: DependencyMap;\n  workspaces?: Array<string>;\n}\n\nexport type ConfidentialData = EnvironmentData & ServerData & Pick<PackageJson, 'dependencies' | 'devDependencies'>;\n\nexport class Healthcheck {\n  shutdownToken?: string;\n  protectedQueryParams: Array<string>;\n  accessToken?: string;\n  isShuttingDown: boolean;\n  logger?: Logger;\n  packageJson: readPkg.NormalizedPackageJson;\n  buildNumber: number;\n  onPing?: ({ hasAccess, isProtected, response }: onPingInterface) => unknown;\n  maxMemoryThresholdMb: number;\n\n  constructor({\n    logger,\n    shutdownToken,\n    accessToken,\n    buildNumber = 0,\n    onPing,\n    protectedQueryParams = ['runscope', 'sonar', 'liveliness', 'site_liveliness'],\n    maxMemoryThresholdMb = 5_120,\n  }: HealthcheckInterface) {\n    this.logger = logger;\n    this.accessToken = accessToken;\n    this.shutdownToken = shutdownToken;\n    this.protectedQueryParams = protectedQueryParams;\n    this.isShuttingDown = false;\n    this.buildNumber = Number(buildNumber);\n    this.setupPm2GracefulExit();\n    this.packageJson = readPkg.sync();\n    this.onPing = onPing;\n    this.maxMemoryThresholdMb = maxMemoryThresholdMb;\n\n    this.logger?.info('instantiating healthcheck');\n  }\n\n  setupPm2GracefulExit = (): void => {\n    if (Utils.isProd() && process && process.send) {\n      this.logger?.debug('setting up pm2 graceful exit');\n\n      process.on('message', (message: { topic?: string; [key: string]: unknown }) => {\n        this.logger?.warn(message, 'healthcheck received a process message');\n\n        const { topic } = message;\n\n        if (topic === 'TRIGGER_SHUTDOWN') {\n          this.isShuttingDown = true;\n        }\n      });\n    }\n  };\n\n  bytesToMb(bytes: number): number {\n    if (bytes === 0) return 0;\n\n    return bytes / 1024 / 1024;\n  }\n\n  getPackageJsonData(): Pick<PackageJson, 'dependencies' | 'devDependencies'> {\n    const data: { dependencies: DependencyMap; devDependencies: DependencyMap } = {\n      dependencies: {},\n      devDependencies: {},\n    };\n\n    const { dependencies = {}, devDependencies = {} } = this.packageJson;\n\n    for (const dependency in dependencies) {\n      if (dependency.startsWith('@zg-rentals/')) {\n        data.dependencies[dependency] = dependencies[dependency];\n      }\n    }\n    for (const dependency in devDependencies) {\n      if (dependency.startsWith('@zg-rentals/')) {\n        data.devDependencies[dependency] = devDependencies[dependency];\n      }\n    }\n\n    return data;\n  }\n\n  getEnvironmentData(): EnvironmentData {\n    return {\n      NODE_ENV: process.env.NODE_ENV || 'development',\n      node_version: process.versions.node,\n      gitCommit: process.env.GIT_COMMIT || '',\n      gitUsername: process.env.GIT_COMMIT_AUTHOR || '',\n      gitBranch: process.env.BRANCH_NAME || '',\n      buildDate: process.env.BUILD_TIME || '',\n    };\n  }\n\n  getServerData(): ServerData {\n    return {\n      host: os.hostname(),\n      uptime: process.uptime(),\n      memory_used: process.memoryUsage(),\n      memory_total: os.totalmem(),\n      memory_free: os.freemem(),\n      average_load: os.loadavg(),\n      heap: v8.getHeapStatistics(),\n    };\n  }\n\n  hasAccess = (req: express.Request): boolean => {\n    if (!this.accessToken) return false;\n\n    if (req.query.accessToken === this.accessToken) return true;\n\n    return false;\n  };\n\n  isMemoryOverloaded(memoryUsage: NodeJS.MemoryUsage): boolean {\n    if (!memoryUsage || !memoryUsage.rss) {\n      return false;\n    }\n\n    const mb = this.bytesToMb(memoryUsage.rss);\n\n    if (mb >= Number(this.maxMemoryThresholdMb)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  aggregateConfidentialData = (req: express.Request): ConfidentialData | undefined => {\n    const data = {\n      ...this.getPackageJsonData(),\n      ...this.getEnvironmentData(),\n      ...this.getServerData(),\n    };\n\n    if (this.isMemoryOverloaded(data.memory_used)) {\n      this.isShuttingDown = true;\n    }\n\n    if (!this.hasAccess(req)) {\n      return;\n    }\n\n    return data;\n  };\n\n  generateBaseResponse(): { name: string; buildNumber: number } {\n    return {\n      name: this.packageJson.name,\n      buildNumber: this.buildNumber,\n    };\n  }\n\n  shouldIgnoreShutdown(req: express.Request): boolean {\n    if (typeof req.query.mode === 'string' && this.protectedQueryParams.includes(req.query.mode)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  getStatusCode = (req: express.Request): number => {\n    if (this.isShuttingDown) {\n      if (this.shouldIgnoreShutdown(req)) {\n        this.logger?.warn(`app is ignoring shutdown mode, returning status code=${GOOD_STATUS_CODE}`);\n        return GOOD_STATUS_CODE;\n      }\n      this.logger?.warn(`app is in shutdown mode, returning status code=${SHUTDOWN_STATUS_CODE}`);\n\n      return SHUTDOWN_STATUS_CODE;\n    } else {\n      return GOOD_STATUS_CODE;\n    }\n  };\n\n  check = (req: express.Request, res: express.Response): void => {\n    try {\n      const confidentialData = this.aggregateConfidentialData(req);\n      const baseResponse = this.generateBaseResponse();\n      const status = this.getStatusCode(req);\n\n      const response = {\n        ...confidentialData,\n        ...baseResponse,\n      };\n\n      if (this.onPing) {\n        res.status(status).json(\n          this.onPing({\n            hasAccess: this.hasAccess(req),\n            isProtected: this.shouldIgnoreShutdown(req),\n            response,\n          }),\n        );\n      } else {\n        res.status(status).json(response);\n      }\n    } catch (err: any) {\n      res.status(500).json({\n        error: err.message,\n        success: false,\n      });\n    }\n  };\n\n  shutdown = (req: express.Request, res: express.Response): void => {\n    const reqShutdownToken = req.query.secretToken;\n    const isNotEmpty = reqShutdownToken !== '';\n    const isDefined = typeof reqShutdownToken !== 'undefined' && typeof this.shutdownToken !== 'undefined';\n\n    if (isDefined && isNotEmpty && reqShutdownToken === this.shutdownToken) {\n      this.isShuttingDown = true;\n      this.logger?.warn('successful shutdownToken received, putting app in shutdown mode');\n\n      res.status(200).json({\n        success: true,\n        statusCode: SHUTDOWN_STATUS_CODE,\n      });\n    } else {\n      this.logger?.warn('incorrect or missing shutdown token');\n\n      res.status(500).json({\n        success: false,\n        error: BAD_SHUTDOWN_TOKEN_MSG,\n      });\n    }\n  };\n}\n","import { getBrand } from './getBrand';\nimport { getIpsFromReq, selectValidIp } from './getIp';\nimport { isProd, isStaging } from './environmentUtils';\nimport { safeCreateLogger, safeUseLogger } from './safeCreateLogger';\nimport { deprecateMessage } from './deprecate';\nimport { messages } from './constants';\nimport { Batch } from './Batch';\nimport { axiosErrorHandler } from './http';\n\nexport { default as TestUtility } from './testUtils';\nexport { default as ShutdownListener } from './shutdownListener';\n\nexport * from './http';\n\nexport const Utils = {\n  getBrand,\n  // getIp is legacy export\n  getIp: selectValidIp,\n  selectValidIp,\n  getIpsFromReq,\n  isProd,\n  isStaging,\n  safeCreateLogger,\n  safeUseLogger,\n  deprecateMessage,\n  messages,\n  axiosErrorHandler,\n  Batch,\n};\n\nexport type { fakeLogger, ParticlesLogger } from './safeCreateLogger';\nexport type { BatchInterface } from './Batch';\n\n// server only\nexport * as NodeUtil from './node';\n","import os from 'os';\n\nimport { properties } from '../helpers/propertiesReader';\n\ntype environment = 'sherman' | 'comet1' | 'node-int' | 'production' | 'local' | 'ttest' | 'ztest' | 'other' | 'jenkins';\n\nexport interface ServerProperties {\n  name: string;\n  type: string;\n  publicIp: string;\n  privateIp: string;\n}\n\nexport interface EnvProperties {\n  server: ServerProperties;\n  hostname: string;\n  id: string;\n  environment: environment;\n}\n\nexport interface EnvironmentUtilInterface {\n  appName: string;\n}\n\nexport class EnvironmentUtil {\n  public serverProperties: ServerProperties;\n  public envProperties: EnvProperties;\n\n  constructor(propertiesFilePath: string, { appName }: EnvironmentUtilInterface) {\n    try {\n      const readProperties = properties(propertiesFilePath);\n\n      const sp: ServerProperties = {\n        name: String(readProperties.get('server.name')),\n        type: String(readProperties.get('server.type')),\n        publicIp: String(readProperties.get('server.publicIp')),\n        privateIp: String(readProperties.get('server.privateIp')),\n      };\n\n      this.serverProperties = sp;\n    } catch (err) {\n      this.serverProperties = {\n        name: os.hostname(),\n        type: appName,\n        publicIp: '',\n        privateIp: '',\n      };\n    }\n\n    const hostname = os.hostname();\n\n    this.envProperties = {\n      server: this.serverProperties,\n      hostname,\n      id: `${this.serverProperties.name}-${hostname}`,\n      environment: this.guessEnvironment(),\n    };\n  }\n\n  guessEnvironment(): environment {\n    const { name } = this.serverProperties;\n\n    if (name.includes('node-int')) {\n      return 'node-int';\n    } else if (name.includes('production')) {\n      return 'production';\n    } else if (name.includes('comet')) {\n      return 'comet1';\n    } else if (name.includes('ttest')) {\n      return 'ttest';\n    } else if (name.includes('ztest')) {\n      return 'ztest';\n    } else if (name.includes('sherman')) {\n      return 'sherman';\n    } else if (name.includes('jenkins')) {\n      return 'jenkins';\n    } else {\n      return 'other';\n    }\n  }\n  // any non-local server that is not production\n  isStaging() {\n    const { environment } = this.envProperties;\n\n    return ['node-int', 'comet1', 'ttest', 'ztest', 'sherman'].indexOf(environment) > -1;\n  }\n\n  // production servers\n  isProduction() {\n    const { environment } = this.envProperties;\n\n    return environment === 'production';\n  }\n\n  isSherman() {\n    const { environment } = this.envProperties;\n\n    return environment === 'sherman';\n  }\n\n  isJenkins() {\n    const { environment } = this.envProperties;\n\n    return environment === 'jenkins';\n  }\n}\n\nexport default EnvironmentUtil;\n","import { post } from './pontoon';\nimport type { MetricCounts, MetricGauges } from './request-types';\n\nexport interface CountBatch {\n  api?: string;\n  apiKey?: string;\n  headers?: Record<string, string>;\n  counts: MetricCounts['counts'];\n}\n\nexport interface GaugeBatch {\n  api?: string;\n  apiKey?: string;\n  headers?: Record<string, string>;\n  gauges: MetricGauges['gauges'];\n}\n\nexport interface Batch<K> {\n  [serverName: string]: {\n    [serviceName: string]: K;\n  };\n}\n\nexport const BATCH_THROTTLE_MS = 5_000;\n\nexport function throttle(fn: () => void) {\n  let timeout: ReturnType<typeof setTimeout> | null = null;\n  return () => {\n    if (timeout !== null) {\n      return;\n    }\n    timeout = setTimeout(() => {\n      timeout = null;\n      fn();\n    }, BATCH_THROTTLE_MS);\n  };\n}\n\nexport const batches: {\n  count: Batch<CountBatch>;\n  gauge: Batch<GaugeBatch>;\n} = {\n  count: {},\n  gauge: {},\n};\n\nexport function makeThrottledMetricRequest(type: 'count' | 'gauge') {\n  const pluralType = type + 's';\n  return throttle(() => {\n    const batch = batches[type];\n    Object.keys(batch).forEach((serverName) => {\n      Object.keys(batch[serverName]).forEach((serviceName) => {\n        const serviceBatch = batch[serverName][serviceName];\n        const payload: Record<string, unknown> = {\n          api: serviceBatch.api,\n          apiKey: serviceBatch.apiKey,\n          headers: serviceBatch.headers,\n          serverName,\n          serviceName,\n          // counts: serviceBatch.counts, OR\n          // gauges: serviceBatch.gauges\n          [pluralType]: serviceBatch[pluralType as keyof typeof serviceBatch],\n        };\n        // browserTime is used in browser requests only, to compensate for inaccurate browser clocks\n        if (typeof window !== 'undefined') {\n          payload.browserTime = Date.now();\n        }\n        post(type + 'Publisher/v2/add', payload);\n      });\n    });\n    batches[type] = {};\n  });\n}\n\nexport const throttledSendCounts = makeThrottledMetricRequest('count');\nexport const throttledSendGauges = makeThrottledMetricRequest('gauge');\n\nexport function getBatch<BatchType>(metrics: MetricCounts | MetricGauges, type: 'count' | 'gauge'): BatchType {\n  const { serverName = '', serviceName = '', api, apiKey, headers = {} } = metrics;\n  const batch = batches[type];\n  batch[serverName] = batch[serverName] || {};\n  batch[serverName][serviceName] = batch[serverName][serviceName] || {\n    api,\n    apiKey,\n    headers,\n    [type + 's']: {},\n  };\n  const serviceBatch: unknown = batch[serverName][serviceName];\n  return serviceBatch as BatchType;\n}\n\nexport function mergeCounts(batchedCounts: MetricCounts['counts'], newCounts: MetricCounts['counts']) {\n  Object.keys(newCounts).forEach((ms) => {\n    batchedCounts[ms] = batchedCounts[ms] || {};\n    Object.keys(newCounts[ms]).forEach((name) => {\n      batchedCounts[ms][name] = batchedCounts[ms][name] || 0;\n      batchedCounts[ms][name] += newCounts[ms][name];\n    });\n  });\n}\n\nexport function mergeGauges(batchedGauges: MetricGauges['gauges'], newGauges: MetricGauges['gauges']) {\n  Object.keys(newGauges).forEach((metricName) => {\n    batchedGauges[metricName] = batchedGauges[metricName] || [];\n    newGauges[metricName].forEach(([timestamp, value]) => {\n      const existingGauge = batchedGauges[metricName].find((point) => point[0] === timestamp);\n      if (existingGauge) {\n        existingGauge[1] += value;\n      } else {\n        batchedGauges[metricName].push([timestamp, value]);\n      }\n    });\n  });\n}\n\nexport async function batchCounts(metrics: MetricCounts) {\n  const batch = getBatch<CountBatch>(metrics, 'count');\n  if (metrics.headers) {\n    Object.assign(batch.headers, metrics.headers);\n  }\n  mergeCounts(batch.counts, metrics.counts);\n  throttledSendCounts();\n}\n\nexport async function batchGauges(metrics: MetricGauges) {\n  const batch = getBatch<GaugeBatch>(metrics, 'gauge');\n  if (metrics.headers) {\n    Object.assign(batch.headers, metrics.headers);\n  }\n  mergeGauges(batch.gauges, metrics.gauges);\n  throttledSendGauges();\n}\n","export * from './pontoon';\nexport * from './request-types';\nexport * from './response-types';\nexport * from './batched-metrics';\n","import axios from 'axios';\nimport type {\n  HeartbeatDescriptor,\n  MetricAlert,\n  MetricCounts,\n  MetricGauges,\n  MetricQueryRequest,\n  MetricWindow,\n  PontoonOptions,\n  ServiceConfigDescriptor,\n  ServiceConfiguration,\n  StatUrlOptions,\n  WebappBatchDescriptor,\n  WebappDescriptor,\n  WebappInstance,\n} from './request-types';\nimport { batchCounts, batchGauges } from './batched-metrics';\nimport type {\n  GenericResponse,\n  MetricQueryDataResponse,\n  MetricWindowResponse,\n  ServiceConfigResponse,\n  WebappInstanceResponse,\n} from './response-types';\nimport type { Stat } from '@zg-rentals/monitor-base';\n\nexport async function post<K>(apiPath: string, body: K & PontoonOptions) {\n  const { api, apiKey, headers, ...data } = body;\n  const response = await axios.post(`${api}/pontoon/api/${apiPath}`, data, {\n    params: { apiKey },\n    headers,\n  });\n  return response.data;\n}\n\nexport async function get<K>(apiPath: string, opts: K & PontoonOptions) {\n  const { api, headers, ...params } = opts;\n  const response = await axios.get(`${api}/pontoon/api/${apiPath}`, {\n    params,\n    headers,\n  });\n  return response.data;\n}\n\nexport function sendCounts(metrics: MetricCounts): Promise<void> {\n  return batchCounts(metrics);\n}\n\nexport function sendGauges(metrics: MetricGauges): Promise<void> {\n  return batchGauges(metrics);\n}\n\nexport function addServiceConfig(serviceConfig: ServiceConfiguration): Promise<GenericResponse> {\n  return post('externalServiceConfiguration/add', serviceConfig);\n}\n\nexport function getServiceConfig(descriptor: ServiceConfigDescriptor): Promise<ServiceConfigResponse> {\n  return get('externalServiceConfiguration/get', descriptor);\n}\n\nexport async function getAllServiceConfigs(options: PontoonOptions): Promise<Array<ServiceConfigResponse>> {\n  const results = await get('externalServiceConfiguration/getAll', options);\n  return results.batch;\n}\n\nexport function areGaugesDelayed(options: PontoonOptions): Promise<boolean> {\n  return get('gaugeAggregation/isDelayed', options);\n}\n\nexport function registerAlert(alert: MetricAlert): Promise<void> {\n  return post('metric/alert/register', alert);\n}\n\nexport function getWindow(metricWindow: MetricWindow): Promise<MetricWindowResponse> {\n  return post('metric/getWindow', metricWindow);\n}\n\nexport function query(metricQuery: MetricQueryRequest): Promise<MetricQueryDataResponse> {\n  return post('metric/query', metricQuery);\n}\n\nexport function addHeartbeat(webApp: WebappInstance): Promise<GenericResponse> {\n  webApp.servletContainerVersion = webApp.servletContainerVersion || '';\n  webApp.servletContextPath = webApp.servletContextPath || '';\n  return post('webappInstancePublisher/add', webApp);\n}\n\nexport function removeHeartbeat(descriptor: HeartbeatDescriptor): Promise<GenericResponse> {\n  return get('webappInstancePublisher/delete', descriptor);\n}\n\nexport async function getAllWebapps(descriptor: WebappBatchDescriptor): Promise<Array<WebappInstanceResponse>> {\n  const results = await get('webappInstanceReader/get', descriptor);\n  return results.dtos;\n}\n\nexport function getWebapp(webApp: WebappDescriptor): Promise<WebappInstanceResponse> {\n  return get('webappInstanceReader/getInstance', webApp);\n}\n\nexport function addStatUrl({ stat, serviceName, api }: StatUrlOptions) {\n  const statUrlParams = {\n    periodMs: 300000,\n    frequency: 'period',\n    regexSplitLimit: 50,\n    showMinMax: false,\n    entries: [\n      {\n        accountName: serviceName,\n        metricInput: stat.name,\n        serviceName,\n        serverName: 'All',\n        splitServer: false,\n      },\n    ],\n  };\n  const queryString = encodeURIComponent(JSON.stringify(statUrlParams));\n  stat.url = `${api}/pontoon/metrics/viewMetrics/view?q=${queryString}`;\n  return stat;\n}\n\n// exported functions may be called directly or called as methods of a Pontoon instance\nexport class Pontoon {\n  options: PontoonOptions;\n\n  constructor(options: PontoonOptions) {\n    if (typeof window === 'undefined' && !(options.api && options.apiKey)) {\n      throw new Error(\"Can't query Pontoon without the api and apiKey options.\");\n    }\n    this.options = options;\n  }\n\n  // Wraps a function so that the `api` and `apiKey` options will be added\n  // to whatever object is passed in. Without typing it would look like this:\n  // addOpts: request => options => request({ ...this.options, ...options })\n  private addOpts<T, S>(request: (options: T) => S) {\n    return (options: T) =>\n      request({\n        ...this.options,\n        ...options,\n      });\n  }\n\n  sendCounts = this.addOpts<MetricCounts, Promise<void>>(sendCounts);\n  addServiceConfig = this.addOpts<ServiceConfiguration, Promise<GenericResponse>>(addServiceConfig);\n  getServiceConfig = this.addOpts<ServiceConfigDescriptor, Promise<ServiceConfigResponse>>(getServiceConfig);\n  getAllServiceConfigs = this.addOpts<PontoonOptions, Promise<Array<ServiceConfigResponse>>>(getAllServiceConfigs);\n  areGaugesDelayed = this.addOpts<PontoonOptions, Promise<boolean>>(areGaugesDelayed);\n  sendGauges = this.addOpts<MetricGauges, Promise<void>>(sendGauges);\n  registerAlert = this.addOpts<MetricAlert, Promise<void>>(registerAlert);\n  getWindow = this.addOpts<MetricWindow, Promise<MetricWindowResponse>>(getWindow);\n  query = this.addOpts<MetricQueryRequest, Promise<MetricQueryDataResponse>>(query);\n  addHeartbeat = this.addOpts<WebappInstance, Promise<GenericResponse>>(addHeartbeat);\n  removeHeartbeat = this.addOpts<HeartbeatDescriptor, Promise<GenericResponse>>(removeHeartbeat);\n  getAllWebapps = this.addOpts<WebappBatchDescriptor, Promise<Array<WebappInstanceResponse>>>(getAllWebapps);\n  getWebapp = this.addOpts<WebappDescriptor, Promise<WebappInstanceResponse>>(getWebapp);\n  addStatUrl = this.addOpts<StatUrlOptions, Stat>(addStatUrl);\n}\n","import env from 'env-var';\n\nimport log from '../../server/utils/log';\nimport type { Logger } from '@zg-rentals/particles-js-base-logger';\n\nimport {\n  NodeMonitor,\n  NodeMonitorPontoonReporter,\n  NodeVitalsPlugin,\n  PontoonHeartbeatPlugin,\n} from '@zg-rentals/monitor-node';\n\nconst webappName = env.get('APP_NAME').asString();\nconst gitCommit = env.get('GIT_SHA').asString();\nconst pontoonApi = env.get('PONTOON_API').asString();\nconst pontoonApiKey = env.get('PONTOON_API_KEY').asString();\nconst gitBranch = env.get('GIT_BRANCH').asString();\nconst startupDate = env.get('APP_START_TIME').asInt() || Date.now();\n\n// I'm using presence or lack of pontoon env vars to indicate env support -- could also be done through new env var PONTOON_ENABLED\nconst pontoonEnabled = pontoonApi && pontoonApiKey;\n\nconst plugins = [];\nconst reporters = [];\n\nconst monitorLogger = log.child('monitor-node') as Logger;\n\nif (pontoonEnabled) {\n  const pontoonReporter = new NodeMonitorPontoonReporter({\n    logger: monitorLogger,\n    webappName: webappName as string,\n    api: pontoonApi,\n    apiKey: pontoonApiKey,\n  });\n  reporters.push(pontoonReporter);\n\n  const pontoonHeartbeatPlugin = new PontoonHeartbeatPlugin({\n    logger: monitorLogger,\n    webappName: webappName as string,\n    api: pontoonApi,\n    apiKey: pontoonApiKey,\n    startupDate,\n    buildDate: typeof __BUILD_DATE__ === 'undefined' ? startupDate : parseInt(__BUILD_DATE__),\n    buildId: parseInt(__BUILD_NUMBER__),\n    commitId: gitCommit,\n    gitBranch,\n  });\n\n  plugins.push(pontoonHeartbeatPlugin);\n}\n\nconst nodeVitalsPlugin = new NodeVitalsPlugin({\n  logger: monitorLogger,\n  webappName: webappName as string,\n  buildNumber: parseInt(__BUILD_NUMBER__),\n  gitCommit,\n});\n\nplugins.push(nodeVitalsPlugin);\n\nconst nodeMonitor = new NodeMonitor({\n  logger: monitorLogger,\n  reporters,\n  plugins,\n});\n\nexport default nodeMonitor;\n","module.exports = require(\"core-js/modules/es.number.is-finite.js\");","module.exports = require(\"env-var\");","module.exports = require(\"event-loop-stats\");","module.exports = require(\"on-headers\");","module.exports = require(\"perf_hooks\");"],"mappings":"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A4DA;AAWA;AAQA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AAgBA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9BA;AAmFA;AAEA;AAEA;AACA;AACA;AAzFA;AAyGA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzHA;AA0IA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAtJA;AAwJA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AApLA;AAsLA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AA1MA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAjCA;AAAA;AAAA;AAmDA;AAEA;AACA;AAtDA;AAAA;AAAA;AAyDA;AACA;AACA;AAFA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5EA;AAAA;AAAA;AA+EA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAvFA;AAAA;AAAA;AA0FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AAnGA;AAAA;AAAA;AA8GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzHA;AAAA;AAAA;AA8IA;AACA;AACA;AAFA;AAIA;AAlJA;AAAA;AAAA;AAqJA;AACA;AACA;AACA;AACA;AACA;AA1JA;AACA;AADA;AAAA;;;;;;;;;;;;;ACrEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAmBA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClCA;AAEA;AAsBA;AAIA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAlCA;AAAA;AAAA;AAoCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxDA;AAAA;AAAA;AA0DA;AAEA;AACA;AACA;AA9DA;AAAA;AAAA;AAiEA;AAEA;AACA;AApEA;AAAA;AAAA;AAuEA;AAEA;AACA;AA1EA;AAAA;AAAA;AA6EA;AAEA;AACA;AAhFA;AACA;AADA;AAAA;AAmFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3GA;AAuBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AACA;AASA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AASA;AAAA;AAAA;AACA;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;AC5HA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AAgBA;AAUA;AAAA;AAAA;AACA;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AAAA;AAAA;AACA;AAFA;AACA;AAHA;AAEA;AAFA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AASA;AAAA;AAAA;AACA;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AACA;AAFA;AACA;AAHA;AAEA;AAFA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AASA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAKA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAKA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AANA;AAeA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAdA;AAAA;AAAA;AAaA;AACA;AAAA;AAAA;AAAA;AAKA;AAnBA;AACA;AADA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1HA;AAEA;AAGA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AACA;AACA;AACA;AAHA;AAMA;;;;;;;;;;;AClEA;;;;;;;;;;;;ACAA;;;;;;;;;;;;ACAA;;;;;;;;;;;;ACAA;;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}