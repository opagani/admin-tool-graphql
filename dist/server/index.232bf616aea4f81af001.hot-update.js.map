{"version":3,"file":"index.232bf616aea4f81af001.hot-update.js","sources":["webpack:///./app/graphql/SearchPolicies/PoliciesBuilder.ts","webpack:///./app/graphql/SearchPolicies/services/getSearchPolicies.ts"],"sourcesContent":["import type { Policies, Policy } from '../../../shared/generated-types/graphql';\n\nexport type UnformattedPolicy = Policy & { applicationId: string; leaseId: number; paymentId: number };\n\nconst formatPolicy = (policy: UnformattedPolicy): Policy => {\n  return {\n    ...policy,\n    applicationId: {\n      id: policy.applicationId,\n    },\n    leaseId: {\n      id: policy.leaseId,\n    },\n    paymentId: {\n      id: policy.paymentId,\n    },\n  };\n};\n\nexport const buildPoliciesFromResponse = (response: { policies?: Array<UnformattedPolicy> }): Policies => {\n  const formattedPolicies = response?.policies?.map((policy) => formatPolicy(policy)) || [];\n\n  return { policies: formattedPolicies };\n};\n","import axios from 'axios';\nimport log from '../../../server/utils/log';\nimport { tracer } from '../../../server/utils/tracer';\nimport { api } from '../../utils/api';\nimport { buildPoliciesFromResponse } from '../PoliciesBuilder';\nimport type { Policies } from '../../../../shared/generated-types/graphql';\nimport nodeMonitor from '../../../server/utils/nodeMonitor';\n\nconst getSearchPolicies = async (\n  searchType: string,\n  searchValue: string,\n  rentGuaranteeUserToken: string,\n  rentGuaranteeSessionToken: string,\n): Promise<Policies | null> => {\n  const response = await axios\n    .get(`${api.gql.searchPolicies}?searchType=${searchType}&searchValue=${searchValue}`, {\n      headers: {\n        Cookie: `rent-guaranteeUserToken=${rentGuaranteeUserToken}; rent-guaranteeSessionToken=${rentGuaranteeSessionToken}`,\n      },\n    })\n    .then((res) => {\n      console.log(res.data.data);\n      return res.data.data;\n    })\n\n    .catch((err) => {\n      log.error(`Network error fetching policy for ${searchType}: ${searchValue}: ${err}`);\n      // Log an error (using the class instance's logger):\n      nodeMonitor.increment({ name: 'getSearchPolicies failed', amount: 1 });\n      return null;\n    });\n\n  if (response) {\n    // Increment a count:\n    await nodeMonitor.increment({ name: 'getSearchPolicies viewed', amount: 1 });\n    return buildPoliciesFromResponse(response);\n  }\n\n  return null;\n};\n\nexport default tracer.wrap(getSearchPolicies);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;AACA;AAEA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AARA;AAYA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AADA;AADA;AAMA;AACA;AACA;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAvBA;AAMA;AACA;AAPA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AA0BA;AAAA;AAAA;AACA;AA3BA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAgCA;;;;A","sourceRoot":""}