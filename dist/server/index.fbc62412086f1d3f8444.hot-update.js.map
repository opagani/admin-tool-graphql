{"version":3,"file":"index.fbc62412086f1d3f8444.hot-update.js","sources":["webpack:////Users/opagani/projects/zillowgroup/rentals-js/node_modules/graphql-scalars/index.mjs","webpack:///./app/graphql/index.ts"],"sourcesContent":["import { GraphQLScalarType, Kind, GraphQLError, print, locatedError } from 'graphql';\n\nconst BigIntMock = () => BigInt(Number.MAX_SAFE_INTEGER);\r\nconst ByteMock = () => new Uint8Array([1988, 1981, 1965, 1963, 1959, 1955]);\r\nconst DateMock = () => '2007-12-03';\r\nconst Time = () => '10:15:30Z';\r\nconst DateTime = () => '2007-12-03T10:15:30Z';\r\nconst Timestamp = () => 1592577642;\r\nconst TimeZone = () => 'Etc/UTC';\r\nconst UtcOffset = () => '+03:00';\r\nconst Duration = () => 'P3Y6M4DT12H30M5S';\r\nconst LocalDate = () => '2020-07-19';\r\nconst LocalTime = () => '08:45:59';\r\nconst LocalEndTime = () => '24:00:00';\r\nconst EmailAddress = () => 'test@test.com';\r\nconst NegativeFloat = () => -123.45;\r\nconst NegativeInt = () => -123;\r\nconst NonEmptyString = () => 'string';\r\nconst NonNegativeFloat = () => 123.45;\r\nconst NonNegativeInt = () => 123;\r\nconst NonPositiveFloat = () => -123.45;\r\nconst NonPositiveInt = () => -123;\r\nconst PhoneNumber = () => '+17895551234';\r\nconst ObjectID = () => '5e5677d71bdc2ae76344968c';\r\nconst PositiveFloat = () => 123.45;\r\nconst PositiveInt = () => 123;\r\nconst PostalCode = () => '60031';\r\nconst URLMock = () => new URL('http://www.test.com/');\r\n// https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\r\nconst UUID = () => {\r\n    // Public Domain/MIT\r\n    let d = new Date().getTime();\r\n    if (typeof performance !== 'undefined' &&\r\n        typeof performance.now === 'function') {\r\n        d += performance.now(); // use high-precision timer if available\r\n    }\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n        // tslint:disable-next-line: no-bitwise\r\n        const r = (d + Math.random() * 16) % 16 | 0;\r\n        d = Math.floor(d / 16);\r\n        // tslint:disable-next-line: no-bitwise\r\n        return (c === 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n    });\r\n};\r\nconst HexColorCode = () => '#' + Math.floor(Math.random() * 16777215).toString(16);\r\nconst Hexadecimal = () => Math.floor(Math.random() * 16777215).toString(16);\r\nconst randomVal = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min) + 1) + min;\r\n};\r\n// https://codepen.io/meowwwls/pen/jbEJRp\r\nconst HSL = () => `hsl(${randomVal(0, 360)}, ${randomVal(30, 95)}%, ${randomVal(30, 80)}%)`;\r\nconst HSLA = () => `hsla(${randomVal(0, 360)}, ${randomVal(30, 95)}%, ${randomVal(30, 80)}%, ${Math.random()})`;\r\n// https://stackoverflow.com/questions/43464519/creating-fake-ip-address-using-javascript\r\nconst IPv4 = () => Math.floor(Math.random() * 255) +\r\n    1 +\r\n    '.' +\r\n    (Math.floor(Math.random() * 255) + 0) +\r\n    '.' +\r\n    (Math.floor(Math.random() * 255) + 0) +\r\n    '.' +\r\n    (Math.floor(Math.random() * 255) + 0);\r\nconst IPv6 = () => '2001:0db8:85a3:0000:0000:8a2e:0370:7334';\r\n// http://jsfiddle.net/guest271314/qhbC9/\r\nconst MAC = () => 'XX:XX:XX:XX:XX:XX'.replace(/X/g, () => '0123456789ABCDEF'.charAt(Math.floor(Math.random() * 16)));\r\nconst Port = () => randomVal(0, 65535);\r\nconst RGB = () => `rgb(${randomVal(0, 255)}, ${randomVal(0, 255)}, ${randomVal(0, 255)})`;\r\nconst RGBA = () => `rgba(${randomVal(0, 255)}, ${randomVal(0, 255)}, ${randomVal(0, 255)}, ${Math.random()})`;\r\nconst ISBN = () => `978-3-16-148410-0`;\r\nconst JWT = () => {\r\n    // HEADER: {\r\n    //   \"alg\": \"HS256\",\r\n    //   \"typ\": \"JWT\"\r\n    // }\r\n    //\r\n    // PAYLOAD: {\r\n    //   \"sub\": \"1234567890\",\r\n    //   \"iat\": 1516239022,\r\n    //   \"project\": \"graphql-scalars\"\r\n    // }\r\n    //\r\n    // SIGNATURE: {\r\n    //   HMACSHA256(\r\n    //     base64UrlEncode(header) + \".\" +\r\n    //     base64UrlEncode(payload),\r\n    //     password\r\n    //   )\r\n    // }\r\n    return `eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwiaWF0IjoxNTE2MjM5MDIyLCJwcm9qZWN0IjoiZ3JhcGhxbC1zY2FsYXJzIn0.nYdrSfE2nNRAgpiEU1uKgn2AYYKLo28Z0nhPXvsuIww`;\r\n};\r\nconst Latitude = () => 41.902782;\r\nconst Longitude = () => 12.496366;\r\nconst USCurrency = () => 1000;\r\nconst Currency = () => 'USD';\r\nconst JSON$1 = () => ({});\r\nconst JSONObject = () => ({});\r\nconst IBAN = () => 'NL55INGB4789170233';\r\nconst Void = () => null;\r\nconst SafeInt = () => Number.MAX_SAFE_INTEGER;\r\nconst DID = () => 'did:example:123456789abcdefghi';\r\nconst CountryCode = () => 'US';\r\nconst Locale = () => 'zh-cmn-Hans-CN';\r\nconst RoutingNumber = () => '111000025';\r\nconst AccountNumber = () => '000000012345';\n\nconst mocks = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  Time: Time,\n  DateTime: DateTime,\n  Timestamp: Timestamp,\n  TimeZone: TimeZone,\n  UtcOffset: UtcOffset,\n  Duration: Duration,\n  LocalDate: LocalDate,\n  LocalTime: LocalTime,\n  LocalEndTime: LocalEndTime,\n  EmailAddress: EmailAddress,\n  NegativeFloat: NegativeFloat,\n  NegativeInt: NegativeInt,\n  NonEmptyString: NonEmptyString,\n  NonNegativeFloat: NonNegativeFloat,\n  NonNegativeInt: NonNegativeInt,\n  NonPositiveFloat: NonPositiveFloat,\n  NonPositiveInt: NonPositiveInt,\n  PhoneNumber: PhoneNumber,\n  ObjectID: ObjectID,\n  PositiveFloat: PositiveFloat,\n  PositiveInt: PositiveInt,\n  PostalCode: PostalCode,\n  UUID: UUID,\n  HexColorCode: HexColorCode,\n  Hexadecimal: Hexadecimal,\n  HSL: HSL,\n  HSLA: HSLA,\n  IPv4: IPv4,\n  IPv6: IPv6,\n  MAC: MAC,\n  Port: Port,\n  RGB: RGB,\n  RGBA: RGBA,\n  ISBN: ISBN,\n  JWT: JWT,\n  Latitude: Latitude,\n  Longitude: Longitude,\n  USCurrency: USCurrency,\n  Currency: Currency,\n  JSON: JSON$1,\n  JSONObject: JSONObject,\n  IBAN: IBAN,\n  Void: Void,\n  SafeInt: SafeInt,\n  DID: DID,\n  CountryCode: CountryCode,\n  Locale: Locale,\n  RoutingNumber: RoutingNumber,\n  AccountNumber: AccountNumber,\n  Date: DateMock,\n  URL: URLMock,\n  UnsignedInt: NonNegativeInt,\n  UnsignedFloat: NonNegativeFloat,\n  GUID: UUID,\n  Long: BigIntMock,\n  BigInt: BigIntMock,\n  Byte: ByteMock,\n  ISO8601Duration: Duration\n});\n\n/**\r\n * Copyright (c) 2017, Dirk-Jan Rutten\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\n// Check whether a certain year is a leap year.\r\n//\r\n// Every year that is exactly divisible by four\r\n// is a leap year, except for years that are exactly\r\n// divisible by 100, but these centurial years are\r\n// leap years if they are exactly divisible by 400.\r\n// For example, the years 1700, 1800, and 1900 are not leap years,\r\n// but the years 1600 and 2000 are.\r\n//\r\nconst leapYear = (year) => {\r\n    return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\r\n};\r\n// Function that checks whether a time-string is RFC 3339 compliant.\r\n//\r\n// It checks whether the time-string is structured in one of the\r\n// following formats:\r\n//\r\n// - hh:mm:ssZ\r\n// - hh:mm:ssÂ±hh:mm\r\n// - hh:mm:ss.*sZ\r\n// - hh:mm:ss.*sÂ±hh:mm\r\n//\r\n// Where *s is a fraction of seconds with at least 1 digit.\r\n//\r\n// Note, this validator assumes that all minutes have\r\n// 59 seconds. This assumption does not follow RFC 3339\r\n// which includes leap seconds (in which case it is possible that\r\n// there are 60 seconds in a minute).\r\n//\r\n// Leap seconds are ignored because it adds complexity in\r\n// the following areas:\r\n// - The native Javascript Date ignores them; i.e. Date.parse('1972-12-31T23:59:60Z')\r\n//   equals NaN.\r\n// - Leap seconds cannot be known in advance.\r\n//\r\nconst validateTime = (time) => {\r\n    time = time === null || time === void 0 ? void 0 : time.toUpperCase();\r\n    const TIME_REGEX = /^([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])(\\.\\d{1,})?(([Z])|([+|-]([01][0-9]|2[0-3]):[0-5][0-9]))$/;\r\n    return TIME_REGEX.test(time);\r\n};\r\n// Function that checks whether a date-string is RFC 3339 compliant.\r\n//\r\n// It checks whether the date-string is a valid date in the YYYY-MM-DD.\r\n//\r\n// Note, the number of days in each date are determined according to the\r\n// following lookup table:\r\n//\r\n// Month Number  Month/Year           Maximum value of date-mday\r\n// ------------  ----------           --------------------------\r\n// 01            January              31\r\n// 02            February, normal     28\r\n// 02            February, leap year  29\r\n// 03            March                31\r\n// 04            April                30\r\n// 05            May                  31\r\n// 06            June                 30\r\n// 07            July                 31\r\n// 08            August               31\r\n// 09            September            30\r\n// 10            October              31\r\n// 11            November             30\r\n// 12            December             31\r\n//\r\nconst validateDate = (datestring) => {\r\n    const RFC_3339_REGEX = /^(\\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01]))$/;\r\n    if (!RFC_3339_REGEX.test(datestring)) {\r\n        return false;\r\n    }\r\n    // Verify the correct number of days for\r\n    // the month contained in the date-string.\r\n    const year = Number(datestring.substr(0, 4));\r\n    const month = Number(datestring.substr(5, 2));\r\n    const day = Number(datestring.substr(8, 2));\r\n    switch (month) {\r\n        case 2: // February\r\n            if (leapYear(year) && day > 29) {\r\n                return false;\r\n            }\r\n            else if (!leapYear(year) && day > 28) {\r\n                return false;\r\n            }\r\n            return true;\r\n        case 4: // April\r\n        case 6: // June\r\n        case 9: // September\r\n        case 11: // November\r\n            if (day > 30) {\r\n                return false;\r\n            }\r\n            break;\r\n    }\r\n    return true;\r\n};\r\n// Function that checks whether a date-time-string is RFC 3339 compliant.\r\n//\r\n// It checks whether the time-string is structured in one of the\r\n//\r\n// - YYYY-MM-DDThh:mm:ssZ\r\n// - YYYY-MM-DDThh:mm:ssÂ±hh:mm\r\n// - YYYY-MM-DDThh:mm:ss.*sZ\r\n// - YYYY-MM-DDThh:mm:ss.*sÂ±hh:mm\r\n//\r\n// Where *s is a fraction of seconds with at least 1 digit.\r\n//\r\nconst validateDateTime = (dateTimeString) => {\r\n    dateTimeString = dateTimeString === null || dateTimeString === void 0 ? void 0 : dateTimeString.toUpperCase();\r\n    const RFC_3339_REGEX = /^(\\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60))(\\.\\d{1,})?(([Z])|([+|-]([01][0-9]|2[0-3]):[0-5][0-9]))$/;\r\n    // Validate the structure of the date-string\r\n    if (!RFC_3339_REGEX.test(dateTimeString)) {\r\n        return false;\r\n    }\r\n    // Check if it is a correct date using the javascript Date parse() method.\r\n    const time = Date.parse(dateTimeString);\r\n    if (time !== time) {\r\n        // eslint-disable-line\r\n        return false;\r\n    }\r\n    // Split the date-time-string up into the string-date and time-string part.\r\n    // and check whether these parts are RFC 3339 compliant.\r\n    const index = dateTimeString.indexOf('T');\r\n    const dateString = dateTimeString.substr(0, index);\r\n    const timeString = dateTimeString.substr(index + 1);\r\n    return validateDate(dateString) && validateTime(timeString);\r\n};\r\n// Function that checks whether a javascript Date instance\r\n// is valid.\r\n//\r\nconst validateJSDate = (date) => {\r\n    const time = date.getTime();\r\n    return time === time; // eslint-disable-line\r\n};\n\n/**\r\n * Copyright (c) 2017, Dirk-Jan Rutten\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\n// Parses an RFC 3339 compliant time-string into a Date.\r\n// It does this by combining the current date with the time-string\r\n// to create a new Date instance.\r\n//\r\n// Example:\r\n// Suppose the current date is 2016-01-01, then\r\n// parseTime('11:00:12Z') parses to a Date corresponding to\r\n// 2016-01-01T11:00:12Z.\r\nconst parseTime = (time) => {\r\n    const currentDateString = new Date().toISOString();\r\n    return new Date(currentDateString.substr(0, currentDateString.indexOf('T') + 1) + time);\r\n};\r\n// Serializes a Date into an RFC 3339 compliant time-string in the\r\n// format hh:mm:ss.sssZ.\r\nconst serializeTime = (date) => {\r\n    const dateTimeString = date.toISOString();\r\n    return dateTimeString.substr(dateTimeString.indexOf('T') + 1);\r\n};\r\n// Serializes an RFC 3339 compliant time-string by shifting\r\n// it to UTC.\r\nconst serializeTimeString = (time) => {\r\n    // If already formatted to UTC then return the time string\r\n    if (time.indexOf('Z') !== -1) {\r\n        return time;\r\n    }\r\n    else {\r\n        // These are time-strings with timezone information,\r\n        // these need to be shifted to UTC.\r\n        // Convert to UTC time string in\r\n        // format hh:mm:ss.sssZ.\r\n        const date = parseTime(time);\r\n        let timeUTC = serializeTime(date);\r\n        // Regex to look for fractional second part in time string\r\n        // such as 00:00:00.345+01:00\r\n        const regexFracSec = /\\.\\d{1,}/;\r\n        // Retrieve the fractional second part of the time\r\n        // string if it exists.\r\n        const fractionalPart = time.match(regexFracSec);\r\n        if (fractionalPart == null) {\r\n            // These are time-strings without the fractional\r\n            // seconds. So we remove them from the UTC time-string.\r\n            timeUTC = timeUTC.replace(regexFracSec, '');\r\n            return timeUTC;\r\n        }\r\n        else {\r\n            // These are time-string with fractional seconds.\r\n            // Make sure that we inject the fractional\r\n            // second part back in. The `timeUTC` variable\r\n            // has millisecond precision, we may want more or less\r\n            // depending on the string that was passed.\r\n            timeUTC = timeUTC.replace(regexFracSec, fractionalPart[0]);\r\n            return timeUTC;\r\n        }\r\n    }\r\n};\r\n// Parses an RFC 3339 compliant date-string into a Date.\r\n//\r\n// Example:\r\n// parseDate('2016-01-01') parses to a Date corresponding to\r\n// 2016-01-01T00:00:00.000Z.\r\nconst parseDate = (date) => {\r\n    return new Date(date);\r\n};\r\n// Serializes a Date into a RFC 3339 compliant date-string\r\n// in the format YYYY-MM-DD.\r\nconst serializeDate = (date) => {\r\n    return date.toISOString().split('T')[0];\r\n};\r\n// Parses an RFC 3339 compliant date-time-string into a Date.\r\nconst parseDateTime = (dateTime) => {\r\n    return new Date(dateTime);\r\n};\n\n/**\r\n * Copyright (c) 2017, Dirk-Jan Rutten\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\nconst GraphQLDateConfig = \r\n/*#__PURE__*/ {\r\n    name: 'Date',\r\n    description: 'A date string, such as 2007-12-03, compliant with the `full-date` ' +\r\n        'format outlined in section 5.6 of the RFC 3339 profile of the ' +\r\n        'ISO 8601 standard for representation of dates and times using ' +\r\n        'the Gregorian calendar.',\r\n    serialize(value) {\r\n        if (value instanceof Date) {\r\n            if (validateJSDate(value)) {\r\n                return serializeDate(value);\r\n            }\r\n            throw new TypeError('Date cannot represent an invalid Date instance');\r\n        }\r\n        else if (typeof value === 'string') {\r\n            if (validateDate(value)) {\r\n                return value;\r\n            }\r\n            throw new TypeError(`Date cannot represent an invalid date-string ${value}.`);\r\n        }\r\n        else {\r\n            throw new TypeError('Date cannot represent a non string, or non Date type ' +\r\n                JSON.stringify(value));\r\n        }\r\n    },\r\n    parseValue(value) {\r\n        if (!(typeof value === 'string')) {\r\n            throw new TypeError(`Date cannot represent non string type ${JSON.stringify(value)}`);\r\n        }\r\n        if (validateDate(value)) {\r\n            return parseDate(value);\r\n        }\r\n        throw new TypeError(`Date cannot represent an invalid date-string ${value}.`);\r\n    },\r\n    parseLiteral(ast) {\r\n        if (ast.kind !== Kind.STRING) {\r\n            throw new TypeError(`Date cannot represent non string type ${'value' in ast && ast.value}`);\r\n        }\r\n        const { value } = ast;\r\n        if (validateDate(value)) {\r\n            return parseDate(value);\r\n        }\r\n        throw new TypeError(`Date cannot represent an invalid date-string ${String(value)}.`);\r\n    },\r\n    extensions: {\r\n        codegenScalarType: 'Date | string',\r\n    },\r\n};\r\n/**\r\n * An RFC 3339 compliant date scalar.\r\n *\r\n * Input:\r\n *    This scalar takes an RFC 3339 date string as input and\r\n *    parses it to a javascript Date.\r\n *\r\n * Output:\r\n *    This scalar serializes javascript Dates and\r\n *    RFC 3339 date strings to RFC 3339 date strings.\r\n */\r\nconst GraphQLDate = \r\n/*#__PURE__*/ new GraphQLScalarType(GraphQLDateConfig);\n\n/**\r\n * Copyright (c) 2017, Dirk-Jan Rutten\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\n/**\r\n * An RFC 3339 compliant time scalar.\r\n *\r\n * Input:\r\n *    This scalar takes an RFC 3339 time string as input and\r\n *    parses it to a javascript Date (with a year-month-day relative\r\n *    to the current day).\r\n *\r\n * Output:\r\n *    This scalar serializes javascript Dates and\r\n *    RFC 3339 time strings to RFC 3339 UTC time strings.\r\n */\r\nconst config = {\r\n    name: 'Time',\r\n    description: 'A time string at UTC, such as 10:15:30Z, compliant with ' +\r\n        'the `full-time` format outlined in section 5.6 of the RFC 3339' +\r\n        'profile of the ISO 8601 standard for representation of dates and ' +\r\n        'times using the Gregorian calendar.',\r\n    serialize(value) {\r\n        if (value instanceof Date) {\r\n            if (validateJSDate(value)) {\r\n                return serializeTime(value);\r\n            }\r\n            throw new TypeError('Time cannot represent an invalid Date instance');\r\n        }\r\n        else if (typeof value === 'string') {\r\n            if (validateTime(value)) {\r\n                return serializeTimeString(value);\r\n            }\r\n            throw new TypeError(`Time cannot represent an invalid time-string ${value}.`);\r\n        }\r\n        else {\r\n            throw new TypeError('Time cannot be serialized from a non string, ' +\r\n                'or non Date type ' +\r\n                JSON.stringify(value));\r\n        }\r\n    },\r\n    parseValue(value) {\r\n        if (!(typeof value === 'string')) {\r\n            throw new TypeError(`Time cannot represent non string type ${JSON.stringify(value)}`);\r\n        }\r\n        if (validateTime(value)) {\r\n            return parseTime(value);\r\n        }\r\n        throw new TypeError(`Time cannot represent an invalid time-string ${value}.`);\r\n    },\r\n    parseLiteral(ast) {\r\n        if (ast.kind !== Kind.STRING) {\r\n            throw new TypeError(`Time cannot represent non string type ${'value' in ast && ast.value}`);\r\n        }\r\n        const value = ast.value;\r\n        if (validateTime(value)) {\r\n            return parseTime(value);\r\n        }\r\n        throw new TypeError(`Time cannot represent an invalid time-string ${String(value)}.`);\r\n    },\r\n    extensions: {\r\n        codegenScalarType: 'Date | string',\r\n    },\r\n};\r\nconst GraphQLTime = \r\n/*#__PURE__*/ new GraphQLScalarType(config);\n\n/**\r\n * Copyright (c) 2017, Dirk-Jan Rutten\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\nconst GraphQLDateTimeConfig = \r\n/*#__PURE__*/ {\r\n    name: 'DateTime',\r\n    description: 'A date-time string at UTC, such as 2007-12-03T10:15:30Z, ' +\r\n        'compliant with the `date-time` format outlined in section 5.6 of ' +\r\n        'the RFC 3339 profile of the ISO 8601 standard for representation ' +\r\n        'of dates and times using the Gregorian calendar.',\r\n    serialize(value) {\r\n        if (value instanceof Date) {\r\n            if (validateJSDate(value)) {\r\n                return value;\r\n            }\r\n            throw new TypeError('DateTime cannot represent an invalid Date instance');\r\n        }\r\n        else if (typeof value === 'string') {\r\n            if (validateDateTime(value)) {\r\n                return parseDateTime(value);\r\n            }\r\n            throw new TypeError(`DateTime cannot represent an invalid date-time-string ${value}.`);\r\n        }\r\n        else if (typeof value === 'number') {\r\n            try {\r\n                return new Date(value);\r\n            }\r\n            catch (e) {\r\n                throw new TypeError('DateTime cannot represent an invalid Unix timestamp ' + value);\r\n            }\r\n        }\r\n        else {\r\n            throw new TypeError('DateTime cannot be serialized from a non string, ' +\r\n                'non numeric or non Date type ' +\r\n                JSON.stringify(value));\r\n        }\r\n    },\r\n    parseValue(value) {\r\n        if (value instanceof Date) {\r\n            if (validateJSDate(value)) {\r\n                return value;\r\n            }\r\n            throw new TypeError('DateTime cannot represent an invalid Date instance');\r\n        }\r\n        if (typeof value === 'string') {\r\n            if (validateDateTime(value)) {\r\n                return parseDateTime(value);\r\n            }\r\n            throw new TypeError(`DateTime cannot represent an invalid date-time-string ${value}.`);\r\n        }\r\n        throw new TypeError(`DateTime cannot represent non string or Date type ${JSON.stringify(value)}`);\r\n    },\r\n    parseLiteral(ast) {\r\n        if (ast.kind !== Kind.STRING) {\r\n            throw new TypeError(`DateTime cannot represent non string or Date type ${'value' in ast && ast.value}`);\r\n        }\r\n        const { value } = ast;\r\n        if (validateDateTime(value)) {\r\n            return parseDateTime(value);\r\n        }\r\n        throw new TypeError(`DateTime cannot represent an invalid date-time-string ${String(value)}.`);\r\n    },\r\n    extensions: {\r\n        codegenScalarType: 'Date | string',\r\n    },\r\n};\r\n/**\r\n * An RFC 3339 compliant date-time scalar.\r\n *\r\n * Input:\r\n *    This scalar takes an RFC 3339 date-time string as input and\r\n *    parses it to a javascript Date.\r\n *\r\n * Output:\r\n *    This scalar serializes javascript Dates,\r\n *    RFC 3339 date-time strings and unix timestamps\r\n *    to RFC 3339 UTC date-time strings.\r\n */\r\nconst GraphQLDateTime = \r\n/*#__PURE__*/ new GraphQLScalarType(GraphQLDateTimeConfig);\n\n// Taken from https://gist.github.com/langpavel/b30f3d507a47713b0c6e89016e4e9eb7\r\nfunction serializeDate$1(value) {\r\n    if (value instanceof Date) {\r\n        return value.getTime();\r\n    }\r\n    else if (typeof value === 'number') {\r\n        return Math.trunc(value);\r\n    }\r\n    else if (typeof value === 'string') {\r\n        return Date.parse(value);\r\n    }\r\n    return null;\r\n}\r\nfunction parseDate$1(value) {\r\n    if (value === null) {\r\n        return null;\r\n    }\r\n    try {\r\n        return new Date(value);\r\n    }\r\n    catch (err) {\r\n        return null;\r\n    }\r\n}\r\nfunction parseDateFromLiteral(ast) {\r\n    if (ast.kind === Kind.INT) {\r\n        const num = parseInt(ast.value, 10);\r\n        return new Date(num);\r\n    }\r\n    else if (ast.kind === Kind.STRING) {\r\n        return parseDate$1(ast.value);\r\n    }\r\n    return null;\r\n}\r\nconst GraphQLTimestamp = \r\n/*#__PURE__*/ new GraphQLScalarType({\r\n    name: 'Timestamp',\r\n    description: 'The javascript `Date` as integer. Type represents date and time ' +\r\n        'as number of milliseconds from start of UNIX epoch.',\r\n    serialize: serializeDate$1,\r\n    parseValue: parseDate$1,\r\n    parseLiteral: parseDateFromLiteral,\r\n    extensions: {\r\n        codegenScalarType: 'Date | string | number',\r\n    },\r\n});\n\nconst validateTimeZone = (str) => {\r\n    if (!(Intl === null || Intl === void 0 ? void 0 : Intl.DateTimeFormat().resolvedOptions().timeZone)) {\r\n        throw new Error('Time zones are not available in this environment');\r\n    }\r\n    try {\r\n        Intl.DateTimeFormat(undefined, { timeZone: str });\r\n        return str;\r\n    }\r\n    catch (ex) {\r\n        if (ex instanceof RangeError) {\r\n            throw new TypeError(`Value is not a valid IANA time zone: ${str}`);\r\n        }\r\n        else {\r\n            throw new Error('Could not validate time zone.');\r\n        }\r\n    }\r\n};\r\nconst GraphQLTimeZone = \r\n/*#__PURE__*/ new GraphQLScalarType({\r\n    name: 'TimeZone',\r\n    description: 'A field whose value exists in the standard IANA Time Zone Database: https://www.iana.org/time-zones',\r\n    serialize: validateTimeZone,\r\n    parseValue: validateTimeZone,\r\n    parseLiteral(ast) {\r\n        if (ast.kind !== Kind.STRING) {\r\n            throw new GraphQLError(`Can only sanitize time zone strings, but got: ${ast.kind}`);\r\n        }\r\n        return validateTimeZone(ast.value);\r\n    },\r\n});\n\nconst validate = (value) => {\r\n    const UTC_OFFSET_REGEX = /^([+-]?)(\\d{2}):(\\d{2})$/;\r\n    if (typeof value !== 'string') {\r\n        throw new TypeError(`Value is not string: ${value}`);\r\n    }\r\n    if (!UTC_OFFSET_REGEX.test(value)) {\r\n        throw new TypeError(`Value is not a valid UTC Offset: ${value}`);\r\n    }\r\n    return value;\r\n};\r\nconst GraphQLUtcOffset = \r\n/*#__PURE__*/ new GraphQLScalarType({\r\n    name: 'UtcOffset',\r\n    description: 'A field whose value is a UTC Offset: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones',\r\n    serialize: validate,\r\n    parseValue: validate,\r\n    parseLiteral(ast) {\r\n        if (ast.kind !== Kind.STRING) {\r\n            throw new GraphQLError(`Can only validate strings as UTC Offset but got a: ${ast.kind}`);\r\n        }\r\n        return validate(ast.value);\r\n    },\r\n    extensions: {\r\n        codegenScalarType: 'string',\r\n    },\r\n});\n\n// original implementation\r\n// https://stackoverflow.com/questions/32044846/regex-for-iso-8601-durations\r\n// const ISO_DURATION_NEGATIVE_ALLOWED = /^-?P(?!$)(-?\\d+(?:\\.\\d+)?Y)?(-?\\d+(?:\\.\\d+)?M)?(-?\\d+(?:\\.\\d+)?W)?(-?\\d+(?:\\.\\d+)?D)?(T(?=-?\\d)(-?\\d+(?:\\.\\d+)?H)?(-?\\d+(?:\\.\\d+)?M)?(-?\\d+(?:\\.\\d+)?S)?)?$/\r\n// const ISO_DURATION_WITHOUT_SIGN = /^P(?!$)(\\d+(?:\\.\\d+)?Y)?(\\d+(?:\\.\\d+)?M)?(\\d+(?:\\.\\d+)?W)?(\\d+(?:\\.\\d+)?D)?(T(?=\\d)(\\d+(?:\\.\\d+)?H)?(\\d+(?:\\.\\d+)?M)?(\\d+(?:\\.\\d+)?S)?)?$/\r\n// negative and positive durations allowed, commas and decimal points valid for fractions\r\nconst ISO_DURATION = /^(-|\\+)?P(?!$)((-|\\+)?\\d+(?:(\\.|,)\\d+)?Y)?((-|\\+)?\\d+(?:(\\.|,)\\d+)?M)?((-|\\+)?\\d+(?:(\\.|,)\\d+)?W)?((-|\\+)?\\d+(?:(\\.|,)\\d+)?D)?(T(?=(-|\\+)?\\d)((-|\\+)?\\d+(?:(\\.|,)\\d+)?H)?((-|\\+)?\\d+(?:(\\.|,)\\d+)?M)?((-|\\+)?\\d+(?:(\\.|,)\\d+)?S)?)?$/;\r\nconst GraphQLDurationConfig = \r\n/*#__PURE__*/ {\r\n    name: 'Duration',\r\n    description: `\n    A string representing a duration conforming to the ISO8601 standard,\n    such as: P1W1DT13H23M34S\n    P is the duration designator (for period) placed at the start of the duration representation.\n    Y is the year designator that follows the value for the number of years.\n    M is the month designator that follows the value for the number of months.\n    W is the week designator that follows the value for the number of weeks.\n    D is the day designator that follows the value for the number of days.\n    T is the time designator that precedes the time components of the representation.\n    H is the hour designator that follows the value for the number of hours.\n    M is the minute designator that follows the value for the number of minutes.\n    S is the second designator that follows the value for the number of seconds.\n\n    Note the time designator, T, that precedes the time value.\n\n    Matches moment.js, Luxon and DateFns implementations\n    ,/. is valid for decimal places and +/- is a valid prefix\n  `,\r\n    serialize(value) {\r\n        if (typeof value !== 'string') {\r\n            throw new TypeError(`Value is not string: ${value}`);\r\n        }\r\n        if (!ISO_DURATION.test(value)) {\r\n            throw new TypeError(`Value is not a valid ISO Duration: ${value}`);\r\n        }\r\n        return value;\r\n    },\r\n    parseValue(value) {\r\n        if (typeof value !== 'string') {\r\n            throw new TypeError(`Value is not string: ${value}`);\r\n        }\r\n        if (!ISO_DURATION.test(value)) {\r\n            throw new TypeError(`Value is not a valid ISO Duration: ${value}`);\r\n        }\r\n        return value;\r\n    },\r\n    parseLiteral(ast) {\r\n        if (ast.kind !== Kind.STRING) {\r\n            throw new GraphQLError(`Can only validate strings as ISO Durations but got a: ${ast.kind}`);\r\n        }\r\n        if (!ISO_DURATION.test(ast.value)) {\r\n            throw new TypeError(`Value is not a valid ISO Duration: ${ast.value}`);\r\n        }\r\n        return ast.value;\r\n    },\r\n    extensions: {\r\n        codegenScalarType: 'string',\r\n    },\r\n};\r\nconst GraphQLISO8601Duration = \r\n/*#__PURE__*/ new GraphQLScalarType({\r\n    ...GraphQLDurationConfig,\r\n    name: 'ISO8601Duration',\r\n});\r\nconst GraphQLDuration = \r\n/*#__PURE__*/ new GraphQLScalarType({\r\n    ...GraphQLDurationConfig,\r\n    name: 'Duration',\r\n});\n\nconst LOCAL_DATE_FORMAT = /^\\d{4}-\\d{2}-\\d{2}$/;\r\nfunction validateLocalDate(value) {\r\n    if (typeof value !== 'string') {\r\n        throw new TypeError(`Value is not string: ${value}`);\r\n    }\r\n    // check that it's in the `yyyy-MM-dd` format\r\n    const isValidFormat = LOCAL_DATE_FORMAT.test(value);\r\n    if (!isValidFormat) {\r\n        throw new TypeError(`Value is not a valid LocalDate: ${value}`);\r\n    }\r\n    // check that it appears to be a valid date, e.g., not something like `2020-13-46`\r\n    const valueAsDate = new Date(value);\r\n    const isValidDate = !isNaN(valueAsDate.getTime());\r\n    if (!isValidDate) {\r\n        throw new TypeError(`Value is not a valid LocalDate: ${value}`);\r\n    }\r\n    // some additional logic to catch invalid dates like `2020-02-30`\r\n    // that we catch by serializing the Date object into an ISO string and checking that our serialized date matches\r\n    // the original value\r\n    const isCalendarDate = valueAsDate.toISOString() === `${value}T00:00:00.000Z`;\r\n    if (!isCalendarDate) {\r\n        throw new TypeError(`Value is not a valid LocalDate: ${value}`);\r\n    }\r\n    return value;\r\n}\r\nconst GraphQLLocalDate = \r\n/*#__PURE__*/ new GraphQLScalarType({\r\n    name: 'LocalDate',\r\n    description: 'A local date string (i.e., with no associated timezone) in `YYYY-MM-DD` format, e.g. `2020-01-01`.',\r\n    serialize(value) {\r\n        // value sent to client as string\r\n        return validateLocalDate(value);\r\n    },\r\n    parseValue(value) {\r\n        // value from client as json\r\n        return validateLocalDate(value);\r\n    },\r\n    parseLiteral(ast) {\r\n        // value from client in ast\r\n        if (ast.kind !== Kind.STRING) {\r\n            throw new GraphQLError(`Can only validate strings as local dates but got a: ${ast.kind}`);\r\n        }\r\n        return validateLocalDate(ast.value);\r\n    },\r\n    extensions: {\r\n        codegenScalarType: 'string',\r\n    },\r\n});\n\n// 24-hour time with optional seconds and milliseconds - `HH:mm[:ss[.SSS]]`\r\nconst LOCAL_TIME_FORMAT = /^([0-1][0-9]|2[0-3]):([0-5][0-9])(:[0-5][0-9](\\.\\d{3})?)?$/;\r\nfunction validateLocalTime(value) {\r\n    if (typeof value !== 'string') {\r\n        throw new TypeError(`Value is not string: ${value}`);\r\n    }\r\n    const isValidFormat = LOCAL_TIME_FORMAT.test(value);\r\n    if (!isValidFormat) {\r\n        throw new TypeError(`Value is not a valid LocalTime: ${value}`);\r\n    }\r\n    return value;\r\n}\r\nconst GraphQLLocalTime = \r\n/*#__PURE__*/ new GraphQLScalarType({\r\n    name: 'LocalTime',\r\n    description: 'A local time string (i.e., with no associated timezone) in 24-hr `HH:mm[:ss[.SSS]]` format, e.g. `14:25` or `14:25:06` or `14:25:06.123`.',\r\n    serialize(value) {\r\n        // value sent to client as string\r\n        return validateLocalTime(value);\r\n    },\r\n    parseValue(value) {\r\n        // value from client as json\r\n        return validateLocalTime(value);\r\n    },\r\n    parseLiteral(ast) {\r\n        // value from client in ast\r\n        if (ast.kind !== Kind.STRING) {\r\n            throw new GraphQLError(`Can only validate strings as local times but got a: ${ast.kind}`);\r\n        }\r\n        return validateLocalTime(ast.value);\r\n    },\r\n    extensions: {\r\n        codegenScalarType: 'string',\r\n    },\r\n});\n\nconst LOCAL_END_TIMES = ['24:00', '24:00:00', '24:00:00.000'];\r\nfunction validateLocalEndTime(value) {\r\n    // first check if it's any of the special \"end time\" values\r\n    if (LOCAL_END_TIMES.indexOf(value) >= 0) {\r\n        return value;\r\n    }\r\n    // otherwise, fall back on the standard LocalTime validation\r\n    return validateLocalTime(value);\r\n}\r\nconst GraphQLLocalEndTime = \r\n/*#__PURE__*/ new GraphQLScalarType({\r\n    name: 'LocalEndTime',\r\n    description: 'A local time string (i.e., with no associated timezone) in 24-hr `HH:mm[:ss[.SSS]]` format, e.g. `14:25` or `14:25:06` or `14:25:06.123`.  This scalar is very similar to the `LocalTime`, with the only difference being that `LocalEndTime` also allows `24:00` as a valid value to indicate midnight of the following day.  This is useful when using the scalar to represent the exclusive upper bound of a time block.',\r\n    serialize(value) {\r\n        // value sent to client as string\r\n        return validateLocalEndTime(value);\r\n    },\r\n    parseValue(value) {\r\n        // value from client as json\r\n        return validateLocalEndTime(value);\r\n    },\r\n    parseLiteral(ast) {\r\n        // value from client in ast\r\n        if (ast.kind !== Kind.STRING) {\r\n            throw new GraphQLError(`Can only validate strings as local times but got a: ${ast.kind}`);\r\n        }\r\n        return validateLocalEndTime(ast.value);\r\n    },\r\n    extensions: {\r\n        codegenScalarType: 'string',\r\n    },\r\n});\n\nconst validate$1 = (value) => {\r\n    const EMAIL_ADDRESS_REGEX = /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\r\n    if (typeof value !== 'string') {\r\n        throw new TypeError(`Value is not string: ${value}`);\r\n    }\r\n    if (!EMAIL_ADDRESS_REGEX.test(value)) {\r\n        throw new TypeError(`Value is not a valid email address: ${value}`);\r\n    }\r\n    return value;\r\n};\r\nconst specifiedByURL = 'https://www.w3.org/Protocols/rfc822/';\r\nconst GraphQLEmailAddressConfig = /*#__PURE__*/ {\r\n    name: 'EmailAddress',\r\n    description: 'A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.',\r\n    serialize: validate$1,\r\n    parseValue: validate$1,\r\n    parseLiteral(ast) {\r\n        if (ast.kind !== Kind.STRING) {\r\n            throw new GraphQLError(`Can only validate strings as email addresses but got a: ${ast.kind}`);\r\n        }\r\n        return validate$1(ast.value);\r\n    },\r\n    specifiedByURL,\r\n    specifiedByUrl: specifiedByURL,\r\n    extensions: {\r\n        codegenScalarType: 'string',\r\n    },\r\n};\r\nconst GraphQLEmailAddress = \r\n/*#__PURE__*/ new GraphQLScalarType(GraphQLEmailAddressConfig);\n\nvar VALUE_RANGES;\r\n(function (VALUE_RANGES) {\r\n    VALUE_RANGES[VALUE_RANGES[\"NEGATIVE\"] = 0] = \"NEGATIVE\";\r\n    VALUE_RANGES[VALUE_RANGES[\"NON_NEGATIVE\"] = 1] = \"NON_NEGATIVE\";\r\n    VALUE_RANGES[VALUE_RANGES[\"POSITIVE\"] = 2] = \"POSITIVE\";\r\n    VALUE_RANGES[VALUE_RANGES[\"NON_POSITIVE\"] = 3] = \"NON_POSITIVE\";\r\n})(VALUE_RANGES || (VALUE_RANGES = {}));\r\nvar VALUE_TYPES;\r\n(function (VALUE_TYPES) {\r\n    VALUE_TYPES[VALUE_TYPES[\"INT\"] = 0] = \"INT\";\r\n    VALUE_TYPES[VALUE_TYPES[\"FLOAT\"] = 1] = \"FLOAT\";\r\n})(VALUE_TYPES || (VALUE_TYPES = {}));\r\n// More info about Sexagesimal: https://en.wikipedia.org/wiki/Sexagesimal\r\nconst SEXAGESIMAL_REGEX = /^([0-9]{1,3})Â°\\s*([0-9]{1,3}(?:\\.(?:[0-9]{1,}))?)['â²]\\s*(([0-9]{1,3}(\\.([0-9]{1,}))?)[\"â³]\\s*)?([NEOSW]?)$/;\r\n// TODO: Consider implementing coercion like this...\r\n// See: https://github.com/graphql/graphql-js/blob/master/src/type/scalars.js#L13\r\n// See: https://github.com/graphql/graphql-js/blob/master/src/type/scalars.js#L60\r\nfunction _validateInt(value) {\r\n    if (!Number.isFinite(value)) {\r\n        throw new TypeError(`Value is not a finite number: ${value}`);\r\n    }\r\n    if (!Number.isInteger(value)) {\r\n        throw new TypeError(`Value is not an integer: ${value}`);\r\n    }\r\n    if (!Number.isSafeInteger(value)) {\r\n        throw new TypeError(`Value is not a safe integer: ${value}`);\r\n    }\r\n}\r\nfunction _validateFloat(value) {\r\n    if (!Number.isFinite(value)) {\r\n        throw new TypeError(`Value is not a finite number: ${value}`);\r\n    }\r\n}\r\nfunction processValue(value, scalarName) {\r\n    const VALIDATIONS = {\r\n        NonPositiveInt: {\r\n            range: VALUE_RANGES.NON_POSITIVE,\r\n            type: VALUE_TYPES.INT,\r\n        },\r\n        PositiveInt: {\r\n            range: VALUE_RANGES.POSITIVE,\r\n            type: VALUE_TYPES.INT,\r\n        },\r\n        NonNegativeInt: {\r\n            range: VALUE_RANGES.NON_NEGATIVE,\r\n            type: VALUE_TYPES.INT,\r\n        },\r\n        NegativeInt: {\r\n            range: VALUE_RANGES.NEGATIVE,\r\n            type: VALUE_TYPES.INT,\r\n        },\r\n        NonPositiveFloat: {\r\n            range: VALUE_RANGES.NON_POSITIVE,\r\n            type: VALUE_TYPES.FLOAT,\r\n        },\r\n        PositiveFloat: {\r\n            range: VALUE_RANGES.POSITIVE,\r\n            type: VALUE_TYPES.FLOAT,\r\n        },\r\n        NonNegativeFloat: {\r\n            range: VALUE_RANGES.NON_NEGATIVE,\r\n            type: VALUE_TYPES.FLOAT,\r\n        },\r\n        NegativeFloat: {\r\n            range: VALUE_RANGES.NEGATIVE,\r\n            type: VALUE_TYPES.FLOAT,\r\n        },\r\n    };\r\n    const { range, type } = VALIDATIONS[scalarName];\r\n    /* eslint-disable no-restricted-globals */\r\n    /* eslint-disable use-isnan */\r\n    if (value === null ||\r\n        typeof value === 'undefined' ||\r\n        isNaN(value) ||\r\n        Number.isNaN(value) ||\r\n        value === Number.NaN) {\r\n        throw new TypeError(`Value is not a number: ${value}`);\r\n    }\r\n    /* eslint-enable */\r\n    let parsedValue;\r\n    switch (type) {\r\n        case VALUE_TYPES.FLOAT:\r\n            parsedValue = parseFloat(value);\r\n            _validateFloat(parsedValue);\r\n            break;\r\n        case VALUE_TYPES.INT:\r\n            parsedValue = parseInt(value, 10);\r\n            _validateInt(parsedValue);\r\n            break;\r\n        // no -op, return undefined\r\n    }\r\n    if ((range === VALUE_RANGES.NEGATIVE && !(parsedValue < 0)) ||\r\n        (range === VALUE_RANGES.NON_NEGATIVE && !(parsedValue >= 0)) ||\r\n        (range === VALUE_RANGES.POSITIVE && !(parsedValue > 0)) ||\r\n        (range === VALUE_RANGES.NON_POSITIVE && !(parsedValue <= 0))) {\r\n        throw new TypeError(`Value is not a ${VALUE_RANGES[range]\r\n            .toLowerCase()\r\n            .replace('_', '-')} number: ${value}`);\r\n    }\r\n    return parsedValue;\r\n}\r\n/**\r\n * Check if the value is in decimal format.\r\n *\r\n * @param value - Value to check\r\n * @returns True if is decimal, false otherwise\r\n */\r\nfunction isDecimal(value) {\r\n    const checkedValue = value.toString().trim();\r\n    if (Number.isNaN(Number.parseFloat(checkedValue))) {\r\n        return false;\r\n    }\r\n    return Number.parseFloat(checkedValue) === Number(checkedValue);\r\n}\r\n/**\r\n * Check if the value is in sexagesimal format.\r\n *\r\n * @param value - Value to check\r\n * @returns True if sexagesimal, false otherwise\r\n */\r\nfunction isSexagesimal(value) {\r\n    if (typeof value !== 'string')\r\n        return false;\r\n    return SEXAGESIMAL_REGEX.test(value.toString().trim());\r\n}\r\n/**\r\n * Converts a sexagesimal coordinate to decimal format.\r\n *\r\n * @param value - Value to convert\r\n * @returns Decimal coordinate\r\n * @throws {TypeError} if the value is not in sexagesimal format\r\n */\r\nfunction sexagesimalToDecimal(value) {\r\n    const data = SEXAGESIMAL_REGEX.exec(value);\r\n    if (typeof data === 'undefined' || data === null) {\r\n        throw new TypeError(`Value is not in sexagesimal format: ${value}`);\r\n    }\r\n    const min = Number(data[2]) / 60 || 0;\r\n    const sec = Number(data[4]) / 3600 || 0;\r\n    const decimal = Number.parseFloat(data[1]) + min + sec;\r\n    // Southern and western coordinates must be negative decimals\r\n    return ['S', 'W'].includes(data[7]) ? -decimal : decimal;\r\n}\r\nfunction isObjectLike(value) {\r\n    return typeof value === 'object' && value !== null;\r\n}\r\n// Taken from https://github.com/graphql/graphql-js/blob/30b446938a9b5afeb25c642d8af1ea33f6c849f3/src/type/scalars.ts#L267\r\n// Support serializing objects with custom valueOf() or toJSON() functions -\r\n// a common way to represent a complex value which can be represented as\r\n// a string (ex: MongoDB id objects).\r\nfunction serializeObject(outputValue) {\r\n    if (isObjectLike(outputValue)) {\r\n        if (typeof outputValue.valueOf === 'function') {\r\n            const valueOfResult = outputValue.valueOf();\r\n            if (!isObjectLike(valueOfResult)) {\r\n                return valueOfResult;\r\n            }\r\n        }\r\n        if (typeof outputValue.toJSON === 'function') {\r\n            return outputValue.toJSON();\r\n        }\r\n    }\r\n    return outputValue;\r\n}\n\nconst GraphQLNegativeFloat = \r\n/*#__PURE__*/ new GraphQLScalarType({\r\n    name: 'NegativeFloat',\r\n    description: 'Floats that will have a value less than 0.',\r\n    serialize(value) {\r\n        return processValue(value, 'NegativeFloat');\r\n    },\r\n    parseValue(value) {\r\n        return processValue(value, 'NegativeFloat');\r\n    },\r\n    parseLiteral(ast) {\r\n        if (ast.kind !== Kind.FLOAT && ast.kind !== Kind.INT) {\r\n            throw new GraphQLError(`Can only validate floating point numbers as negative floating point numbers but got a: ${ast.kind}`);\r\n        }\r\n        return processValue(ast.value, 'NegativeFloat');\r\n    },\r\n    extensions: {\r\n        codegenScalarType: 'number',\r\n    },\r\n});\n\nconst GraphQLNegativeInt = \r\n/*#__PURE__*/ new GraphQLScalarType({\r\n    name: 'NegativeInt',\r\n    description: 'Integers that will have a value less than 0.',\r\n    serialize(value) {\r\n        return processValue(value, 'NegativeInt');\r\n    },\r\n    parseValue(value) {\r\n        return processValue(value, 'NegativeInt');\r\n    },\r\n    parseLiteral(ast) {\r\n        if (ast.kind !== Kind.INT) {\r\n            throw new GraphQLError(`Can only validate integers as negative integers but got a: ${ast.kind}`);\r\n        }\r\n        return processValue(ast.value, 'NegativeInt');\r\n    },\r\n    extensions: {\r\n        codegenScalarType: 'number',\r\n    },\r\n});\n\nconst validate$2 = (value) => {\r\n    if (typeof value !== 'string') {\r\n        throw new TypeError(`Value is not a string: ${value}`);\r\n    }\r\n    if (!value.trim().length) {\r\n        throw new TypeError(`Value cannot be an empty string: ${value}`);\r\n    }\r\n    return value;\r\n};\r\nconst GraphQLNonEmptyString = \r\n/*#__PURE__*/ new GraphQLScalarType({\r\n    name: 'NonEmptyString',\r\n    description: 'A string that cannot be passed as an empty value',\r\n    serialize: validate$2,\r\n    parseValue: validate$2,\r\n    parseLiteral(ast) {\r\n        if (ast.kind !== Kind.STRING) {\r\n            throw new GraphQLError(`Can only validate strings but got a: ${ast.kind}`);\r\n        }\r\n        return validate$2(ast.value);\r\n    },\r\n    extensions: {\r\n        codegenScalarType: 'string',\r\n    },\r\n});\n\nconst GraphQLNonNegativeFloatConfig = \r\n/*#__PURE__*/ {\r\n    name: 'NonNegativeFloat',\r\n    description: 'Floats that will have a value of 0 or more.',\r\n    serialize(value) {\r\n        return processValue(value, 'NonNegativeFloat');\r\n    },\r\n    parseValue(value) {\r\n        return processValue(value, 'NonNegativeFloat');\r\n    },\r\n    parseLiteral(ast) {\r\n        if (ast.kind !== Kind.FLOAT && ast.kind !== Kind.INT) {\r\n            throw new GraphQLError(`Can only validate floating point numbers as non-negative floating point numbers but got a: ${ast.kind}`);\r\n        }\r\n        return processValue(ast.value, 'NonNegativeFloat');\r\n    },\r\n    extensions: {\r\n        codegenScalarType: 'number',\r\n    },\r\n};\r\nconst GraphQLNonNegativeFloat = \r\n/*#__PURE__*/ new GraphQLScalarType(GraphQLNonNegativeFloatConfig);\n\nconst GraphQLNonNegativeIntConfig = \r\n/*#__PURE__*/ {\r\n    name: 'NonNegativeInt',\r\n    description: 'Integers that will have a value of 0 or more.',\r\n    serialize(value) {\r\n        return processValue(value, 'NonNegativeInt');\r\n    },\r\n    parseValue(value) {\r\n        return processValue(value, 'NonNegativeInt');\r\n    },\r\n    parseLiteral(ast) {\r\n        if (ast.kind !== Kind.INT) {\r\n            throw new GraphQLError(`Can only validate integers as non-negative integers but got a: ${ast.kind}`);\r\n        }\r\n        return processValue(ast.value, 'NonNegativeInt');\r\n    },\r\n    extensions: {\r\n        codegenScalarType: 'number',\r\n    },\r\n};\r\nconst GraphQLNonNegativeInt = \r\n/*#__PURE__*/ new GraphQLScalarType(GraphQLNonNegativeIntConfig);\n\nconst GraphQLNonPositiveFloat = \r\n/*#__PURE__*/ new GraphQLScalarType({\r\n    name: 'NonPositiveFloat',\r\n    description: 'Floats that will have a value of 0 or less.',\r\n    serialize(value) {\r\n        return processValue(value, 'NonPositiveFloat');\r\n    },\r\n    parseValue(value) {\r\n        return processValue(value, 'NonPositiveFloat');\r\n    },\r\n    parseLiteral(ast) {\r\n        if (ast.kind !== Kind.FLOAT && ast.kind !== Kind.INT) {\r\n            throw new GraphQLError(`Can only validate floating point numbers as non-positive floating point numbers but got a: ${ast.kind}`);\r\n        }\r\n        return processValue(ast.value, 'NonPositiveFloat');\r\n    },\r\n    extensions: {\r\n        codegenScalarType: 'number',\r\n    },\r\n});\n\nconst GraphQLNonPositiveInt = \r\n/*#__PURE__*/ new GraphQLScalarType({\r\n    name: 'NonPositiveInt',\r\n    description: 'Integers that will have a value of 0 or less.',\r\n    serialize(value) {\r\n        return processValue(value, 'NonPositiveInt');\r\n    },\r\n    parseValue(value) {\r\n        return processValue(value, 'NonPositiveInt');\r\n    },\r\n    parseLiteral(ast) {\r\n        if (ast.kind !== Kind.INT) {\r\n            throw new GraphQLError(`Can only validate integers as non-positive integers but got a: ${ast.kind}`);\r\n        }\r\n        return processValue(ast.value, 'NonPositiveInt');\r\n    },\r\n    extensions: {\r\n        codegenScalarType: 'number',\r\n    },\r\n});\n\nconst PHONE_NUMBER_REGEX = /^\\+[1-9]\\d{6,14}$/;\r\nconst GraphQLPhoneNumber = \r\n/*#__PURE__*/ new GraphQLScalarType({\r\n    name: 'PhoneNumber',\r\n    description: 'A field whose value conforms to the standard E.164 format as specified in: https://en.wikipedia.org/wiki/E.164. Basically this is +17895551234.',\r\n    serialize(value) {\r\n        if (typeof value !== 'string') {\r\n            throw new TypeError(`Value is not string: ${value}`);\r\n        }\r\n        if (!PHONE_NUMBER_REGEX.test(value)) {\r\n            throw new TypeError(`Value is not a valid phone number of the form +17895551234 (7-15 digits): ${value}`);\r\n        }\r\n        return value;\r\n    },\r\n    parseValue(value) {\r\n        if (typeof value !== 'string') {\r\n            throw new TypeError(`Value is not string: ${value}`);\r\n        }\r\n        if (!PHONE_NUMBER_REGEX.test(value)) {\r\n            throw new TypeError(`Value is not a valid phone number of the form +17895551234 (7-15 digits): ${value}`);\r\n        }\r\n        return value;\r\n    },\r\n    parseLiteral(ast) {\r\n        if (ast.kind !== Kind.STRING) {\r\n            throw new GraphQLError(`Can only validate strings as phone numbers but got a: ${ast.kind}`);\r\n        }\r\n        if (!PHONE_NUMBER_REGEX.test(ast.value)) {\r\n            throw new TypeError(`Value is not a valid phone number of the form +17895551234 (7-15 digits): ${ast.value}`);\r\n        }\r\n        return ast.value;\r\n    },\r\n    extensions: {\r\n        codegenScalarType: 'string',\r\n    },\r\n});\n\nconst GraphQLPositiveFloat = \r\n/*#__PURE__*/ new GraphQLScalarType({\r\n    name: 'PositiveFloat',\r\n    description: 'Floats that will have a value greater than 0.',\r\n    serialize(value) {\r\n        return processValue(value, 'PositiveFloat');\r\n    },\r\n    parseValue(value) {\r\n        return processValue(value, 'PositiveFloat');\r\n    },\r\n    parseLiteral(ast) {\r\n        if (ast.kind !== Kind.FLOAT && ast.kind !== Kind.INT) {\r\n            throw new GraphQLError(`Can only validate floating point numbers as positive floating point numbers but got a: ${ast.kind}`);\r\n        }\r\n        return processValue(ast.value, 'PositiveFloat');\r\n    },\r\n    extensions: {\r\n        codegenScalarType: 'number',\r\n    },\r\n});\n\nconst GraphQLPositiveInt = \r\n/*#__PURE__*/ new GraphQLScalarType({\r\n    name: 'PositiveInt',\r\n    description: 'Integers that will have a value greater than 0.',\r\n    serialize(value) {\r\n        return processValue(value, 'PositiveInt');\r\n    },\r\n    parseValue(value) {\r\n        return processValue(value, 'PositiveInt');\r\n    },\r\n    parseLiteral(ast) {\r\n        if (ast.kind !== Kind.INT) {\r\n            throw new GraphQLError(`Can only validate integers as positive integers but got a: ${ast.kind}`);\r\n        }\r\n        return processValue(ast.value, 'PositiveInt');\r\n    },\r\n    extensions: {\r\n        codegenScalarType: 'number',\r\n    },\r\n});\n\n// We're going to start with a limited set as suggested here:\r\n// http://www.pixelenvision.com/1708/zip-postal-code-validation-regex-php-code-for-12-countries/\r\n// and here:\r\n// https://stackoverflow.com/questions/578406/what-is-the-ultimate-postal-code-and-zip-regex\r\n//\r\n// Which gives us the following countries:\r\n//\r\n// US - United States\r\n// UK - United Kingdom\r\n// DE - Germany\r\n// CA - Canada\r\n// FR - France\r\n// IT - Italy\r\n// AU - Australia\r\n// NL - Netherlands\r\n// ES - Spain\r\n// DK - Denmark\r\n// SE - Sweden\r\n// BE - Belgium\r\n// IN - India\r\n// AT - Austria\r\n// PT - Portugal\r\n// CH - Switzerland\r\n// LU - Luxembourg\r\n// IR - Iran\r\n// JP - Japan\r\n//\r\n// This is really a practical decision of weight (of the package) vs. completeness.\r\n//\r\n// In the future we might expand this list and use the more comprehensive list found here:\r\n// http://unicode.org/cldr/trac/browser/tags/release-26-0-1/common/supplemental/postalCodeData.xml\r\n// prettier-ignore\r\nconst POSTAL_CODE_REGEXES = [\r\n    /* US */ /*#__PURE__*/ /^\\d{5}([-]?\\d{4})?$/,\r\n    /* UK */ /*#__PURE__*/ /^(GIR|[A-Z]\\d[A-Z\\d]??|[A-Z]{2}\\d[A-Z\\d]??)[ ]??(\\d[A-Z]{2})$/,\r\n    /* DE */ /*#__PURE__*/ /\\b((?:0[1-46-9]\\d{3})|(?:[1-357-9]\\d{4})|(?:[4][0-24-9]\\d{3})|(?:[6][013-9]\\d{3}))\\b/,\r\n    /* CA */ /*#__PURE__*/ /^([ABCEGHJKLMNPRSTVXY]\\d[ABCEGHJKLMNPRSTVWXYZ]) {0,1}(\\d[ABCEGHJKLMNPRSTVWXYZ]\\d)$/,\r\n    /* FR */ /*#__PURE__*/ /^(F-)?((2[A|B])|[0-9]{2})[0-9]{3}$/,\r\n    /* IT */ /*#__PURE__*/ /^(V-|I-)?[0-9]{5}$/,\r\n    /* AU */ /*#__PURE__*/ /^(0[289][0-9]{2})|([1345689][0-9]{3})|(2[0-8][0-9]{2})|(290[0-9])|(291[0-4])|(7[0-4][0-9]{2})|(7[8-9][0-9]{2})$/,\r\n    /* NL */ /*#__PURE__*/ /^[1-9][0-9]{3}\\s?([a-zA-Z]{2})?$/,\r\n    /* ES */ /*#__PURE__*/ /^([1-9]{2}|[0-9][1-9]|[1-9][0-9])[0-9]{3}$/,\r\n    /* DK */ /*#__PURE__*/ /^([D|d][K|k]( |-))?[1-9]{1}[0-9]{3}$/,\r\n    /* SE */ /*#__PURE__*/ /^(s-|S-){0,1}[0-9]{3}\\s?[0-9]{2}$/,\r\n    /* BE */ /*#__PURE__*/ /^[1-9]{1}[0-9]{3}$/,\r\n    /* IN */ /*#__PURE__*/ /^\\d{6}$/,\r\n    /* AT */ /*#__PURE__*/ /^\\d{4}$/,\r\n    /* PT */ /*#__PURE__*/ /^\\d{4}([\\-]\\d{3})?$/,\r\n    /* CH */ /*#__PURE__*/ /^\\d{4}$/,\r\n    /* LU */ /*#__PURE__*/ /^\\d{4}$/,\r\n    /* IR */ /*#__PURE__*/ /^[1,3-9]{10}$/,\r\n    /* JP */ /*#__PURE__*/ /^\\d{3}-\\d{4}$/\r\n];\r\nfunction _testPostalCode(postalCode) {\r\n    let result = false;\r\n    // eslint-disable-next-line no-plusplus\r\n    for (let i = 0; i < POSTAL_CODE_REGEXES.length; i++) {\r\n        const regex = POSTAL_CODE_REGEXES[i];\r\n        if (regex.test(postalCode)) {\r\n            result = true;\r\n            break;\r\n        }\r\n    }\r\n    return result;\r\n}\r\nconst GraphQLPostalCode = \r\n/*#__PURE__*/ new GraphQLScalarType({\r\n    name: 'PostalCode',\r\n    description: 'A field whose value conforms to the standard postal code formats for United States, United Kingdom, Germany, Canada, France, Italy, Australia, Netherlands, Spain, Denmark, Sweden, Belgium, India, Austria, Portugal, Switzerland or Luxembourg.',\r\n    serialize(value) {\r\n        if (typeof value !== 'string') {\r\n            throw new TypeError(`Value is not string: ${value}`);\r\n        }\r\n        if (!_testPostalCode(value)) {\r\n            throw new TypeError(`Value is not a valid postal code: ${value}`);\r\n        }\r\n        return value;\r\n    },\r\n    parseValue(value) {\r\n        if (typeof value !== 'string') {\r\n            throw new TypeError(`Value is not string: ${value}`);\r\n        }\r\n        if (!_testPostalCode(value)) {\r\n            throw new TypeError(`Value is not a valid postal code: ${value}`);\r\n        }\r\n        return value;\r\n    },\r\n    parseLiteral(ast) {\r\n        if (ast.kind !== Kind.STRING) {\r\n            throw new GraphQLError(`Can only validate strings as postal codes but got a: ${ast.kind}`);\r\n        }\r\n        if (!_testPostalCode(ast.value)) {\r\n            throw new TypeError(`Value is not a valid postal code: ${ast.value}`);\r\n        }\r\n        return ast.value;\r\n    },\r\n    extensions: {\r\n        codegenScalarType: 'string',\r\n    },\r\n});\n\nconst GraphQLUnsignedFloatConfig = /*#__PURE__*/ Object.assign({}, GraphQLNonNegativeFloatConfig, {\r\n    name: 'UnsignedFloat',\r\n});\r\nconst GraphQLUnsignedFloat = \r\n/*#__PURE__*/ new GraphQLScalarType(GraphQLUnsignedFloatConfig);\n\nconst GraphQLUnsignedIntConfig = /*#__PURE__*/ Object.assign({}, GraphQLNonNegativeIntConfig, {\r\n    name: 'UnsignedInt',\r\n});\r\nconst GraphQLUnsignedInt = \r\n/*#__PURE__*/ new GraphQLScalarType(GraphQLUnsignedIntConfig);\n\nconst GraphQLURL = \r\n/*#__PURE__*/ new GraphQLScalarType({\r\n    name: 'URL',\r\n    description: 'A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.',\r\n    serialize(value) {\r\n        if (value === null) {\r\n            return value;\r\n        }\r\n        return new URL(value.toString()).toString();\r\n    },\r\n    parseValue: (value) => (value === null ? value : new URL(value.toString())),\r\n    parseLiteral(ast) {\r\n        if (ast.kind !== Kind.STRING) {\r\n            throw new GraphQLError(`Can only validate strings as URLs but got a: ${ast.kind}`);\r\n        }\r\n        if (ast.value === null) {\r\n            return ast.value;\r\n        }\r\n        else {\r\n            return new URL(ast.value.toString());\r\n        }\r\n    },\r\n    extensions: {\r\n        codegenScalarType: 'URL | string',\r\n    },\r\n});\n\nconst GraphQLBigIntConfig = {\r\n    name: 'BigInt',\r\n    description: 'The `BigInt` scalar type represents non-fractional signed whole numeric values.',\r\n    serialize(outputValue) {\r\n        const coercedValue = serializeObject(outputValue);\r\n        let num = coercedValue;\r\n        if (typeof coercedValue === 'object' &&\r\n            coercedValue != null &&\r\n            'toString' in coercedValue) {\r\n            num = BigInt(coercedValue.toString());\r\n            if (num.toString() !== coercedValue.toString()) {\r\n                throw new GraphQLError(`BigInt cannot represent non-integer value: ${coercedValue}`);\r\n            }\r\n        }\r\n        if (typeof coercedValue === 'boolean') {\r\n            num = BigInt(coercedValue);\r\n        }\r\n        if (typeof coercedValue === 'string' && coercedValue !== '') {\r\n            num = BigInt(coercedValue);\r\n            if (num.toString() !== coercedValue) {\r\n                throw new GraphQLError(`BigInt cannot represent non-integer value: ${coercedValue}`);\r\n            }\r\n        }\r\n        if (typeof coercedValue === 'number') {\r\n            if (!Number.isInteger(coercedValue)) {\r\n                throw new GraphQLError(`BigInt cannot represent non-integer value: ${coercedValue}`);\r\n            }\r\n            num = BigInt(coercedValue);\r\n        }\r\n        if (typeof num !== 'bigint') {\r\n            throw new GraphQLError(`BigInt cannot represent non-integer value: ${coercedValue}`);\r\n        }\r\n        if ('toJSON' in BigInt.prototype) {\r\n            return num;\r\n        }\r\n        return new Proxy({}, {\r\n            has(_, prop) {\r\n                if (prop === 'toJSON') {\r\n                    return true;\r\n                }\r\n                return prop in BigInt.prototype;\r\n            },\r\n            get(_, prop) {\r\n                if (prop === 'toJSON') {\r\n                    return function toJSON() {\r\n                        if (num > Number.MAX_SAFE_INTEGER) {\r\n                            return num.toString();\r\n                        }\r\n                        return Number(num);\r\n                    };\r\n                }\r\n                if (prop === Symbol.toStringTag) {\r\n                    return num.toString();\r\n                }\r\n                if (prop in BigInt.prototype) {\r\n                    return BigInt.prototype[prop].bind(num);\r\n                }\r\n                return undefined;\r\n            },\r\n        });\r\n    },\r\n    parseValue(inputValue) {\r\n        const num = BigInt(inputValue.toString());\r\n        if (inputValue.toString() !== num.toString()) {\r\n            throw new GraphQLError(`BigInt cannot represent value: ${inputValue}`);\r\n        }\r\n        return num;\r\n    },\r\n    parseLiteral(valueNode) {\r\n        if (valueNode.kind !== Kind.INT) {\r\n            throw new GraphQLError(`BigInt cannot represent non-integer value: ${print(valueNode)}`, valueNode);\r\n        }\r\n        const num = BigInt(valueNode.value);\r\n        if (num.toString() !== valueNode.value) {\r\n            throw new GraphQLError(`BigInt cannot represent value: ${valueNode.value}`, valueNode);\r\n        }\r\n        return num;\r\n    },\r\n    extensions: {\r\n        codegenScalarType: 'bigint',\r\n    },\r\n};\r\nconst GraphQLBigInt = \r\n/*#__PURE__*/ new GraphQLScalarType(GraphQLBigIntConfig);\n\nconst base64Validator = /^(?:[A-Za-z0-9+\\/]{4})*(?:[A-Za-z0-9+\\/]{2}==|[A-Za-z0-9+\\/]{3}=)?$/;\r\nfunction hexValidator(value) {\r\n    // Ensure that any leading 0 is removed from the hex string to avoid false negatives.\r\n    const sanitizedValue = value.charAt(0) === '0' ? value.slice(1) : value;\r\n    // For larger strings, we run into issues with MAX_SAFE_INTEGER, so split the string\r\n    // into smaller pieces to avoid this issue.\r\n    if (value.length > 8) {\r\n        let parsedString = '';\r\n        for (let startIndex = 0, endIndex = 8; startIndex < value.length; startIndex += 8, endIndex += 8) {\r\n            parsedString += parseInt(value.slice(startIndex, endIndex), 16).toString(16);\r\n        }\r\n        return parsedString === sanitizedValue;\r\n    }\r\n    return parseInt(value, 16).toString(16) === sanitizedValue;\r\n}\r\nfunction validate$3(value) {\r\n    if (typeof value !== 'string' && !(value instanceof global.Buffer)) {\r\n        throw new TypeError(`Value is not an instance of Buffer: ${JSON.stringify(value)}`);\r\n    }\r\n    if (typeof value === 'string') {\r\n        const isBase64 = base64Validator.test(value);\r\n        const isHex = hexValidator(value);\r\n        if (!isBase64 && !isHex) {\r\n            throw new TypeError(`Value is not a valid base64 or hex encoded string: ${JSON.stringify(value)}`);\r\n        }\r\n        return global.Buffer.from(value, isHex ? 'hex' : 'base64');\r\n    }\r\n    return value;\r\n}\r\nfunction parseObject(ast) {\r\n    const key = ast.fields[0].value;\r\n    const value = ast.fields[1].value;\r\n    if (ast.fields.length === 2 &&\r\n        key.kind === Kind.STRING &&\r\n        key.value === 'Buffer' &&\r\n        value.kind === Kind.LIST) {\r\n        return global.Buffer.from(value.values.map((astValue) => parseInt(astValue.value)));\r\n    }\r\n    throw new TypeError(`Value is not a JSON representation of Buffer: ${print(ast)}`);\r\n}\r\nconst GraphQLByteConfig = {\r\n    name: 'Byte',\r\n    description: 'The `Byte` scalar type represents byte value as a Buffer',\r\n    serialize: validate$3,\r\n    parseValue: validate$3,\r\n    parseLiteral(ast) {\r\n        switch (ast.kind) {\r\n            case Kind.STRING:\r\n                return validate$3(ast.value);\r\n            case Kind.OBJECT:\r\n                return parseObject(ast);\r\n            default:\r\n                throw new TypeError(`Can only parse base64 or hex encoded strings as Byte, but got a: ${ast.kind}`);\r\n        }\r\n    },\r\n    extensions: {\r\n        codegenScalarType: 'Buffer | string',\r\n    },\r\n};\r\nconst GraphQLByte = \r\n/*#__PURE__*/ new GraphQLScalarType(GraphQLByteConfig);\n\nconst GraphQLLongConfig = /*#__PURE__*/ Object.assign({}, GraphQLBigIntConfig, {\r\n    name: 'Long',\r\n});\r\nconst GraphQLLong = \r\n/*#__PURE__*/ new GraphQLScalarType(GraphQLLongConfig);\n\n// Based on https://github.com/stems/graphql-bigint/\r\nconst specifiedByURL$1 = 'https://www.ecma-international.org/ecma-262/#sec-number.issafeinteger';\r\nconst GraphQLSafeIntConfig = {\r\n    name: 'SafeInt',\r\n    description: 'The `SafeInt` scalar type represents non-fractional signed whole numeric values that are ' +\r\n        'considered safe as defined by the ECMAScript specification.',\r\n    specifiedByURL: specifiedByURL$1,\r\n    specifiedByUrl: specifiedByURL$1,\r\n    serialize(outputValue) {\r\n        const coercedValue = serializeObject(outputValue);\r\n        if (typeof coercedValue === 'boolean') {\r\n            return coercedValue ? 1 : 0;\r\n        }\r\n        let num = coercedValue;\r\n        if (typeof coercedValue === 'string' && coercedValue !== '') {\r\n            num = Number(coercedValue);\r\n        }\r\n        if (typeof num !== 'number' || !Number.isInteger(num)) {\r\n            throw new GraphQLError(`SafeInt cannot represent non-integer value: ${coercedValue}`);\r\n        }\r\n        if (!Number.isSafeInteger(num)) {\r\n            throw new GraphQLError('SafeInt cannot represent unsafe integer value: ' + coercedValue);\r\n        }\r\n        return num;\r\n    },\r\n    parseValue(inputValue) {\r\n        if (typeof inputValue !== 'number' || !Number.isInteger(inputValue)) {\r\n            throw new GraphQLError(`SafeInt cannot represent non-integer value: ${inputValue}`);\r\n        }\r\n        if (!Number.isSafeInteger(inputValue)) {\r\n            throw new GraphQLError(`SafeInt cannot represent unsafe integer value: ${inputValue}`);\r\n        }\r\n        return inputValue;\r\n    },\r\n    parseLiteral(valueNode) {\r\n        if (valueNode.kind !== Kind.INT) {\r\n            throw new GraphQLError(`SafeInt cannot represent non-integer value: ${print(valueNode)}`, valueNode);\r\n        }\r\n        const num = parseInt(valueNode.value, 10);\r\n        if (!Number.isSafeInteger(num)) {\r\n            throw new GraphQLError(`SafeInt cannot represent unsafe integer value: ${valueNode.value}`, valueNode);\r\n        }\r\n        return num;\r\n    },\r\n    extensions: {\r\n        codegenScalarType: 'number',\r\n    },\r\n};\r\nconst GraphQLSafeInt = \r\n/*#__PURE__*/ new GraphQLScalarType(GraphQLSafeIntConfig);\n\nconst validate$4 = (value) => {\r\n    const UUID_REGEX = /^(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}$/gi;\r\n    if (typeof value !== 'string') {\r\n        throw new TypeError(`Value is not string: ${value}`);\r\n    }\r\n    if (value.startsWith('{')) {\r\n        value = value.substring(1, value.length - 1);\r\n    }\r\n    if (!UUID_REGEX.test(value)) {\r\n        throw new TypeError(`Value is not a valid UUID: ${value}`);\r\n    }\r\n    return value;\r\n};\r\nconst GraphQLUUIDConfig = \r\n/*#__PURE__*/ {\r\n    name: `UUID`,\r\n    description: `A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier.`,\r\n    serialize(value) {\r\n        return validate$4(value);\r\n    },\r\n    parseValue(value) {\r\n        return validate$4(value);\r\n    },\r\n    parseLiteral(ast) {\r\n        if (ast.kind !== Kind.STRING) {\r\n            throw new GraphQLError(`Can only validate strings as UUIDs but got a: ${ast.kind}`);\r\n        }\r\n        return validate$4(ast.value);\r\n    },\r\n    extensions: {\r\n        codegenScalarType: 'string',\r\n    },\r\n};\r\nconst GraphQLUUID = \r\n/*#__PURE__*/ new GraphQLScalarType(GraphQLUUIDConfig);\n\nconst GraphQLGUIDConfig = /*#__PURE__*/ Object.assign({}, GraphQLUUIDConfig, {\r\n    name: 'GUID',\r\n});\r\nconst GraphQLGUID = \r\n/*#__PURE__*/ new GraphQLScalarType(GraphQLGUIDConfig);\n\nconst validate$5 = (value) => {\r\n    const HEXADECIMAL_REGEX = /^[a-f0-9]+$/i;\r\n    if (typeof value !== 'string') {\r\n        throw new TypeError(`Value is not string: ${value}`);\r\n    }\r\n    if (!HEXADECIMAL_REGEX.test(value)) {\r\n        throw new TypeError(`Value is not a valid hexadecimal value: ${value}`);\r\n    }\r\n    return value;\r\n};\r\nconst GraphQLHexadecimalConfig = \r\n/*#__PURE__*/ {\r\n    name: `Hexadecimal`,\r\n    description: `A field whose value is a hexadecimal: https://en.wikipedia.org/wiki/Hexadecimal.`,\r\n    serialize(value) {\r\n        return validate$5(value);\r\n    },\r\n    parseValue(value) {\r\n        return validate$5(value);\r\n    },\r\n    parseLiteral(ast) {\r\n        if (ast.kind !== Kind.STRING) {\r\n            throw new GraphQLError(`Can only validate strings as a hexadecimal but got a: ${ast.kind}`);\r\n        }\r\n        return validate$5(ast.value);\r\n    },\r\n    extensions: {\r\n        codegenScalarType: 'string',\r\n    },\r\n};\r\nconst GraphQLHexadecimal = \r\n/*#__PURE__*/ new GraphQLScalarType(GraphQLHexadecimalConfig);\n\nconst HEX_COLOR_CODE = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3}|[A-Fa-f0-9]{8})$/;\r\nconst validate$6 = (value) => {\r\n    if (typeof value !== 'string') {\r\n        throw new TypeError(`Value is not string: ${value}`);\r\n    }\r\n    if (!HEX_COLOR_CODE.test(value)) {\r\n        throw new TypeError(`Value is not a valid HexColorCode: ${value}`);\r\n    }\r\n    return value;\r\n};\r\nconst specifiedByURL$2 = 'https://en.wikipedia.org/wiki/Web_colors';\r\nconst GraphQLHexColorCodeConfig = /*#__PURE__*/ {\r\n    name: `HexColorCode`,\r\n    description: `A field whose value is a hex color code: https://en.wikipedia.org/wiki/Web_colors.`,\r\n    serialize(value) {\r\n        return validate$6(value);\r\n    },\r\n    parseValue(value) {\r\n        return validate$6(value);\r\n    },\r\n    parseLiteral(ast) {\r\n        if (ast.kind !== Kind.STRING) {\r\n            throw new GraphQLError(`Can only validate strings as hex color codes but got a: ${ast.kind}`);\r\n        }\r\n        return validate$6(ast.value);\r\n    },\r\n    specifiedByURL: specifiedByURL$2,\r\n    specifiedByUrl: specifiedByURL$2,\r\n    extensions: {\r\n        codegenScalarType: 'string',\r\n    },\r\n};\r\nconst GraphQLHexColorCode = \r\n/*#__PURE__*/ new GraphQLScalarType(GraphQLHexColorCodeConfig);\n\nconst validate$7 = (value) => {\r\n    const HSL_REGEX = /^hsl\\(\\s*(-?\\d+|-?\\d*.\\d+)\\s*,\\s*(-?\\d+|-?\\d*.\\d+)%\\s*,\\s*(-?\\d+|-?\\d*.\\d+)%\\s*\\)$/;\r\n    if (typeof value !== 'string') {\r\n        throw new TypeError(`Value is not string: ${value}`);\r\n    }\r\n    if (!HSL_REGEX.test(value)) {\r\n        throw new TypeError(`Value is not a valid HSL color: ${value}`);\r\n    }\r\n    return value;\r\n};\r\nconst specifiedByURL$3 = 'https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#hsl()_and_hsla()';\r\nconst GraphQLHSLConfig = \r\n/*#__PURE__*/ {\r\n    name: `HSL`,\r\n    description: `A field whose value is a CSS HSL color: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#hsl()_and_hsla().`,\r\n    serialize(value) {\r\n        return validate$7(value);\r\n    },\r\n    parseValue(value) {\r\n        return validate$7(value);\r\n    },\r\n    parseLiteral(ast) {\r\n        if (ast.kind !== Kind.STRING) {\r\n            throw new GraphQLError(`Can only validate strings as HSL colors but got a: ${ast.kind}`);\r\n        }\r\n        return validate$7(ast.value);\r\n    },\r\n    specifiedByURL: specifiedByURL$3,\r\n    specifiedByUrl: specifiedByURL$3,\r\n    extensions: {\r\n        codegenScalarType: 'string',\r\n    },\r\n};\r\nconst GraphQLHSL = \r\n/*#__PURE__*/ new GraphQLScalarType(GraphQLHSLConfig);\n\nconst HSLA_REGEX = /^hsla\\(\\s*(-?\\d+|-?\\d*.\\d+)\\s*,\\s*(-?\\d+|-?\\d*.\\d+)%\\s*,\\s*(-?\\d+|-?\\d*.\\d+)%\\s*,\\s*(-?\\d+|-?\\d*.\\d+)\\s*\\)$/;\r\nconst validate$8 = (value) => {\r\n    if (typeof value !== 'string') {\r\n        throw new TypeError(`Value is not string: ${value}`);\r\n    }\r\n    if (!HSLA_REGEX.test(value)) {\r\n        throw new TypeError(`Value is not a valid HSLA color: ${value}`);\r\n    }\r\n    return value;\r\n};\r\nconst GraphQLHSLA = \r\n/*#__PURE__*/ new GraphQLScalarType({\r\n    name: `HSLA`,\r\n    description: `A field whose value is a CSS HSLA color: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#hsl()_and_hsla().`,\r\n    serialize(value) {\r\n        return validate$8(value);\r\n    },\r\n    parseValue(value) {\r\n        return validate$8(value);\r\n    },\r\n    parseLiteral(ast) {\r\n        if (ast.kind !== Kind.STRING) {\r\n            throw new GraphQLError(`Can only validate strings as HSLA colors but got a: ${ast.kind}`);\r\n        }\r\n        return validate$8(ast.value);\r\n    },\r\n    extensions: {\r\n        codegenScalarType: 'string',\r\n    },\r\n});\n\nconst IPV4_REGEX = /^(?:(?:(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\/(?:[0-9]|[1-2][0-9]|3[0-2]))?)$/;\r\nconst validate$9 = (value) => {\r\n    if (typeof value !== 'string') {\r\n        throw new TypeError(`Value is not string: ${value}`);\r\n    }\r\n    if (!IPV4_REGEX.test(value)) {\r\n        throw new TypeError(`Value is not a valid IPv4 address: ${value}`);\r\n    }\r\n    return value;\r\n};\r\nconst GraphQLIPv4 = \r\n/*#__PURE__*/ new GraphQLScalarType({\r\n    name: `IPv4`,\r\n    description: `A field whose value is a IPv4 address: https://en.wikipedia.org/wiki/IPv4.`,\r\n    serialize(value) {\r\n        return validate$9(value);\r\n    },\r\n    parseValue(value) {\r\n        return validate$9(value);\r\n    },\r\n    parseLiteral(ast) {\r\n        if (ast.kind !== Kind.STRING) {\r\n            throw new GraphQLError(`Can only validate strings as IPv4 addresses but got a: ${ast.kind}`);\r\n        }\r\n        return validate$9(ast.value);\r\n    },\r\n    extensions: {\r\n        codegenScalarType: 'string',\r\n    },\r\n});\n\nconst IPV6_REGEX = /^(?:(?:(?:[0-9A-Fa-f]{1,4}:){6}(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|::(?:[0-9A-Fa-f]{1,4}:){5}(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|(?:[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:){4}(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|(?:(?:[0-9A-Fa-f]{1,4}:){0,1}[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:){3}(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|(?:(?:[0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:){2}(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|(?:(?:[0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})?::[0-9A-Fa-f]{1,4}:(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|(?:(?:[0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|(?:(?:[0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})?::[0-9A-Fa-f]{1,4}|(?:(?:[0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})?::)(?:\\/(?:0?0?[0-9]|0?[1-9][0-9]|1[01][0-9]|12[0-8]))?)$/;\r\nconst validate$a = (value) => {\r\n    if (typeof value !== 'string') {\r\n        throw new TypeError(`Value is not string: ${value}`);\r\n    }\r\n    if (!IPV6_REGEX.test(value)) {\r\n        throw new TypeError(`Value is not a valid IPv6 address: ${value}`);\r\n    }\r\n    return value;\r\n};\r\nconst GraphQLIPv6 = \r\n/*#__PURE__*/ new GraphQLScalarType({\r\n    name: `IPv6`,\r\n    description: `A field whose value is a IPv6 address: https://en.wikipedia.org/wiki/IPv6.`,\r\n    serialize(value) {\r\n        return validate$a(value);\r\n    },\r\n    parseValue(value) {\r\n        return validate$a(value);\r\n    },\r\n    parseLiteral(ast) {\r\n        if (ast.kind !== Kind.STRING) {\r\n            throw new GraphQLError(`Can only validate strings as IPv6 addresses but got a: ${ast.kind}`);\r\n        }\r\n        return validate$a(ast.value);\r\n    },\r\n    extensions: {\r\n        codegenScalarType: 'string',\r\n    },\r\n});\n\nconst ISBN_REGEX_ARR = [\r\n    /^(?:ISBN(?:-10)?:? *)?((?=\\d{1,5}([ -]?)\\d{1,7}\\2?\\d{1,6}\\2?\\d)(?:\\d\\2*){9}[\\dX])$/i,\r\n    /^(?:ISBN(?:-13)?:? *)?(97(?:8|9)([ -]?)(?=\\d{1,5}\\2?\\d{1,7}\\2?\\d{1,6}\\2?\\d)(?:\\d\\2*){9}\\d)$/i,\r\n];\r\nconst validate$b = (value) => {\r\n    if (typeof value !== 'string') {\r\n        throw new TypeError(`Value is not string: ${value}`);\r\n    }\r\n    let valid = false;\r\n    for (const regex of ISBN_REGEX_ARR) {\r\n        if (regex.test(value)) {\r\n            valid = true;\r\n            break;\r\n        }\r\n    }\r\n    if (!valid) {\r\n        throw new TypeError(`Value is not a valid ISBN number: ${value}`);\r\n    }\r\n    return value;\r\n};\r\nconst GraphQLISBN = \r\n/*#__PURE__*/ new GraphQLScalarType({\r\n    name: `ISBN`,\r\n    description: `A field whose value is a ISBN-10 or ISBN-13 number: https://en.wikipedia.org/wiki/International_Standard_Book_Number.`,\r\n    serialize(value) {\r\n        return validate$b(value);\r\n    },\r\n    parseValue(value) {\r\n        return validate$b(value);\r\n    },\r\n    parseLiteral(ast) {\r\n        if (ast.kind !== Kind.STRING) {\r\n            throw new GraphQLError(`Can only validate strings as ISBN numbers but got a: ${ast.kind}`);\r\n        }\r\n        return validate$b(ast.value);\r\n    },\r\n    extensions: {\r\n        codegenScalarType: 'string',\r\n    },\r\n});\n\n// See https://github.com/auth0/node-jws/blob/master/lib/verify-stream.js#L8\r\nconst JWS_REGEX = /^[a-zA-Z0-9\\-_]+?\\.[a-zA-Z0-9\\-_]+?\\.([a-zA-Z0-9\\-_]+)?$/;\r\nconst validate$c = (value) => {\r\n    if (typeof value !== 'string') {\r\n        throw new TypeError(`Value is not string: ${value}`);\r\n    }\r\n    if (!JWS_REGEX.test(value)) {\r\n        throw new TypeError(`Value is not a valid JWT: ${value}`);\r\n    }\r\n    return value;\r\n};\r\nconst GraphQLJWT = \r\n/*#__PURE__*/ new GraphQLScalarType({\r\n    name: `JWT`,\r\n    description: `A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.`,\r\n    serialize(value) {\r\n        return validate$c(value);\r\n    },\r\n    parseValue(value) {\r\n        return validate$c(value);\r\n    },\r\n    parseLiteral(ast) {\r\n        if (ast.kind !== Kind.STRING) {\r\n            throw new GraphQLError(`Can only validate strings as JWT but got a: ${ast.kind}`);\r\n        }\r\n        return validate$c(ast.value);\r\n    },\r\n    extensions: {\r\n        codegenScalarType: 'string',\r\n    },\r\n});\n\n// Inspired by Geolib: https://github.com/manuelbieh/geolib\r\n// Minimum latitude\r\nconst MIN_LAT = -90.0;\r\n// Maximum latitude\r\nconst MAX_LAT = 90.0;\r\n// See https://en.wikipedia.org/wiki/Decimal_degrees#Precision\r\nconst MAX_PRECISION = 8;\r\nconst validate$d = (value) => {\r\n    // Check if value is a string or a number\r\n    if ((typeof value !== 'string' && typeof value !== 'number') ||\r\n        value === null ||\r\n        typeof value === 'undefined' ||\r\n        Number.isNaN(value)) {\r\n        throw new TypeError(`Value is neither a number nor a string: ${value}`);\r\n    }\r\n    if (isDecimal(value)) {\r\n        const decimalValue = typeof value === 'string' ? Number.parseFloat(value) : value;\r\n        if (decimalValue < MIN_LAT || decimalValue > MAX_LAT) {\r\n            throw new RangeError(`Value must be between ${MIN_LAT} and ${MAX_LAT}: ${value}`);\r\n        }\r\n        return Number.parseFloat(decimalValue.toFixed(MAX_PRECISION));\r\n    }\r\n    if (isSexagesimal(value)) {\r\n        return validate$d(sexagesimalToDecimal(value));\r\n    }\r\n    throw new TypeError(`Value is not a valid latitude: ${value}`);\r\n};\r\nconst GraphQLLatitude = \r\n/*#__PURE__*/ new GraphQLScalarType({\r\n    name: `Latitude`,\r\n    description: `A field whose value is a valid decimal degrees latitude number (53.471): https://en.wikipedia.org/wiki/Latitude`,\r\n    serialize(value) {\r\n        return validate$d(value);\r\n    },\r\n    parseValue(value) {\r\n        return validate$d(value);\r\n    },\r\n    parseLiteral(ast) {\r\n        if (ast.kind !== Kind.FLOAT && ast.kind !== Kind.STRING) {\r\n            throw new GraphQLError(`Can only validate floats or strings as latitude but got a: ${ast.kind}`);\r\n        }\r\n        return validate$d(ast.value);\r\n    },\r\n    extensions: {\r\n        codegenScalarType: 'string',\r\n    },\r\n});\n\n// Inspired by Geolib: https://github.com/manuelbieh/geolib\r\n// Minimum longitude\r\nconst MIN_LON = -180.0;\r\n// Maximum longitude\r\nconst MAX_LON = 180.0;\r\n// See https://en.wikipedia.org/wiki/Decimal_degrees#Precision\r\nconst MAX_PRECISION$1 = 8;\r\nconst validate$e = (value) => {\r\n    // Check if value is a string or a number\r\n    if ((typeof value !== 'string' && typeof value !== 'number') ||\r\n        value === null ||\r\n        typeof value === 'undefined' ||\r\n        Number.isNaN(value)) {\r\n        throw new TypeError(`Value is neither a number nor a string: ${value}`);\r\n    }\r\n    if (isDecimal(value)) {\r\n        const decimalValue = typeof value === 'string' ? Number.parseFloat(value) : value;\r\n        if (decimalValue < MIN_LON || decimalValue > MAX_LON) {\r\n            throw new RangeError(`Value must be between ${MIN_LON} and ${MAX_LON}: ${value}`);\r\n        }\r\n        return Number.parseFloat(decimalValue.toFixed(MAX_PRECISION$1));\r\n    }\r\n    if (isSexagesimal(value)) {\r\n        return validate$e(sexagesimalToDecimal(value));\r\n    }\r\n    throw new TypeError(`Value is not a valid longitude: ${value}`);\r\n};\r\nconst GraphQLLongitude = \r\n/*#__PURE__*/ new GraphQLScalarType({\r\n    name: `Longitude`,\r\n    description: `A field whose value is a valid decimal degrees longitude number (53.471): https://en.wikipedia.org/wiki/Longitude`,\r\n    serialize(value) {\r\n        return validate$e(value);\r\n    },\r\n    parseValue(value) {\r\n        return validate$e(value);\r\n    },\r\n    parseLiteral(ast) {\r\n        if (ast.kind !== Kind.FLOAT && ast.kind !== Kind.STRING) {\r\n            throw new GraphQLError(`Can only validate floats or strings as longitude but got a: ${ast.kind}`);\r\n        }\r\n        return validate$e(ast.value);\r\n    },\r\n    extensions: {\r\n        codegenScalarType: 'string | number',\r\n    },\r\n});\n\nconst MAC_REGEX = /^(?:[0-9A-Fa-f]{2}([:-]?)[0-9A-Fa-f]{2})(?:(?:\\1|\\.)(?:[0-9A-Fa-f]{2}([:-]?)[0-9A-Fa-f]{2})){2}$/;\r\nconst validate$f = (value) => {\r\n    if (typeof value !== 'string') {\r\n        throw new TypeError(`Value is not string: ${value}`);\r\n    }\r\n    if (!MAC_REGEX.test(value)) {\r\n        throw new TypeError(`Value is not a valid MAC address: ${value}`);\r\n    }\r\n    return value;\r\n};\r\nconst GraphQLMAC = \r\n/*#__PURE__*/ new GraphQLScalarType({\r\n    name: `MAC`,\r\n    description: `A field whose value is a IEEE 802 48-bit MAC address: https://en.wikipedia.org/wiki/MAC_address.`,\r\n    serialize(value) {\r\n        return validate$f(value);\r\n    },\r\n    parseValue(value) {\r\n        return validate$f(value);\r\n    },\r\n    parseLiteral(ast) {\r\n        if (ast.kind !== Kind.STRING) {\r\n            throw new GraphQLError(`Can only validate strings as MAC addresses but got a: ${ast.kind}`);\r\n        }\r\n        return validate$f(ast.value);\r\n    },\r\n    extensions: {\r\n        codegenScalarType: 'string',\r\n    },\r\n});\n\nconst validate$g = (value) => {\r\n    const parsed = typeof value === 'string' ? parseInt(value, 10) : value;\r\n    if (typeof parsed !== 'number' || Number.isNaN(parsed)) {\r\n        throw new TypeError(`Value is not a number: ${value}`);\r\n    }\r\n    if (parsed === Infinity || parsed === -Infinity) {\r\n        throw new TypeError(`Value is not a finite number: ${value}`);\r\n    }\r\n    if (parsed <= 0 || parsed > 65535) {\r\n        throw new TypeError(`Value is not a valid TCP port: ${value}`);\r\n    }\r\n    return parsed;\r\n};\r\nconst GraphQLPort = \r\n/*#__PURE__*/ new GraphQLScalarType({\r\n    name: `Port`,\r\n    description: `A field whose value is a valid TCP port within the range of 0 to 65535: https://en.wikipedia.org/wiki/Transmission_Control_Protocol#TCP_ports`,\r\n    serialize(value) {\r\n        return validate$g(value);\r\n    },\r\n    parseValue(value) {\r\n        return validate$g(value);\r\n    },\r\n    parseLiteral(ast) {\r\n        if (ast.kind !== Kind.INT) {\r\n            throw new GraphQLError(`Can only validate integers as TCP ports but got a: ${ast.kind}`);\r\n        }\r\n        return validate$g(ast.value);\r\n    },\r\n    extensions: {\r\n        codegenScalarType: 'string | number',\r\n    },\r\n});\n\nconst RGB_REGEX = /^rgb\\(\\s*(-?\\d+|-?\\d*\\.\\d+(?=%))(%?)\\s*,\\s*(-?\\d+|-?\\d*\\.\\d+(?=%))(\\2)\\s*,\\s*(-?\\d+|-?\\d*\\.\\d+(?=%))(\\2)\\s*\\)$/;\r\nconst validate$h = (value) => {\r\n    if (typeof value !== 'string') {\r\n        throw new TypeError(`Value is not string: ${value}`);\r\n    }\r\n    if (!RGB_REGEX.test(value)) {\r\n        throw new TypeError(`Value is not a valid RGB color: ${value}`);\r\n    }\r\n    return value;\r\n};\r\nconst GraphQLRGB = \r\n/*#__PURE__*/ new GraphQLScalarType({\r\n    name: `RGB`,\r\n    description: `A field whose value is a CSS RGB color: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba().`,\r\n    serialize(value) {\r\n        return validate$h(value);\r\n    },\r\n    parseValue(value) {\r\n        return validate$h(value);\r\n    },\r\n    parseLiteral(ast) {\r\n        if (ast.kind !== Kind.STRING) {\r\n            throw new GraphQLError(`Can only validate strings as RGB colors but got a: ${ast.kind}`);\r\n        }\r\n        return validate$h(ast.value);\r\n    },\r\n    extensions: {\r\n        codegenScalarType: 'string',\r\n    },\r\n});\n\nconst RGBA_REGEX = /^rgba\\(\\s*(-?\\d+|-?\\d*\\.\\d+(?=%))(%?)\\s*,\\s*(-?\\d+|-?\\d*\\.\\d+(?=%))(\\2)\\s*,\\s*(-?\\d+|-?\\d*\\.\\d+(?=%))(\\2)\\s*,\\s*(-?\\d+|-?\\d*.\\d+)\\s*\\)$/;\r\nconst validate$i = (value) => {\r\n    if (typeof value !== 'string') {\r\n        throw new TypeError(`Value is not string: ${value}`);\r\n    }\r\n    if (!RGBA_REGEX.test(value)) {\r\n        throw new TypeError(`Value is not a valid RGBA color: ${value}`);\r\n    }\r\n    return value;\r\n};\r\nconst GraphQLRGBA = \r\n/*#__PURE__*/ new GraphQLScalarType({\r\n    name: `RGBA`,\r\n    description: `A field whose value is a CSS RGBA color: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba().`,\r\n    serialize(value) {\r\n        return validate$i(value);\r\n    },\r\n    parseValue(value) {\r\n        return validate$i(value);\r\n    },\r\n    parseLiteral(ast) {\r\n        if (ast.kind !== Kind.STRING) {\r\n            throw new GraphQLError(`Can only validate strings as RGBA colors but got a: ${ast.kind}`);\r\n        }\r\n        return validate$i(ast.value);\r\n    },\r\n    extensions: {\r\n        codegenScalarType: 'string',\r\n    },\r\n});\n\n// https://github.com/abhiaiyer91/graphql-currency-scalars\r\nfunction generateCurrency(value) {\r\n    if (typeof value !== 'number') {\r\n        throw new TypeError(`Currency cannot represent non integer type ${JSON.stringify(value)}`);\r\n    }\r\n    const currencyInCents = parseInt(value.toString(), 10);\r\n    return (currencyInCents / 100).toLocaleString('en-US', {\r\n        style: 'currency',\r\n        currency: 'USD',\r\n    });\r\n}\r\nfunction generateCents(value) {\r\n    const digits = value.replace('$', '').replace(',', '');\r\n    const number = parseFloat(digits);\r\n    return number * 100;\r\n}\r\n/**\r\n * An Currency Scalar.\r\n *\r\n * Input:\r\n *    This scalar takes a currency string as input and\r\n *    formats it to currency in cents.\r\n *\r\n * Output:\r\n *    This scalar serializes currency in cents to\r\n *    currency strings.\r\n */\r\nconst GraphQLUSCurrency = \r\n/*#__PURE__*/ new GraphQLScalarType({\r\n    name: 'USCurrency',\r\n    description: 'A currency string, such as $21.25',\r\n    serialize: generateCurrency,\r\n    parseValue(value) {\r\n        if (typeof value !== 'string') {\r\n            throw new TypeError(`Currency cannot represent non string type ${JSON.stringify(value)}`);\r\n        }\r\n        return generateCents(value);\r\n    },\r\n    parseLiteral(ast) {\r\n        if (ast.kind === Kind.STRING) {\r\n            if (typeof ast.value === 'string') {\r\n                return generateCents(ast.value);\r\n            }\r\n        }\r\n        throw new TypeError(`Currency cannot represent an invalid currency-string ${JSON.stringify(ast)}.`);\r\n    },\r\n    extensions: {\r\n        codegenScalarType: 'string',\r\n    },\r\n});\n\nconst validate$j = (value) => {\r\n    const CURRENCY_REGEX = /^(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BOV|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHE|CHF|CHW|CLF|CLP|CNY|COP|COU|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|INR|IQD|IRR|ISK|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRU|MUR|MVR|MWK|MXN|MXV|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SRD|SSP|STN|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TWD|TZS|UAH|UGX|USD|USN|UYI|UYU|UYW|UZS|VES|VND|VUV|WST|XAF|XAG|XAU|XBA|XBB|XBC|XBD|XCD|XDR|XOF|XPD|XPF|XPT|XSU|XTS|XUA|XXX|YER|ZAR|ZMW|ZWL)$/i;\r\n    if (typeof value !== 'string') {\r\n        throw new TypeError(`Value is not string: ${value}`);\r\n    }\r\n    if (!CURRENCY_REGEX.test(value)) {\r\n        throw new TypeError(`Value is not a valid currency value: ${value}`);\r\n    }\r\n    return value;\r\n};\r\nconst specifiedByURL$4 = 'https://en.wikipedia.org/wiki/ISO_4217';\r\nconst GraphQLCurrencyConfig = /*#__PURE__*/ {\r\n    name: `Currency`,\r\n    description: `A field whose value is a Currency: https://en.wikipedia.org/wiki/ISO_4217.`,\r\n    serialize(value) {\r\n        return validate$j(value);\r\n    },\r\n    parseValue(value) {\r\n        return validate$j(value);\r\n    },\r\n    parseLiteral(ast) {\r\n        if (ast.kind !== Kind.STRING) {\r\n            throw new GraphQLError(`Can only validate strings as a currency but got a: ${ast.kind}`);\r\n        }\r\n        return validate$j(ast.value);\r\n    },\r\n    specifiedByURL: specifiedByURL$4,\r\n    specifiedByUrl: specifiedByURL$4,\r\n    extensions: {\r\n        codegenScalarType: 'string',\r\n    },\r\n};\r\nconst GraphQLCurrency = \r\n/*#__PURE__*/ new GraphQLScalarType(GraphQLCurrencyConfig);\n\nfunction identity(value) {\r\n    return value;\r\n}\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction ensureObject(value) {\r\n    if (typeof value !== 'object' || value === null || Array.isArray(value)) {\r\n        throw new TypeError(`JSONObject cannot represent non-object value: ${value}`);\r\n    }\r\n    return value;\r\n}\r\nfunction parseObject$1(ast, variables) {\r\n    const value = Object.create(null);\r\n    ast.fields.forEach((field) => {\r\n        // eslint-disable-next-line no-use-before-define\r\n        value[field.name.value] = parseLiteral(field.value, variables);\r\n    });\r\n    return value;\r\n}\r\nfunction parseLiteral(ast, variables) {\r\n    switch (ast.kind) {\r\n        case Kind.STRING:\r\n        case Kind.BOOLEAN:\r\n            return ast.value;\r\n        case Kind.INT:\r\n        case Kind.FLOAT:\r\n            return parseFloat(ast.value);\r\n        case Kind.OBJECT:\r\n            return parseObject$1(ast, variables);\r\n        case Kind.LIST:\r\n            return ast.values.map((n) => parseLiteral(n, variables));\r\n        case Kind.NULL:\r\n            return null;\r\n        case Kind.VARIABLE: {\r\n            const name = ast.name.value;\r\n            return variables ? variables[name] : undefined;\r\n        }\r\n    }\r\n}\n\n// This named export is intended for users of CommonJS. Users of ES modules\r\nconst specifiedByURL$5 = 'http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf';\r\nconst GraphQLJSONConfig = /*#__PURE__*/ {\r\n    name: 'JSON',\r\n    description: 'The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).',\r\n    serialize: identity,\r\n    parseValue: identity,\r\n    parseLiteral,\r\n    specifiedByURL: specifiedByURL$5,\r\n    specifiedByUrl: specifiedByURL$5,\r\n    extensions: {\r\n        codegenScalarType: 'any',\r\n    },\r\n};\r\nconst GraphQLJSON = \r\n/*#__PURE__*/ new GraphQLScalarType(GraphQLJSONConfig);\n\n/* eslint-disable @typescript-eslint/ban-types */\r\nconst specifiedByURL$6 = 'http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf';\r\nconst GraphQLJSONObjectConfig = /*#__PURE__*/ {\r\n    name: 'JSONObject',\r\n    description: 'The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).',\r\n    serialize: ensureObject,\r\n    parseValue: ensureObject,\r\n    parseLiteral: parseObject$1,\r\n    specifiedByURL: specifiedByURL$6,\r\n    specifiedByUrl: specifiedByURL$6,\r\n    extensions: {\r\n        codegenScalarType: 'Record<string, any>',\r\n    },\r\n};\r\nconst GraphQLJSONObject = \r\n/*#__PURE__*/ new GraphQLScalarType(GraphQLJSONObjectConfig);\n\n// Based on https://github.com/arhs/iban.js\r\n/* These are IBAN the specifications for all countries using IBAN\r\nThe key is the countrycode, the second item is the length of the IBAN,\r\nThe third item is the structure of the underlying BBAN (for validation and formatting)\r\n*/\r\nconst IBAN_SPECIFICATIONS = {\r\n    AD: {\r\n        length: 24,\r\n        structure: 'F04F04A12',\r\n        example: 'AD1200012030200359100100',\r\n    },\r\n    AE: { length: 23, structure: 'F03F16', example: 'AE070331234567890123456' },\r\n    AL: {\r\n        length: 28,\r\n        structure: 'F08A16',\r\n        example: 'AL47212110090000000235698741',\r\n    },\r\n    AO: { length: 25, structure: 'F21', example: 'AO69123456789012345678901' },\r\n    AT: { length: 20, structure: 'F05F11', example: 'AT611904300234573201' },\r\n    AZ: {\r\n        length: 28,\r\n        structure: 'U04A20',\r\n        example: 'AZ21NABZ00000000137010001944',\r\n    },\r\n    BA: {\r\n        length: 20,\r\n        structure: 'F03F03F08F02',\r\n        example: 'BA391290079401028494',\r\n    },\r\n    BE: { length: 16, structure: 'F03F07F02', example: 'BE68539007547034' },\r\n    BF: { length: 27, structure: 'F23', example: 'BF2312345678901234567890123' },\r\n    BG: {\r\n        length: 22,\r\n        structure: 'U04F04F02A08',\r\n        example: 'BG80BNBG96611020345678',\r\n    },\r\n    BH: { length: 22, structure: 'U04A14', example: 'BH67BMAG00001299123456' },\r\n    BI: { length: 16, structure: 'F12', example: 'BI41123456789012' },\r\n    BJ: { length: 28, structure: 'F24', example: 'BJ39123456789012345678901234' },\r\n    BR: {\r\n        length: 29,\r\n        structure: 'F08F05F10U01A01',\r\n        example: 'BR9700360305000010009795493P1',\r\n    },\r\n    BY: {\r\n        length: 28,\r\n        structure: 'A04F04A16',\r\n        example: 'BY13NBRB3600900000002Z00AB00',\r\n    },\r\n    CH: { length: 21, structure: 'F05A12', example: 'CH9300762011623852957' },\r\n    CI: {\r\n        length: 28,\r\n        structure: 'U02F22',\r\n        example: 'CI70CI1234567890123456789012',\r\n    },\r\n    CM: { length: 27, structure: 'F23', example: 'CM9012345678901234567890123' },\r\n    CR: { length: 22, structure: 'F04F14', example: 'CR72012300000171549015' },\r\n    CV: { length: 25, structure: 'F21', example: 'CV30123456789012345678901' },\r\n    CY: {\r\n        length: 28,\r\n        structure: 'F03F05A16',\r\n        example: 'CY17002001280000001200527600',\r\n    },\r\n    CZ: {\r\n        length: 24,\r\n        structure: 'F04F06F10',\r\n        example: 'CZ6508000000192000145399',\r\n    },\r\n    DE: { length: 22, structure: 'F08F10', example: 'DE89370400440532013000' },\r\n    DK: { length: 18, structure: 'F04F09F01', example: 'DK5000400440116243' },\r\n    DO: {\r\n        length: 28,\r\n        structure: 'U04F20',\r\n        example: 'DO28BAGR00000001212453611324',\r\n    },\r\n    DZ: { length: 24, structure: 'F20', example: 'DZ8612345678901234567890' },\r\n    EE: {\r\n        length: 20,\r\n        structure: 'F02F02F11F01',\r\n        example: 'EE382200221020145685',\r\n    },\r\n    ES: {\r\n        length: 24,\r\n        structure: 'F04F04F01F01F10',\r\n        example: 'ES9121000418450200051332',\r\n    },\r\n    FI: { length: 18, structure: 'F06F07F01', example: 'FI2112345600000785' },\r\n    FO: { length: 18, structure: 'F04F09F01', example: 'FO6264600001631634' },\r\n    FR: {\r\n        length: 27,\r\n        structure: 'F05F05A11F02',\r\n        example: 'FR1420041010050500013M02606',\r\n    },\r\n    GB: { length: 22, structure: 'U04F06F08', example: 'GB29NWBK60161331926819' },\r\n    GE: { length: 22, structure: 'U02F16', example: 'GE29NB0000000101904917' },\r\n    GI: { length: 23, structure: 'U04A15', example: 'GI75NWBK000000007099453' },\r\n    GL: { length: 18, structure: 'F04F09F01', example: 'GL8964710001000206' },\r\n    GR: {\r\n        length: 27,\r\n        structure: 'F03F04A16',\r\n        example: 'GR1601101250000000012300695',\r\n    },\r\n    GT: {\r\n        length: 28,\r\n        structure: 'A04A20',\r\n        example: 'GT82TRAJ01020000001210029690',\r\n    },\r\n    HR: { length: 21, structure: 'F07F10', example: 'HR1210010051863000160' },\r\n    HU: {\r\n        length: 28,\r\n        structure: 'F03F04F01F15F01',\r\n        example: 'HU42117730161111101800000000',\r\n    },\r\n    IE: { length: 22, structure: 'U04F06F08', example: 'IE29AIBK93115212345678' },\r\n    IL: {\r\n        length: 23,\r\n        structure: 'F03F03F13',\r\n        example: 'IL620108000000099999999',\r\n    },\r\n    IS: {\r\n        length: 26,\r\n        structure: 'F04F02F06F10',\r\n        example: 'IS140159260076545510730339',\r\n    },\r\n    IT: {\r\n        length: 27,\r\n        structure: 'U01F05F05A12',\r\n        example: 'IT60X0542811101000000123456',\r\n    },\r\n    IQ: {\r\n        length: 23,\r\n        structure: 'U04F03A12',\r\n        example: 'IQ98NBIQ850123456789012',\r\n    },\r\n    IR: { length: 26, structure: 'F22', example: 'IR861234568790123456789012' },\r\n    JO: {\r\n        length: 30,\r\n        structure: 'A04F22',\r\n        example: 'JO15AAAA1234567890123456789012',\r\n    },\r\n    KW: {\r\n        length: 30,\r\n        structure: 'U04A22',\r\n        example: 'KW81CBKU0000000000001234560101',\r\n    },\r\n    KZ: { length: 20, structure: 'F03A13', example: 'KZ86125KZT5004100100' },\r\n    LB: {\r\n        length: 28,\r\n        structure: 'F04A20',\r\n        example: 'LB62099900000001001901229114',\r\n    },\r\n    LC: {\r\n        length: 32,\r\n        structure: 'U04F24',\r\n        example: 'LC07HEMM000100010012001200013015',\r\n    },\r\n    LI: { length: 21, structure: 'F05A12', example: 'LI21088100002324013AA' },\r\n    LT: { length: 20, structure: 'F05F11', example: 'LT121000011101001000' },\r\n    LU: { length: 20, structure: 'F03A13', example: 'LU280019400644750000' },\r\n    LV: { length: 21, structure: 'U04A13', example: 'LV80BANK0000435195001' },\r\n    MC: {\r\n        length: 27,\r\n        structure: 'F05F05A11F02',\r\n        example: 'MC5811222000010123456789030',\r\n    },\r\n    MD: { length: 24, structure: 'U02A18', example: 'MD24AG000225100013104168' },\r\n    ME: { length: 22, structure: 'F03F13F02', example: 'ME25505000012345678951' },\r\n    MG: { length: 27, structure: 'F23', example: 'MG1812345678901234567890123' },\r\n    MK: { length: 19, structure: 'F03A10F02', example: 'MK07250120000058984' },\r\n    ML: {\r\n        length: 28,\r\n        structure: 'U01F23',\r\n        example: 'ML15A12345678901234567890123',\r\n    },\r\n    MR: {\r\n        length: 27,\r\n        structure: 'F05F05F11F02',\r\n        example: 'MR1300020001010000123456753',\r\n    },\r\n    MT: {\r\n        length: 31,\r\n        structure: 'U04F05A18',\r\n        example: 'MT84MALT011000012345MTLCAST001S',\r\n    },\r\n    MU: {\r\n        length: 30,\r\n        structure: 'U04F02F02F12F03U03',\r\n        example: 'MU17BOMM0101101030300200000MUR',\r\n    },\r\n    MZ: { length: 25, structure: 'F21', example: 'MZ25123456789012345678901' },\r\n    NL: { length: 18, structure: 'U04F10', example: 'NL91ABNA0417164300' },\r\n    NO: { length: 15, structure: 'F04F06F01', example: 'NO9386011117947' },\r\n    PK: { length: 24, structure: 'U04A16', example: 'PK36SCBL0000001123456702' },\r\n    PL: {\r\n        length: 28,\r\n        structure: 'F08F16',\r\n        example: 'PL61109010140000071219812874',\r\n    },\r\n    PS: {\r\n        length: 29,\r\n        structure: 'U04A21',\r\n        example: 'PS92PALS000000000400123456702',\r\n    },\r\n    PT: {\r\n        length: 25,\r\n        structure: 'F04F04F11F02',\r\n        example: 'PT50000201231234567890154',\r\n    },\r\n    QA: {\r\n        length: 29,\r\n        structure: 'U04A21',\r\n        example: 'QA30AAAA123456789012345678901',\r\n    },\r\n    RO: { length: 24, structure: 'U04A16', example: 'RO49AAAA1B31007593840000' },\r\n    RS: { length: 22, structure: 'F03F13F02', example: 'RS35260005601001611379' },\r\n    SA: { length: 24, structure: 'F02A18', example: 'SA0380000000608010167519' },\r\n    SC: {\r\n        length: 31,\r\n        structure: 'U04F04F16U03',\r\n        example: 'SC18SSCB11010000000000001497USD',\r\n    },\r\n    SE: {\r\n        length: 24,\r\n        structure: 'F03F16F01',\r\n        example: 'SE4550000000058398257466',\r\n    },\r\n    SI: { length: 19, structure: 'F05F08F02', example: 'SI56263300012039086' },\r\n    SK: {\r\n        length: 24,\r\n        structure: 'F04F06F10',\r\n        example: 'SK3112000000198742637541',\r\n    },\r\n    SM: {\r\n        length: 27,\r\n        structure: 'U01F05F05A12',\r\n        example: 'SM86U0322509800000000270100',\r\n    },\r\n    SN: {\r\n        length: 28,\r\n        structure: 'U01F23',\r\n        example: 'SN52A12345678901234567890123',\r\n    },\r\n    ST: {\r\n        length: 25,\r\n        structure: 'F08F11F02',\r\n        example: 'ST68000100010051845310112',\r\n    },\r\n    SV: {\r\n        length: 28,\r\n        structure: 'U04F20',\r\n        example: 'SV62CENR00000000000000700025',\r\n    },\r\n    TL: {\r\n        length: 23,\r\n        structure: 'F03F14F02',\r\n        example: 'TL380080012345678910157',\r\n    },\r\n    TN: {\r\n        length: 24,\r\n        structure: 'F02F03F13F02',\r\n        example: 'TN5910006035183598478831',\r\n    },\r\n    TR: {\r\n        length: 26,\r\n        structure: 'F05F01A16',\r\n        example: 'TR330006100519786457841326',\r\n    },\r\n    UA: {\r\n        length: 29,\r\n        structure: 'F25',\r\n        example: 'UA511234567890123456789012345',\r\n    },\r\n    VA: { length: 22, structure: 'F18', example: 'VA59001123000012345678' },\r\n    VG: { length: 24, structure: 'U04F16', example: 'VG96VPVG0000012345678901' },\r\n    XK: { length: 20, structure: 'F04F10F02', example: 'XK051212012345678906' },\r\n};\r\nconst A = 'A'.charCodeAt(0);\r\nconst Z = 'Z'.charCodeAt(0);\r\nfunction parseStructure(structure) {\r\n    // split in blocks of 3 chars\r\n    const regex = structure.match(/(.{3})/g).map(function (block) {\r\n        // parse each structure block (1-char + 2-digits)\r\n        let format;\r\n        const pattern = block.slice(0, 1);\r\n        const repeats = parseInt(block.slice(1), 10);\r\n        switch (pattern) {\r\n            case 'A':\r\n                format = '0-9A-Za-z';\r\n                break;\r\n            case 'B':\r\n                format = '0-9A-Z';\r\n                break;\r\n            case 'C':\r\n                format = 'A-Za-z';\r\n                break;\r\n            case 'F':\r\n                format = '0-9';\r\n                break;\r\n            case 'L':\r\n                format = 'a-z';\r\n                break;\r\n            case 'U':\r\n                format = 'A-Z';\r\n                break;\r\n            case 'W':\r\n                format = '0-9a-z';\r\n                break;\r\n        }\r\n        return '([' + format + ']{' + repeats + '})';\r\n    });\r\n    return /*#__PURE__*/ new RegExp('^' + regex.join('') + '$');\r\n}\r\n/**\r\n * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to\r\n * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.\r\n *\r\n */\r\nfunction iso13616Prepare(iban) {\r\n    iban = iban.toUpperCase();\r\n    iban = iban.substr(4) + iban.substr(0, 4);\r\n    return iban\r\n        .split('')\r\n        .map(function (n) {\r\n        const code = n.charCodeAt(0);\r\n        if (code >= A && code <= Z) {\r\n            // A = 10, B = 11, ... Z = 35\r\n            return code - A + 10;\r\n        }\r\n        else {\r\n            return n;\r\n        }\r\n    })\r\n        .join('');\r\n}\r\n/**\r\n * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.\r\n *\r\n * @param iban\r\n * @returns {number}\r\n */\r\nfunction iso7064Mod97_10(iban) {\r\n    let remainder = iban;\r\n    let block;\r\n    while (remainder.length > 2) {\r\n        block = remainder.slice(0, 9);\r\n        remainder = (parseInt(block, 10) % 97) + remainder.slice(block.length);\r\n    }\r\n    return parseInt(remainder, 10) % 97;\r\n}\r\nfunction _testIBAN(iban, countryCode, structure) {\r\n    return (structure.length === iban.length &&\r\n        countryCode === iban.slice(0, 2) &&\r\n        parseStructure(structure.structure).test(iban.slice(4)) &&\r\n        iso7064Mod97_10(iso13616Prepare(iban)) === 1);\r\n}\r\nfunction validate$k(iban) {\r\n    // Make uppercase and remove whitespace for matching\r\n    iban = iban.toUpperCase().replace(/\\s+/g, '');\r\n    const countryCode = iban.slice(0, 2);\r\n    const countryStructure = IBAN_SPECIFICATIONS[countryCode];\r\n    return !!countryStructure && _testIBAN(iban, countryCode, countryStructure);\r\n}\r\nconst GraphQLIBAN = \r\n/*#__PURE__*/ new GraphQLScalarType({\r\n    name: `IBAN`,\r\n    description: `A field whose value is an International Bank Account Number (IBAN): https://en.wikipedia.org/wiki/International_Bank_Account_Number.`,\r\n    serialize(value) {\r\n        if (typeof value !== 'string') {\r\n            throw new TypeError(`Value is not string: ${value}`);\r\n        }\r\n        if (!validate$k(value)) {\r\n            throw new TypeError(`Value is not a valid IBAN: ${value}`);\r\n        }\r\n        return value;\r\n    },\r\n    parseValue(value) {\r\n        if (typeof value !== 'string') {\r\n            throw new TypeError(`Value is not string: ${value}`);\r\n        }\r\n        if (!validate$k(value)) {\r\n            throw new TypeError(`Value is not a valid IBAN: ${value}`);\r\n        }\r\n        return value;\r\n    },\r\n    parseLiteral(ast) {\r\n        if (ast.kind !== Kind.STRING) {\r\n            throw new GraphQLError(`Can only validate strings as IBANs but got a: ${ast.kind}`);\r\n        }\r\n        if (!validate$k(ast.value)) {\r\n            throw new TypeError(`Value is not a valid IBAN: ${ast.value}`);\r\n        }\r\n        return ast.value;\r\n    },\r\n    extensions: {\r\n        codegenScalarType: 'string',\r\n    },\r\n});\n\nconst MONGODB_OBJECTID_REGEX = /*#__PURE__*/ /^[A-Fa-f0-9]{24}$/;\r\nconst GraphQLObjectID = \r\n/*#__PURE__*/ new GraphQLScalarType({\r\n    name: 'ObjectID',\r\n    description: 'A field whose value conforms with the standard mongodb object ID as described here: https://docs.mongodb.com/manual/reference/method/ObjectId/#ObjectId. Example: 5e5677d71bdc2ae76344968c',\r\n    serialize(value) {\r\n        if (!MONGODB_OBJECTID_REGEX.test(value)) {\r\n            throw new TypeError(`Value is not a valid mongodb object id of form: ${value}`);\r\n        }\r\n        return value;\r\n    },\r\n    parseValue(value) {\r\n        if (!MONGODB_OBJECTID_REGEX.test(value)) {\r\n            throw new TypeError(`Value is not a valid mongodb object id of form: ${value}`);\r\n        }\r\n        return value;\r\n    },\r\n    parseLiteral(ast) {\r\n        if (ast.kind !== Kind.STRING) {\r\n            throw new GraphQLError(`Can only validate strings as mongodb object id but got a: ${ast.kind}`);\r\n        }\r\n        if (!MONGODB_OBJECTID_REGEX.test(ast.value)) {\r\n            throw new TypeError(`Value is not a valid mongodb object id of form: ${ast.value}`);\r\n        }\r\n        return ast.value;\r\n    },\r\n    extensions: {\r\n        codegenScalarType: 'string',\r\n    },\r\n});\n\nconst GraphQLVoid = \r\n/*#__PURE__*/ new GraphQLScalarType({\r\n    name: 'Void',\r\n    description: 'Represents NULL values',\r\n    serialize() {\r\n        return null;\r\n    },\r\n    parseValue() {\r\n        return null;\r\n    },\r\n    parseLiteral() {\r\n        return null;\r\n    },\r\n    extensions: {\r\n        codegenScalarType: 'void',\r\n    },\r\n});\n\n// See: https://www.w3.org/TR/2021/PR-did-core-20210803/#did-syntax\r\nconst DID_REGEX = /^did:[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+:[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+$/;\r\nconst validate$l = (value) => {\r\n    if (typeof value !== 'string') {\r\n        throw new TypeError(`Value is not string: ${value}`);\r\n    }\r\n    if (!DID_REGEX.test(value)) {\r\n        throw new TypeError(`Value is not a valid DID: ${value}`);\r\n    }\r\n    return value;\r\n};\r\nconst specifiedByURL$7 = 'https://www.w3.org/TR/did-core/';\r\nconst GraphQLDIDConfig = {\r\n    name: 'DID',\r\n    description: 'A field whose value conforms to the standard DID format as specified in did-core: https://www.w3.org/TR/did-core/.',\r\n    serialize: validate$l,\r\n    parseValue: validate$l,\r\n    parseLiteral(ast) {\r\n        if (ast.kind !== Kind.STRING) {\r\n            throw new GraphQLError(`Can only validate strings as DID but got a: ${ast.kind}`);\r\n        }\r\n        return validate$l(ast.value);\r\n    },\r\n    specifiedByURL: specifiedByURL$7,\r\n    specifiedByUrl: specifiedByURL$7,\r\n    extensions: {\r\n        codegenScalarType: 'string',\r\n    },\r\n};\r\nconst GraphQLDID = \r\n/*#__PURE__*/ new GraphQLScalarType(GraphQLDIDConfig);\n\nconst validate$m = (value) => {\r\n    const COUNTRY_CODE_REGEX = /^(AD|AE|AF|AG|AI|AL|AM|AO|AQ|AR|AS|AT|AU|AW|AX|AZ|BA|BB|BD|BE|BF|BG|BH|BI|BJ|BL|BM|BN|BO|BQ|BR|BS|BT|BV|BW|BY|BZ|CA|CC|CD|CF|CG|CH|CI|CK|CL|CM|CN|CO|CR|CU|CV|CW|CX|CY|CZ|DE|DJ|DK|DM|DO|DZ|EC|EE|EG|EH|ER|ES|ET|FI|FJ|FK|FM|FO|FR|GA|GB|GD|GE|GF|GG|GH|GI|GL|GM|GN|GP|GQ|GR|GS|GT|GU|GW|GY|HK|HM|HN|HR|HT|HU|ID|IE|IL|IM|IN|IO|IQ|IR|IS|IT|JE|JM|JO|JP|KE|KG|KH|KI|KM|KN|KP|KR|KW|KY|KZ|LA|LB|LC|LI|LK|LR|LS|LT|LU|LV|LY|MA|MC|MD|ME|MF|MG|MH|MK|ML|MM|MN|MO|MP|MQ|MR|MS|MT|MU|MV|MW|MX|MY|MZ|NA|NC|NE|NF|NG|NI|NL|NO|NP|NR|NU|NZ|OM|PA|PE|PF|PG|PH|PK|PL|PM|PN|PR|PS|PT|PW|PY|QA|RE|RO|RS|RU|RW|SA|SB|SC|SD|SE|SG|SH|SI|SJ|SK|SL|SM|SN|SO|SR|SS|ST|SV|SX|SY|SZ|TC|TD|TF|TG|TH|TJ|TK|TL|TM|TN|TO|TR|TT|TV|TW|TZ|UA|UG|UM|US|UY|UZ|VA|VC|VE|VG|VI|VN|VU|WF|WS|YE|YT|ZA|ZM|ZW)$/i;\r\n    if (typeof value !== 'string') {\r\n        throw new TypeError(`Value is not string: ${value}`);\r\n    }\r\n    if (!COUNTRY_CODE_REGEX.test(value)) {\r\n        throw new TypeError(`Value is not a valid country code: ${value}`);\r\n    }\r\n    return value;\r\n};\r\nconst GraphQLCountryCode = \r\n/*#__PURE__*/ new GraphQLScalarType({\r\n    name: 'CountryCode',\r\n    description: 'A country code as defined by ISO 3166-1 alpha-2',\r\n    serialize(value) {\r\n        return validate$m(value);\r\n    },\r\n    parseValue(value) {\r\n        return validate$m(value);\r\n    },\r\n    parseLiteral(ast) {\r\n        if (ast.kind !== Kind.STRING) {\r\n            throw new GraphQLError(`Can only validate strings as country codes but got a: ${ast.kind}`);\r\n        }\r\n        return validate$m(ast.value);\r\n    },\r\n    extensions: {\r\n        codegenScalarType: 'string',\r\n    },\r\n});\n\nconst BCP_47_REGEX = /^(((en-GB-oed|i-ami|i-bnn|i-default|i-enochian|i-hak|i-klingon|i-lux|i-mingo|i-navajo|i-pwn|i-tao|i-tay|i-tsu|sgn-BE-FR|sgn-BE-NL|sgn-CH-DE)|(art-lojban|cel-gaulish|no-bok|no-nyn|zh-guoyu|zh-hakka|zh-min|zh-min-nan|zh-xiang))|((([A-Za-z]{2,3}(-([A-Za-z]{3}(-[A-Za-z]{3}){0,2}))?)|[A-Za-z]{4}|[A-Za-z]{5,8})(-([A-Za-z]{4}))?(-([A-Za-z]{2}|[0-9]{3}))?(-([A-Za-z0-9]{5,8}|[0-9][A-Za-z0-9]{3}))*(-([0-9A-WY-Za-wy-z](-[A-Za-z0-9]{2,8})+))*(-(x(-[A-Za-z0-9]{1,8})+))?)|(x(-[A-Za-z0-9]{1,8})+))$/;\r\nfunction validate$n(value) {\r\n    if (!value) {\r\n        throw new TypeError(`Value is not a valid string. Received: ${value}`);\r\n    }\r\n    const isValidFormat = BCP_47_REGEX.test(value);\r\n    if (!isValidFormat) {\r\n        throw new TypeError(`Value is not a valid BCP-47 standard formatted string. Received: ${value}`);\r\n    }\r\n    return value;\r\n}\r\nconst GraphQLLocale = \r\n/*#__PURE__*/ new GraphQLScalarType({\r\n    name: 'Locale',\r\n    description: 'The locale in the format of a BCP 47 (RFC 5646) standard string',\r\n    serialize: validate$n,\r\n    parseValue: validate$n,\r\n    parseLiteral(ast) {\r\n        if (ast.kind === Kind.STRING) {\r\n            return validate$n(ast.value);\r\n        }\r\n        throw new GraphQLError(`Value is not a string. Received: ${ast.kind}`);\r\n    },\r\n    extensions: {\r\n        codegenScalarType: 'string',\r\n    },\r\n});\n\nconst routingNumber = (rtn) => '' + rtn;\r\nconst haveNineDigits = (rtn) => /^\\d{9}$/.test(rtn);\r\n/**\r\n * Calculates checksum for MIRC format XXXXYYYYC where C is the check digit\r\n *\r\n * The checksum is position-weighted sum of each of the digits. So, given the\r\n * routing number `031001175`, which The last digit (5 in the example), is the\r\n * check digit. The calculation is given in terms of the eight first digits:\r\n *\r\n * 0    3   1   0   0   1   1   7\r\n *                x\r\n * 3    7   1   3   7   1   3   7\r\n * ____________________________________\r\n * 0 + 21 + 1 + 0 + 0 + 1 + 3 + 49 = 75\r\n * ____________________________________\r\n * 75 + 5 (check digit) = 80 (Must multiple of 10)\r\n */\r\nconst checksum = (rtn) => {\r\n    const weight = [3, 7, 1];\r\n    const accumulator = (acc, curr) => acc + curr;\r\n    const digits = rtn.split('').map((digit) => Number.parseInt(digit, 10));\r\n    const checkDigit = digits.pop();\r\n    const sum = digits\r\n        .map((digit, index) => digit * weight[index % 3])\r\n        .reduce(accumulator, 0);\r\n    return (sum + checkDigit) % 10 === 0;\r\n};\r\nconst validate$o = (value) => {\r\n    if (typeof value !== 'string' &&\r\n        !(typeof value === 'number' && Number.isInteger(value))) {\r\n        throw locatedError(new TypeError('must be integer or string'), null);\r\n    }\r\n    const rtn = routingNumber(value);\r\n    if (!haveNineDigits(rtn)) {\r\n        throw new TypeError('must have nine digits');\r\n    }\r\n    if (!checksum(rtn)) {\r\n        throw new TypeError(\"checksum doens't match\");\r\n    }\r\n    return rtn;\r\n};\r\nconst GraphQLRoutingNumberConfig = {\r\n    name: 'RoutingNumber',\r\n    description: 'In the US, an ABA routing transit number (`ABA RTN`) is a nine-digit ' +\r\n        'code to identify the financial institution.',\r\n    specifiedByURL: 'https://en.wikipedia.org/wiki/ABA_routing_transit_number',\r\n    serialize(value) {\r\n        return validate$o(value);\r\n    },\r\n    parseValue(value) {\r\n        return validate$o(value);\r\n    },\r\n    parseLiteral(ast) {\r\n        if (ast.kind === Kind.INT || ast.kind === Kind.STRING) {\r\n            return validate$o(ast.value);\r\n        }\r\n        throw locatedError(new TypeError(`ABA Routing Transit Number can only parse Integer or String but got '${ast.kind}'`), ast);\r\n    },\r\n};\r\nconst GraphQLRoutingNumber = \r\n/*#__PURE__*/ new GraphQLScalarType(GraphQLRoutingNumberConfig);\n\nconst validator = (rtn) => /^([a-zA-Z0-9]){5,17}$/.test(rtn);\r\nconst validate$p = (account) => {\r\n    if (typeof account !== 'string') {\r\n        throw locatedError(new TypeError('can only parse String'), null);\r\n    }\r\n    if (!validator(account)) {\r\n        throw locatedError(new TypeError('must be alphanumeric between 5-17'), null);\r\n    }\r\n    return account;\r\n};\r\nconst GraphQLAccountNumberConfig = {\r\n    name: 'AccountNumber',\r\n    description: 'Banking account number is a string of 5 to 17 alphanumeric values for ' +\r\n        'representing an generic account number',\r\n    serialize(value) {\r\n        return validate$p(value);\r\n    },\r\n    parseValue(value) {\r\n        return validate$p(value);\r\n    },\r\n    parseLiteral(ast) {\r\n        if (ast.kind === Kind.STRING) {\r\n            return validate$p(ast.value);\r\n        }\r\n        throw locatedError(new TypeError(`Account Number can only parse String but got '${ast.kind}'`), ast);\r\n    },\r\n};\r\nconst GraphQLAccountNumber = \r\n/*#__PURE__*/ new GraphQLScalarType(GraphQLAccountNumberConfig);\n\nconst BigInt$1 = 'scalar BigInt';\r\nconst Byte = 'scalar Byte';\r\nconst Date$1 = 'scalar Date';\r\nconst Time$1 = 'scalar Time';\r\nconst Timestamp$1 = 'scalar Timestamp';\r\nconst TimeZone$1 = 'scalar TimeZone';\r\nconst DateTime$1 = 'scalar DateTime';\r\nconst UtcOffset$1 = 'scalar UtcOffset';\r\nconst Duration$1 = 'scalar Duration';\r\nconst ISO8601Duration = 'scalar ISO8601Duration';\r\nconst LocalDate$1 = 'scalar LocalDate';\r\nconst LocalTime$1 = 'scalar LocalTime';\r\nconst LocalEndTime$1 = 'scalar LocalEndTime';\r\nconst EmailAddress$1 = 'scalar EmailAddress';\r\nconst UUID$1 = `scalar UUID`;\r\nconst Hexadecimal$1 = `scalar Hexadecimal`;\r\nconst HexColorCode$1 = `scalar HexColorCode`;\r\nconst HSL$1 = `scalar HSL`;\r\nconst HSLA$1 = `scalar HSLA`;\r\nconst IBAN$1 = `scalar IBAN`;\r\nconst IPv4$1 = `scalar IPv4`;\r\nconst IPv6$1 = `scalar IPv6`;\r\nconst ISBN$1 = `scalar ISBN`;\r\nconst JWT$1 = `scalar JWT`;\r\nconst Latitude$1 = `scalar Latitude`;\r\nconst Longitude$1 = `scalar Longitude`;\r\nconst JSON$2 = `scalar JSON`;\r\nconst JSONObject$1 = `scalar JSONObject`;\r\nconst MAC$1 = `scalar MAC`;\r\nconst NegativeFloat$1 = 'scalar NegativeFloat';\r\nconst NegativeInt$1 = 'scalar NegativeInt';\r\nconst NonEmptyString$1 = 'scalar NonEmptyString';\r\nconst NonNegativeFloat$1 = 'scalar NonNegativeFloat';\r\nconst NonNegativeInt$1 = 'scalar NonNegativeInt';\r\nconst NonPositiveFloat$1 = 'scalar NonPositiveFloat';\r\nconst NonPositiveInt$1 = 'scalar NonPositiveInt';\r\nconst PhoneNumber$1 = 'scalar PhoneNumber';\r\nconst Port$1 = `scalar Port`;\r\nconst PositiveFloat$1 = 'scalar PositiveFloat';\r\nconst PositiveInt$1 = 'scalar PositiveInt';\r\nconst PostalCode$1 = 'scalar PostalCode';\r\nconst RGB$1 = `scalar RGB`;\r\nconst RGBA$1 = `scalar RGBA`;\r\nconst SafeInt$1 = `scalar SafeInt`;\r\nconst URL$1 = 'scalar URL';\r\nconst USCurrency$1 = `scalar USCurrency`;\r\nconst Currency$1 = `scalar Currency`;\r\nconst RoutingNumber$1 = 'scalar RoutingNumber';\r\nconst AccountNumber$1 = 'scalar AccountNumber';\r\nconst UnsignedFloat = 'scalar UnsignedFloat';\r\nconst UnsignedInt = 'scalar UnsignedInt';\r\nconst GUID = `scalar GUID`;\r\nconst Long = 'scalar Long';\r\nconst ObjectID$1 = 'scalar ObjectID';\r\nconst Void$1 = 'scalar Void';\r\nconst DID$1 = 'scalar DID';\r\nconst CountryCode$1 = 'scalar CountryCode';\r\nconst Locale$1 = 'scalar Locale';\r\nconst typeDefs = [\r\n    Date$1,\r\n    Time$1,\r\n    DateTime$1,\r\n    Timestamp$1,\r\n    TimeZone$1,\r\n    UtcOffset$1,\r\n    Duration$1,\r\n    ISO8601Duration,\r\n    LocalDate$1,\r\n    LocalTime$1,\r\n    LocalEndTime$1,\r\n    EmailAddress$1,\r\n    NegativeFloat$1,\r\n    NegativeInt$1,\r\n    NonEmptyString$1,\r\n    NonNegativeFloat$1,\r\n    NonNegativeInt$1,\r\n    NonPositiveFloat$1,\r\n    NonPositiveInt$1,\r\n    PhoneNumber$1,\r\n    PositiveFloat$1,\r\n    PositiveInt$1,\r\n    PostalCode$1,\r\n    UnsignedFloat,\r\n    UnsignedInt,\r\n    URL$1,\r\n    BigInt$1,\r\n    Long,\r\n    Byte,\r\n    UUID$1,\r\n    GUID,\r\n    Hexadecimal$1,\r\n    HexColorCode$1,\r\n    HSL$1,\r\n    HSLA$1,\r\n    IPv4$1,\r\n    IPv6$1,\r\n    ISBN$1,\r\n    JWT$1,\r\n    Latitude$1,\r\n    Longitude$1,\r\n    MAC$1,\r\n    Port$1,\r\n    RGB$1,\r\n    RGBA$1,\r\n    SafeInt$1,\r\n    USCurrency$1,\r\n    Currency$1,\r\n    JSON$2,\r\n    JSONObject$1,\r\n    IBAN$1,\r\n    ObjectID$1,\r\n    Void$1,\r\n    DID$1,\r\n    CountryCode$1,\r\n    Locale$1,\r\n    RoutingNumber$1,\r\n    AccountNumber$1,\r\n];\n\nclass RegularExpression extends GraphQLScalarType {\r\n    constructor(name, regex, options = {}) {\r\n        const errorMessage = options.errorMessage\r\n            ? options.errorMessage\r\n            : (r, v) => `Value does not match ${r}: ${v}`;\r\n        super({\r\n            name,\r\n            description: options.description || `A field whose value matches ${regex}.`,\r\n            serialize(value) {\r\n                if (value != null && !regex.test(value.toString())) {\r\n                    throw new TypeError(errorMessage(regex, value));\r\n                }\r\n                return value;\r\n            },\r\n            parseValue(value) {\r\n                if (value != null && !regex.test(value === null || value === void 0 ? void 0 : value.toString())) {\r\n                    throw new TypeError(errorMessage(regex, value));\r\n                }\r\n                return value;\r\n            },\r\n            parseLiteral(ast) {\r\n                if (ast.kind === Kind.NULL) {\r\n                    return null;\r\n                }\r\n                if (options.stringOnly && ast.kind !== Kind.STRING) {\r\n                    throw new GraphQLError(`Can only validate strings as ${name} but got a: ${ast.kind}`);\r\n                }\r\n                if (!('value' in ast) || ast.kind === Kind.ENUM) {\r\n                    throw new GraphQLError(`Can only validate primitive values as ${name} but got a: ${ast.kind}`);\r\n                }\r\n                if (ast.value != null && !regex.test(ast.value.toString())) {\r\n                    throw new TypeError(errorMessage(regex, ast.value));\r\n                }\r\n                return ast.value;\r\n            },\r\n            extensions: {\r\n                codegenScalarType: options.stringOnly\r\n                    ? 'string'\r\n                    : 'string | number | boolean',\r\n            },\r\n        });\r\n    }\r\n}\n\nconst resolvers = {\r\n    Date: GraphQLDate,\r\n    Time: GraphQLTime,\r\n    DateTime: GraphQLDateTime,\r\n    Timestamp: GraphQLTimestamp,\r\n    TimeZone: GraphQLTimeZone,\r\n    UtcOffset: GraphQLUtcOffset,\r\n    Duration: GraphQLDuration,\r\n    ISO8601Duration: GraphQLISO8601Duration,\r\n    LocalDate: GraphQLLocalDate,\r\n    LocalTime: GraphQLLocalTime,\r\n    LocalEndTime: GraphQLLocalEndTime,\r\n    EmailAddress: GraphQLEmailAddress,\r\n    NegativeFloat: GraphQLNegativeFloat,\r\n    NegativeInt: GraphQLNegativeInt,\r\n    NonEmptyString: GraphQLNonEmptyString,\r\n    NonNegativeFloat: GraphQLNonNegativeFloat,\r\n    NonNegativeInt: GraphQLNonNegativeInt,\r\n    NonPositiveFloat: GraphQLNonPositiveFloat,\r\n    NonPositiveInt: GraphQLNonPositiveInt,\r\n    PhoneNumber: GraphQLPhoneNumber,\r\n    PositiveFloat: GraphQLPositiveFloat,\r\n    PositiveInt: GraphQLPositiveInt,\r\n    PostalCode: GraphQLPostalCode,\r\n    UnsignedFloat: GraphQLUnsignedFloat,\r\n    UnsignedInt: GraphQLUnsignedInt,\r\n    URL: GraphQLURL,\r\n    BigInt: GraphQLBigInt,\r\n    Byte: GraphQLByte,\r\n    Long: GraphQLLong,\r\n    SafeInt: GraphQLSafeInt,\r\n    UUID: GraphQLUUID,\r\n    GUID: GraphQLGUID,\r\n    Hexadecimal: GraphQLHexadecimal,\r\n    HexColorCode: GraphQLHexColorCode,\r\n    HSL: GraphQLHSL,\r\n    HSLA: GraphQLHSLA,\r\n    IPv4: GraphQLIPv4,\r\n    IPv6: GraphQLIPv6,\r\n    ISBN: GraphQLISBN,\r\n    JWT: GraphQLJWT,\r\n    Latitude: GraphQLLatitude,\r\n    Longitude: GraphQLLongitude,\r\n    MAC: GraphQLMAC,\r\n    Port: GraphQLPort,\r\n    RGB: GraphQLRGB,\r\n    RGBA: GraphQLRGBA,\r\n    USCurrency: GraphQLUSCurrency,\r\n    Currency: GraphQLCurrency,\r\n    JSON: GraphQLJSON,\r\n    JSONObject: GraphQLJSONObject,\r\n    IBAN: GraphQLIBAN,\r\n    ObjectID: GraphQLObjectID,\r\n    Void: GraphQLVoid,\r\n    DID: GraphQLDID,\r\n    CountryCode: GraphQLCountryCode,\r\n    Locale: GraphQLLocale,\r\n    RoutingNumber: GraphQLRoutingNumber,\r\n    AccountNumber: GraphQLAccountNumber,\r\n};\n\nexport { AccountNumber$1 as AccountNumberDefinition, AccountNumber as AccountNumberMock, GraphQLAccountNumber as AccountNumberResolver, BigIntMock, GraphQLBigInt as BigIntResolver, BigInt$1 as BigIntTypeDefinition, ByteMock, GraphQLByte as ByteResolver, Byte as ByteTypeDefinition, CountryCode$1 as CountryCodeDefinition, CountryCode as CountryCodeMock, GraphQLCountryCode as CountryCodeResolver, Currency$1 as CurrencyDefinition, Currency as CurrencyMock, GraphQLCurrency as CurrencyResolver, DID$1 as DIDDefinition, DID as DIDMock, GraphQLDID as DIDResolver, DateMock, GraphQLDate as DateResolver, DateTime as DateTimeMock, GraphQLDateTime as DateTimeResolver, DateTime$1 as DateTimeTypeDefinition, Date$1 as DateTypeDefinition, Duration as DurationMock, GraphQLDuration as DurationResolver, EmailAddress as EmailAddressMock, GraphQLEmailAddress as EmailAddressResolver, EmailAddress$1 as EmailAddressTypeDefinition, GUID as GUIDDefinition, UUID as GUIDMock, GraphQLGUID as GUIDResolver, GraphQLAccountNumber, GraphQLBigInt, GraphQLByte, GraphQLCountryCode, GraphQLCurrency, GraphQLDID, GraphQLDate, GraphQLDateTime, GraphQLDuration, GraphQLEmailAddress, GraphQLGUID, GraphQLHSL, GraphQLHSLA, GraphQLHexColorCode, GraphQLHexadecimal, GraphQLIBAN, GraphQLIPv4, GraphQLIPv6, GraphQLISBN, GraphQLISO8601Duration, GraphQLJSON, GraphQLJSONObject, GraphQLJWT, GraphQLLatitude, GraphQLLocalDate, GraphQLLocalEndTime, GraphQLLocalTime, GraphQLLocale, GraphQLLong, GraphQLLongitude, GraphQLMAC, GraphQLNegativeFloat, GraphQLNegativeInt, GraphQLNonEmptyString, GraphQLNonNegativeFloat, GraphQLNonNegativeInt, GraphQLNonPositiveFloat, GraphQLNonPositiveInt, GraphQLObjectID, GraphQLPhoneNumber, GraphQLPort, GraphQLPositiveFloat, GraphQLPositiveInt, GraphQLPostalCode, GraphQLRGB, GraphQLRGBA, GraphQLRoutingNumber, GraphQLSafeInt, GraphQLTime, GraphQLTimeZone, GraphQLTimestamp, GraphQLURL, GraphQLUSCurrency, GraphQLUUID, GraphQLUnsignedFloat, GraphQLUnsignedInt, GraphQLUtcOffset, GraphQLVoid, HSLA$1 as HSLADefinition, HSLA as HSLAMock, GraphQLHSLA as HSLAResolver, HSL$1 as HSLDefinition, HSL as HSLMock, GraphQLHSL as HSLResolver, HexColorCode$1 as HexColorCodeDefinition, HexColorCode as HexColorCodeMock, GraphQLHexColorCode as HexColorCodeResolver, Hexadecimal as HexadecimalMock, GraphQLHexadecimal as HexadecimalResolver, Hexadecimal$1 as HexadecimalTypeDefinition, IBAN as IBANMock, GraphQLIBAN as IBANResolver, IBAN$1 as IBANTypeDefinition, IPv4$1 as IPv4Definition, IPv4 as IPv4Mock, GraphQLIPv4 as IPv4Resolver, IPv6$1 as IPv6Definition, IPv6 as IPv6Mock, GraphQLIPv6 as IPv6Resolver, ISBN$1 as ISBNDefinition, ISBN as ISBNMock, GraphQLISBN as ISBNResolver, Duration as ISO8601DurationMock, GraphQLISO8601Duration as ISO8601DurationResolver, JSON$2 as JSONDefinition, JSON$1 as JSONMock, JSONObject$1 as JSONObjectDefinition, JSONObject as JSONObjectMock, GraphQLJSONObject as JSONObjectResolver, GraphQLJSON as JSONResolver, JWT$1 as JWTDefinition, JWT as JWTMock, GraphQLJWT as JWTResolver, Latitude$1 as LatitudeDefinition, Latitude as LatitudeMock, GraphQLLatitude as LatitudeResolver, LocalDate as LocalDateMock, GraphQLLocalDate as LocalDateResolver, LocalDate$1 as LocalDateTypeDefinition, LocalEndTime as LocalEndTimeMock, GraphQLLocalEndTime as LocalEndTimeResolver, LocalEndTime$1 as LocalEndTimeTypeDefinition, LocalTime as LocalTimeMock, GraphQLLocalTime as LocalTimeResolver, LocalTime$1 as LocalTimeTypeDefinition, Locale$1 as LocaleDefinition, Locale as LocaleMock, GraphQLLocale as LocaleResolver, BigIntMock as LongMock, GraphQLLong as LongResolver, Long as LongTypeDefinition, Longitude$1 as LongitudeDefinition, Longitude as LongitudeMock, GraphQLLongitude as LongitudeResolver, MAC$1 as MACDefinition, MAC as MACMock, GraphQLMAC as MACResolver, NegativeFloat as NegativeFloatMock, GraphQLNegativeFloat as NegativeFloatResolver, NegativeFloat$1 as NegativeFloatTypeDefinition, NegativeInt as NegativeIntMock, GraphQLNegativeInt as NegativeIntResolver, NegativeInt$1 as NegativeIntTypeDefinition, NonEmptyString as NonEmptyStringMock, GraphQLNonEmptyString as NonEmptyStringResolver, NonEmptyString$1 as NonEmptyStringTypeDefinition, NonNegativeFloat as NonNegativeFloatMock, GraphQLNonNegativeFloat as NonNegativeFloatResolver, NonNegativeFloat$1 as NonNegativeFloatTypeDefinition, NonNegativeInt as NonNegativeIntMock, GraphQLNonNegativeInt as NonNegativeIntResolver, NonNegativeInt$1 as NonNegativeIntTypeDefinition, NonPositiveFloat as NonPositiveFloatMock, GraphQLNonPositiveFloat as NonPositiveFloatResolver, NonPositiveFloat$1 as NonPositiveFloatTypeDefinition, NonPositiveInt as NonPositiveIntMock, GraphQLNonPositiveInt as NonPositiveIntResolver, NonPositiveInt$1 as NonPositiveIntTypeDefinition, ObjectID as ObjectIDMock, GraphQLObjectID as ObjectIDResolver, ObjectID$1 as ObjectIDTypeDefinition, PhoneNumber as PhoneNumberMock, GraphQLPhoneNumber as PhoneNumberResolver, PhoneNumber$1 as PhoneNumberTypeDefinition, Port$1 as PortDefinition, Port as PortMock, GraphQLPort as PortResolver, PositiveFloat as PositiveFloatMock, GraphQLPositiveFloat as PositiveFloatResolver, PositiveFloat$1 as PositiveFloatTypeDefinition, PositiveInt as PositiveIntMock, GraphQLPositiveInt as PositiveIntResolver, PositiveInt$1 as PositiveIntTypeDefinition, PostalCode as PostalCodeMock, GraphQLPostalCode as PostalCodeResolver, PostalCode$1 as PostalCodeTypeDefinition, RGBA$1 as RGBADefinition, RGBA as RGBAMock, GraphQLRGBA as RGBAResolver, RGB$1 as RGBDefinition, RGB as RGBMock, GraphQLRGB as RGBResolver, RegularExpression, RoutingNumber$1 as RoutingNumberDefinition, RoutingNumber as RoutingNumberMock, GraphQLRoutingNumber as RoutingNumberResolver, SafeInt$1 as SafeIntDefinition, SafeInt as SafeIntMock, GraphQLSafeInt as SafeIntResolver, Time as TimeMock, GraphQLTime as TimeResolver, Time$1 as TimeTypeDefinition, TimeZone as TimeZoneMock, GraphQLTimeZone as TimeZoneResolver, TimeZone$1 as TimeZoneTypeDefinition, Timestamp as TimestampMock, GraphQLTimestamp as TimestampResolver, Timestamp$1 as TimestampTypeDefinition, URLMock, GraphQLURL as URLResolver, URL$1 as URLTypeDefinition, USCurrency$1 as USCurrencyDefinition, USCurrency as USCurrencyMock, GraphQLUSCurrency as USCurrencyResolver, UUID$1 as UUIDDefinition, UUID as UUIDMock, GraphQLUUID as UUIDResolver, NonNegativeFloat as UnsignedFloatMock, GraphQLUnsignedFloat as UnsignedFloatResolver, UnsignedFloat as UnsignedFloatTypeDefinition, NonNegativeInt as UnsignedIntMock, GraphQLUnsignedInt as UnsignedIntResolver, UnsignedInt as UnsignedIntTypeDefinition, UtcOffset as UtcOffsetMock, GraphQLUtcOffset as UtcOffsetResolver, UtcOffset$1 as UtcOffsetTypeDefinition, Void as VoidMock, GraphQLVoid as VoidResolver, Void$1 as VoidTypeDefinition, mocks, resolvers, typeDefs };\n","//resolvers\nimport searchPoliciesResolvers from './SearchPolicies/resolvers';\nimport policyDetailsResolvers from './PolicyDetails/resolvers';\nimport reportsResolvers from './Reports/resolvers';\nimport { DateResolver } from 'graphql-scalars';\nimport { DateTypeDefinition } from 'graphql-scalars';\n\n//typedefs\nimport searchPoliciesSchema from './SearchPolicies/schema.graphql';\nimport policyDetailsSchema from './PolicyDetails/schema.graphql';\nimport reportsSchema from './Reports/schema.graphql';\n\nexport const mergedResolvers = {\n  searchPoliciesResolvers,\n  policyDetailsResolvers,\n  reportsResolvers,\n  DateResolver,\n};\n\nexport const mergedSchema = {\n  searchPoliciesSchema,\n  policyDetailsSchema,\n  reportsSchema,\n  DateTypeDefinition,\n};\n"],"mappingspGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AAJA;;;;A","sourceRoot":""}