{"version":3,"file":"docker-entrypoint.f711f53689f130369593.hot-update.js","sources":["webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/app/src/createServer.ts","webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/particles-js-utils/src/getIp.ts"],"sourcesContent":["import type { Logger } from '@zg-rentals/logger-node';\nimport express from 'express';\nimport { createRouterMiddleware } from './createRouterMiddleware';\nimport { getHttpLogger, getLogMiddleware } from '@zg-rentals/logger-node';\nimport { createPontoonProxy } from '@zg-rentals/pontoon-proxy';\nimport os from 'os';\nimport type { NodeTracer } from '@zg-rentals/trace-node';\nimport cookieParser from 'cookie-parser';\nimport { Healthcheck } from '@zg-rentals/particles-js-healthcheck';\nimport type { NodeMonitor } from '@zg-rentals/monitor-node';\nimport { NodeProxy } from '@zg-rentals/particles-js-proxy';\n\nexport interface SsrServerOptions {\n  appName: string;\n  isProduction: boolean;\n  logger: Logger;\n  pontoonApiKey?: string;\n  basePath: string;\n  tracer: NodeTracer;\n  buildNumber: number;\n  zgApi: string;\n  nodeMonitor: NodeMonitor;\n  healthcheckAccessToken: string;\n  host: string;\n}\n\nexport const createSsrServer = (options: SsrServerOptions) => {\n  const app = express();\n  options.tracer.traceApp(app);\n\n  // Setup stock middleware\n  app.use((req, res, next) => {\n    res.locals.startTime = Date.now();\n    next();\n  });\n  app.disable('x-powered-by');\n  app.use(express.json({ limit: '5mb' }));\n  // @ts-ignore\n  app.use(cookieParser({}, { decode: (c) => c }));\n\n  // swallows favicon requests\n  if (!options.isProduction) {\n    app.use('*/favicon.ico', (req, res) => res.status(200).send());\n  }\n\n  if (options.pontoonApiKey) {\n    createPontoonProxy({\n      app,\n      proxyPath: options.basePath + '/pontoon-proxy',\n      logger: options.logger,\n      apiKey: options.pontoonApiKey,\n      api: 'https://pontoon.hotpads.com',\n      serverName: os.hostname(),\n      serviceName: options.appName,\n    });\n  }\n\n  app.use(options.basePath + '/log', getLogMiddleware(options.logger));\n  const httpLogger = getHttpLogger({ logger: options.logger });\n  app.use(httpLogger);\n\n  const healthcheck = new Healthcheck({\n    accessToken: options.healthcheckAccessToken,\n    logger: options.logger,\n    buildNumber: options.buildNumber,\n    onPing: ({ response, hasAccess }) => {\n      options.nodeMonitor.increment({ name: 'healthcheck.ping', amount: 1 });\n\n      return {\n        ...response,\n        ...(hasAccess ? { zgApi: options.zgApi } : {}),\n      };\n    },\n  });\n\n  app.use(`*/check`, healthcheck.check);\n  app.use(`*/shutdown`, healthcheck.shutdown);\n\n  // adds history object for use in router\n  app.use(createRouterMiddleware());\n\n  // Add defualt proxy that goes from basePath/proxy* -> zgApi\n  // Consuming apps can add additional proxies if necessary\n  const apiProxy = new NodeProxy({\n    secure: options.isProduction,\n    proxyPath: options.basePath + '/proxy/',\n    host: options.host,\n    logger: options.logger,\n    stringifyBody: true,\n    brandOverride: 'zillow',\n  }).middleware();\n\n  app.use(options.basePath + '/proxy/*', (req, res, next) => {\n    return apiProxy(req, res, next);\n  });\n\n  return app;\n};\n","import type http from 'http';\n\n/* eslint-disable @typescript-eslint/no-var-requires */\nconst ipRangeCheck = require('ip-range-check');\n\n// TODO: inherently insecure to ip spoofing\n// x-client-ip is only set on node -> node proxy\n// need to protect against x-client-ip spoof on client requests\n\n// req.get is a case-insensitive match\n// http://expressjs.com/en/api.html#req.get\nexport function getIpsFromReq(req: http.IncomingMessage) {\n  const zgIpHeader = req.headers['x-client-ip'] || req.headers['X-Client-Ip'];\n  const xForwadedFor = req.headers['x-forwarded-for'];\n  const socketRemoteAddres = (req.socket || {}).remoteAddress;\n\n  return {\n    zgIpHeader,\n    xForwadedFor,\n    socketRemoteAddres,\n    defaultIpAddress: '0.0.0.0',\n  };\n}\n\nexport function selectValidIp(req: http.IncomingMessage) {\n  const { zgIpHeader, xForwadedFor, socketRemoteAddres, defaultIpAddress } = getIpsFromReq(req);\n  const ipByPrecedence = zgIpHeader || xForwadedFor || socketRemoteAddres || defaultIpAddress;\n\n  // deal with comma delimited ips\n  if (!Array.isArray(ipByPrecedence) && ipByPrecedence.indexOf(',') > -1) {\n    const ipArr = ipByPrecedence.replace(/ /g, '').split(',');\n    const filteredIps = ipArr.filter((ip) => !ipRangeCheck(ip, '10.0.0.0/8') && !ipRangeCheck(ip, '172.16.1.0/12'));\n\n    if (filteredIps.length) {\n      return filteredIps[0];\n    }\n\n    return defaultIpAddress;\n  }\n\n  return ipByPrecedence;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAgBA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAEA;AAXA;AAcA;AACA;AACA;AAEA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/FA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}