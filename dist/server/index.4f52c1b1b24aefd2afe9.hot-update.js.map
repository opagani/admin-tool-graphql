{"version":3,"file":"index.4f52c1b1b24aefd2afe9.hot-update.js","sources":["webpack:////Users/opagani/projects/zillowgroup/rentals-js/modules/monitor-node/src/plugins/pontoon-heartbeat-plugin/index.ts"],"sourcesContent":["import { MonitorPlugin } from '@zg-rentals/monitor-base';\nimport type { GaugeOptions, IncrementOptions } from '@zg-rentals/monitor-base';\nimport type { Logger } from '@zg-rentals/particles-js-base-logger';\nimport { Pontoon } from '@zg-rentals/pontoon';\nimport { NodeUtil } from '@zg-rentals/particles-js-utils';\nimport type { WebappInstance } from '@zg-rentals/pontoon';\n\nexport interface PontoonHeartbeatPluginArgs {\n  api: string;\n  apiKey: string;\n  logger?: Logger;\n  webappName: string;\n  startupDate: number | Date | string;\n  buildDate: number | Date | string;\n  buildId?: number;\n  commitId?: string;\n  gitBranch?: string;\n  propertiesFilePath?: string;\n  processManagerId?: string;\n}\n\nconst HEARTBEAT_INTERVAL_MS = 5_000;\nconst DEFAULT_PROPERTIES_FILE_PATH = '/hotpads/config/server.properties';\nconst REQUIRED_ARGS = ['api', 'apiKey', 'webappName', 'buildId', 'commitId', 'gitBranch', 'startupDate', 'buildDate'];\n\nexport class PontoonHeartbeatPlugin extends MonitorPlugin {\n  pontoon: Pontoon;\n  appData: WebappInstance;\n  logger?: Logger;\n  heartbeat?: NodeJS.Timeout;\n\n  constructor({\n    api,\n    apiKey,\n    webappName,\n    startupDate,\n    buildDate,\n    buildId = 0,\n    commitId = '',\n    gitBranch = '',\n    logger,\n    propertiesFilePath = DEFAULT_PROPERTIES_FILE_PATH,\n    processManagerId = process.env.pm_id,\n  }: PontoonHeartbeatPluginArgs) {\n    super({\n      logger,\n      pluginName: 'NodePontoonPlugin',\n    });\n\n    const { serverProperties, envProperties } = new NodeUtil.EnvironmentUtil(propertiesFilePath, {\n      appName: webappName,\n    });\n    const serverName = serverProperties.name || '';\n    const containerIdMatch = envProperties.hostname.match(/-\\d+$/);\n    const containerId = containerIdMatch ? containerIdMatch[0] : '';\n    const processManagerIdSuffix = processManagerId ? `-${processManagerId}` : '';\n\n    this.appData = {\n      api,\n      apiKey,\n      webappName,\n      serverName: `${serverName}${containerId}${processManagerIdSuffix}`,\n      serverType: serverProperties.type,\n      serverPublicIp: serverProperties.publicIp,\n      serverPrivateIp: serverProperties.privateIp,\n      buildId: buildId.toString(),\n      commitId,\n      gitBranch,\n      startupDate: this.formatDate(startupDate),\n      buildDate: this.formatDate(buildDate),\n    };\n\n    const missingArgs = REQUIRED_ARGS.filter((arg) => this.appData[arg as keyof WebappInstance] === undefined);\n    if (missingArgs.length) {\n      const errorMessage = `${this.pluginName} plugin missing required arg(s): ${missingArgs.join(', ')}`;\n      if (this.logger) {\n        this.logger.error(errorMessage);\n      }\n      throw new Error(errorMessage);\n    }\n\n    this.pontoon = new Pontoon({ api, apiKey });\n  }\n\n  initHeartbeat() {\n    this.heartbeat = setInterval(() => {\n      this.pontoon.addHeartbeat({\n        ...this.appData,\n        refreshedLast: this.formatDate(Date.now()),\n      });\n    }, HEARTBEAT_INTERVAL_MS);\n  }\n\n  onInitialize(increment: (i: IncrementOptions) => void, gauge: (g: GaugeOptions) => void, logger?: Logger) {\n    this.logger = this.logger || logger;\n    this.initHeartbeat();\n  }\n\n  async onShutdown() {\n    if (this.heartbeat) {\n      clearInterval(this.heartbeat);\n      delete this.heartbeat;\n    }\n    await this.pontoon.removeHeartbeat({\n      webappName: this.appData.webappName,\n      serverName: this.appData.serverName,\n    });\n  }\n\n  formatDate(date: string | Date | number = new Date()): string {\n    if (!(date instanceof Date)) {\n      date = new Date(date);\n    }\n    return date.toISOString();\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAGA;AACA;AAiBA;AACA;AACA;AAEA;AAAA;AACA;AADA;AACA;AAKA;AAYA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AAFA;AACA;AAFA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AAKA;AACA;AADA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAeA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAtCA;AAuCA;AACA;AA1DA;AAAA;AAAA;AA2DA;AACA;AAAA;AACA;AAEA;AAFA;AAIA;AACA;AAlEA;AAAA;AAAA;AAqEA;AACA;AACA;AAvEA;AAAA;AAAA;AAAA;AAyEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAMA;AACA;AAFA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA1EA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAoFA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAzFA;AACA;AADA;AAAA;;;;A","sourceRoot":""}