{"version":3,"file":"index.1e17ac4966b70881d05c.hot-update.js","sources":["webpack:///./app/graphql/Reports/services/getUserActivityDataForReports.ts","webpack:///./app/graphql/utils/utils.ts"],"sourcesContent":["import axios from 'axios';\nimport log from '../../../server/utils/log';\nimport { tracer } from '../../../server/utils/tracer';\nimport type {\n  Activities,\n  ApplicationActivity,\n  ListingActivity,\n  Maybe,\n  UrlParams,\n  UserActivity,\n  VoucherActivity,\n} from '../../../../shared/generated-types/graphql';\nimport type { QueryParams } from '../../../graphql/utils/utils';\nimport { utils } from '../../../graphql/utils/utils';\nimport nodeMonitor from '../../../server/utils/nodeMonitor';\n\nconst getUserActivityDataForReports = async (\n  methodToInvoke: string,\n  urlParams: Maybe<Array<Maybe<UrlParams>>>,\n  rentGuaranteeUserToken: string,\n  rentGuaranteeSessionToken: string,\n): Promise<Activities | null> => {\n  const url = `${process.env.API}/rent-guarantee/api/v1/admin/${methodToInvoke}`;\n  const queryParams: QueryParams = utils.generateQueryParams(urlParams);\n  const response = await axios\n    .get(`${url}`, {\n      params: queryParams,\n      headers: {\n        Cookie: `rent-guaranteeUserToken=${rentGuaranteeUserToken}; rent-guaranteeSessionToken=${rentGuaranteeSessionToken}`,\n      },\n    })\n    .then((res): Activities | null => {\n      switch (methodToInvoke) {\n        case 'getUserActivityAllEvents':\n        case 'getUserActivityOptIns':\n          if (res) {\n            return {\n              __typename: 'Activities',\n              userActivities: convertToUserActivity(res?.data?.data?.logs || []),\n            };\n          }\n          return null;\n        case 'getApplicationFlagsUserActivityEvents':\n          if (res) {\n            return {\n              __typename: 'Activities',\n              userActivities: convertToApplicationActivity(res?.data?.data?.applicationFlagsUserActivity || []),\n            };\n          }\n          return null;\n        case 'getRentVoucherCoverageUserActivityEvents':\n          if (res) {\n            return {\n              __typename: 'Activities',\n              userActivities: convertToVoucherActivity(res?.data?.data?.rentVoucherCoverageUserActivity || []),\n            };\n          }\n          return null;\n        default:\n          return null;\n      }\n    })\n    .catch((err) => {\n      log.error(`Network error fetching user activity ${methodToInvoke} report: ${err}`);\n      // Log an error (using the class instance's logger):\n      nodeMonitor.increment({ name: 'userActivityReports failed', amount: 1 });\n      return null;\n    });\n\n  if (response) {\n    // Increment a count:\n    await nodeMonitor.increment({ name: 'userActivityReports viewed', amount: 1 });\n    return response;\n  }\n\n  return null;\n};\n\nconst convertToUserActivity = (\n  activities: Array<UserActivity | ListingActivity>,\n): Array<UserActivity | ListingActivity> => {\n  return activities.map((activity: UserActivity | ListingActivity): UserActivity | ListingActivity => {\n    return { ...activity, __typename: activity.idType == 'listingAlias' ? 'ListingActivity' : 'UserActivity' };\n  });\n};\n\nconst convertToApplicationActivity = (activities: Array<ApplicationActivity>): Array<ApplicationActivity> => {\n  return activities.map((activity: ApplicationActivity): ApplicationActivity => {\n    return { ...activity, __typename: 'ApplicationActivity' };\n  });\n};\n\nconst convertToVoucherActivity = (activities: Array<VoucherActivity>): Array<VoucherActivity> => {\n  return activities.map((activity: VoucherActivity): VoucherActivity => {\n    return { ...activity, __typename: 'VoucherActivity' };\n  });\n};\n\nexport default tracer.wrap(getUserActivityDataForReports);\n","import type { Maybe, Scalars, UrlParams } from '../../../shared/generated-types/graphql';\n\nexport type QueryParams = {\n  [key: Scalars['String']]: Scalars['String'];\n};\n\nconst generateQueryParams = (urlParams: Maybe<Array<Maybe<UrlParams>>>): QueryParams => {\n  const queryParams = {};\n  if (urlParams && urlParams?.length > 0) {\n    urlParams?.forEach((obj: Maybe<UrlParams>) => {\n      const keyName = obj?.name;\n      if (keyName) {\n        Object.assign(queryParams, { [keyName]: obj?.value });\n      }\n    });\n  }\n  return queryParams;\n};\n\nexport const utils = {\n  generateQueryParams,\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAWA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAPA;AAAA;AAUA;AACA;AACA;AADA;AAFA;AAOA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AAAA;AACA;AA3BA;AA6BA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AApDA;AAQA;AACA;AATA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAuDA;AAAA;AAAA;AACA;AAxDA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AA6DA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5FA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AADA;;;;A","sourceRoot":""}